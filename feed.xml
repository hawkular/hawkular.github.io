<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hawkular Blog</title>
    <link>http://www.hawkular.org</link>
    <atom:link href="http://www.hawkular.org/feed.xml" rel="self" type="application/rss+xml" />
    <description>Blog posts about Hawkular</description>
    <language>en-us</language>
    <pubDate>Mon, 11 Sep 2017 14:48:35 +0000</pubDate>
    <lastBuildDate>Mon, 11 Sep 2017 14:48:35 +0000</lastBuildDate>

    <item>
      <title>Hawkular Alerts with OpenTracing</title>
      <link>http://www.hawkular.org/blog/2017/09/alerts-opentracing.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Wed, 6 Sep 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/09/alerts-opentracing.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two recent blogs discuss how OpenTracing instrumentation can be used to collect application metrics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hawkular.org/blog/2017/06/26/opentracing-appmetrics.html&quot; class=&quot;bare&quot;&gt;http://www.hawkular.org/blog/2017/06/26/opentracing-appmetrics.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hawkular.org/blog/2017/08/opentracing-appmetrics-canary.html&quot; class=&quot;bare&quot;&gt;http://www.hawkular.org/blog/2017/08/opentracing-appmetrics-canary.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A further interesting integration can be the addition of Hawkular Alerts to the environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As the previous &lt;a href=&quot;http://www.hawkular.org/blog/2017/08/alerts-multiple-sources.html&quot;&gt;blog&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=mM1mwJneKO4&quot;&gt;demo&lt;/a&gt; discuss, Hawkular Alerts is a generic, federated alerts system that can trigger events, alerts, and notifications from different, independent systems such as Prometheus, ElasticSearch, and Kafka.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we can combine the two. Let&amp;#8217;s follow the directions for the OpenTracing demo (using the Jaeger implementation) and add Hawkular Alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What this can show is OpenTracing application metrics triggering alerts when (as in this example) OpenTracing spans encounter a larger-than-expected error rates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Note: these instructions assume you are using Kubernetes / Minikube - see the Hawkular OpenTracing blogs linked above for more details on these instructions)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_start_kubernetes&quot;&gt;START KUBERNETES&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we start minikube giving it enough resources to run all of the pods necessary for this demo. We also start up a browser pointing to the Kubernetes dashboard, so you can follow the progress of the remaining instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;minikube start --cpus 4 --memory 8192

minikube dashboard&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploy_prometheus&quot;&gt;DEPLOY PROMETHEUS&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;kubectl create -f https://raw.githubusercontent.com/coreos/prometheus-operator/v0.11.0/bundle.yaml

kubectl create -f https://raw.githubusercontent.com/objectiser/opentracing-prometheus-example/master/prometheus-kubernetes.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Note: the last command might not work depending on your version - if you get errors, download a copy of prometheus-kubernetes.yml and edit it, changing “v1alpha1” to “v1”)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploy_jaeger&quot;&gt;DEPLOY JAEGER&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;kubectl create -f https://raw.githubusercontent.com/jaegertracing/jaeger-kubernetes/master/all-in-one/jaeger-all-in-one-template.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following will build and deploy the Jaeger example code that will produce the OpenTracing data for the demo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;mkdir -p ${HOME}/opentracing ; cd ${HOME}/opentracing

git clone git@github.com:objectiser/opentracing-prometheus-example.git

cd opentracing-prometheus-example/simple

eval $(minikube docker-env)

mvn clean install docker:build

kubectl create -f services-kubernetes.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Note: The last command might not work depending on your version - if you get errors, edit services-kubernetes.yml, changing “v1alpha1” to “v1”)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploy_hawkular_alerts_and_create_alert_trigger&quot;&gt;DEPLOY HAWKULAR-ALERTS AND CREATE ALERT TRIGGER&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following will deploy Hawkular Alerts and create the trigger definition that will trigger an alert when the Jaeger OpenTracing data indicates an error rate that is over 30%&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;kubectl create -f https://raw.githubusercontent.com/hawkular/hawkular-alerts/master/dist/hawkular-alerts-k8s.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next use &lt;code&gt;minikube service hawkular-alerts --url&lt;/code&gt; to determine the Hawkular Alerts URL and point your browser to the path “/hawkular/alerts/ui” at that URL (i.e. &lt;code&gt;&lt;a href=&quot;http://host:port/hawkular/alerts/ui&quot; class=&quot;bare&quot;&gt;http://host:port/hawkular/alerts/ui&lt;/a&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the browser page running the Hawkular Alerts UI, enter a tenant name in the top right text field (“my-organization” for example) and click the “Change” button.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigate to the “Triggers” page (found in the left-hand nav menu).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click the kabob menu icon at the top and select “New Trigger”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the text area, enter the following to define a new trigger that will trigger alerts when the Prometheus query shows that there is a 30% error rate or greater in the accountmgr or ordermgr servers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
   &quot;trigger&quot;:{
      &quot;id&quot;:&quot;jaeger-prom-trigger&quot;,
      &quot;name&quot;:&quot;High Error Rate&quot;,
      &quot;description&quot;:&quot;Data indicates high error rate&quot;,
      &quot;severity&quot;:&quot;HIGH&quot;,
      &quot;enabled&quot;:true,
      &quot;autoDisable&quot;:false,
      &quot;tags&quot;:{
         &quot;prometheus&quot;:&quot;Test&quot;
      },
      &quot;context&quot;:{
         &quot;prometheus.url&quot;:&quot;http://prometheus:9090&quot;
      }
   },
   &quot;conditions&quot;:[
      {
         &quot;type&quot;:&quot;EXTERNAL&quot;,
         &quot;alerterId&quot;:&quot;prometheus&quot;,
         &quot;dataId&quot;:&quot;prometheus-test&quot;,
         &quot;expression&quot;:&quot;(sum(increase(span_count{error=\&quot;true\&quot;,span_kind=\&quot;server\&quot;}[1m])) without (pod,instance,job,namespace,endpoint,transaction,error,operation,span_kind) / sum(increase(span_count{span_kind=\&quot;server\&quot;}[1m])) without (pod,instance,job,namespace,endpoint,transaction,error,operation,span_kind)) &amp;gt; 0.3&quot;
      }
   ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div id=&quot;new-trigger&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-09-06-new-trigger.png&quot; alt=&quot;2017 09 06 new trigger&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Create New Alert Trigger&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;trigger&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-09-06-trigger.png&quot; alt=&quot;2017 09 06 trigger&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2: Alert Trigger&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now navigate back to the “Dashboard” page (again via the left-hand nav menu). From this Dashboard page, look for alerts when they are triggered. We&amp;#8217;ll next start generating the data that will trigger these alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_generate_some_sample_open_tracing_application_data&quot;&gt;GENERATE SOME SAMPLE OPEN TRACING APPLICATION DATA&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;export ORDERMGR=$(minikube service ordermgr --url)

${HOME}/opentracing/opentracing-prometheus-example/simple/genorders.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the data starts to be collected, you will see alerts in the Hawkular Alerts UI as error rates become over 30% in the past minute (as per the Prometheus query).&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div id=&quot;dashboard&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-09-06-dashboard.png&quot; alt=&quot;2017 09 06 dashboard&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3: Alerts Dashboard&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;alert-list&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-09-06-alert-list.png&quot; alt=&quot;2017 09 06 alert list&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4: Alert&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you look at the alerts information in the Hawkular Alerts UI, you’ll see the conditions that triggered the alerts. For example, one such alert could look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Time: 2017-09-01 17:41:17 -0400
External[prometheus]: prometheus-test[Event [tenantId=my-organization,
id=1a81471d-340d-4dba-abe9-5b991326dc80, ctime=1504302077288, category=prometheus,
dataId=prometheus-test, dataSource=&lt;em&gt;none&lt;/em&gt;, text=[1.504302077286E9, &lt;strong&gt;0.3333333333333333&lt;/strong&gt;],
context={&lt;strong&gt;service=ordermgr&lt;/strong&gt;, version=&lt;strong&gt;0.0.1&lt;/strong&gt;}, tags={}, trigger=null]] matches
[(sum(increase(span_count{error=&quot;true&quot;,span_kind=&quot;server&quot;}[1m])) without
(pod,instance,job,namespace,endpoint,transaction,error,operation,span_kind) /
sum(increase(span_count{span_kind=&quot;server&quot;}[1m])) without
(pod,instance,job,namespace,endpoint,transaction,error,operation,span_kind)) &amp;gt; 0.3]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice the “&lt;strong&gt;ordermgr&lt;/strong&gt;” service (version &quot;&lt;strong&gt;0.0.1&lt;/strong&gt;&quot;) had an error rate of &lt;strong&gt;0.3333&lt;/strong&gt; (33%) which caused the alert since it is above the allowed 30% threshold.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, the Hawkular Alerts UI provides the ability for system admins to log notes about the issue, acknowledge the alert and mark the alert resolved if the underlying issue has been fixed. These lifecycle functions (also available as REST operations) are just part of the value add of Hawkular-Alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You could do more complex things such as only trigger this alert if this Prometheus query generated results AND some other condition was true (say, ElasticSearch logs match a particular pattern, or if a Kafka topic had certain data). This demo merely scratches the surface, but does show how Hawkular Alerts can be used to work with OpenTracing to provide additional capabilities that may be found useful by system administrators and IT support personnel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Canary Deployment in OpenShift using OpenTracing based Application Metrics</title>
      <link>http://www.hawkular.org/blog/2017/08/opentracing-appmetrics-canary.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/08/opentracing-appmetrics-canary.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a &lt;a href=&quot;http://www.hawkular.org/blog/2017/06/26/opentracing-appmetrics.html&quot;&gt;previous article&lt;/a&gt;
we showed how &lt;a href=&quot;http://opentracing.io/&quot;&gt;OpenTracing&lt;/a&gt; instrumentation can be used to
collect application metrics, in addition to (but independent from) reported tracing data, from services
deployed within a cloud environment (e.g. &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; or &lt;a href=&quot;https://openshift.io/&quot;&gt;OpenShift&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article we will show how this information can be used to aid a
&lt;a href=&quot;https://martinfowler.com/bliki/CanaryRelease.html&quot;&gt;Canary deployment strategy&lt;/a&gt; within OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;error-ratio-service-version&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-08-18-canary-service-compare.png&quot; alt=&quot;2017 08 18 canary service compare&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Error ratio per service and version&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_updated_example_application&quot;&gt;The updated example application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will be using the same &lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example&quot;&gt;example&lt;/a&gt; as used in the previous
article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However since writing that article, the configuration of the tracer and Prometheus metrics support has been
simplified. There is now no explicit configuration of either, with only some auto configuration of &lt;code&gt;MetricLabel&lt;/code&gt; beans
to identify some custom labels to be added to the Prometheus metrics, e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Metrics configuration used in both services:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Configuration
public class MetricsConfiguration {

    @Bean
    public MetricLabel transactionLabel() {
        return new BaggageMetricLabel(&quot;transaction&quot;, &quot;n/a&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }

    @Bean
    public MetricLabel versionLabel() {
        return new ConstMetricLabel(&quot;version&quot;, System.getenv(&quot;VERSION&quot;)); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This metric label identifies the business transaction associated with the metrics, which can be used to isolate the
specific number of requests, duration and errors that occurred when the service was used within the particular business
transaction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This metric label identifies the service version, which is especially useful in the Canary deployment use case being
discussed in this article&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is to following the instructions in the &lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example&quot;&gt;example&lt;/a&gt;
for deploying and using the services within OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;./genorders.sh&lt;/code&gt; script has been running for a while, to generate plenty of metrics for version &lt;code&gt;0.0.1&lt;/code&gt; of the
services, then deploy the new version of the services. This is achieved by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;updating the versions in the &lt;code&gt;pom.xml&lt;/code&gt; files, within the &lt;code&gt;simple/accountmgr&lt;/code&gt; and &lt;code&gt;simple/ordermgr&lt;/code&gt; folders
from &lt;code&gt;0.0.1&lt;/code&gt; to &lt;code&gt;0.0.2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;re-run the &lt;code&gt;mvn clean install docker:build&lt;/code&gt; command from the &lt;code&gt;simple&lt;/code&gt; folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deploy the canary versions of the services using the command &lt;code&gt;oc create -f services-canary-kubernetes.yml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As our services &lt;code&gt;accountmgr&lt;/code&gt; and &lt;code&gt;ordermgr&lt;/code&gt; determine the backing deployment based on the respective labels
&lt;code&gt;app: accountmgr&lt;/code&gt; and &lt;code&gt;app: ordermgr&lt;/code&gt;, simply having a second deployment with these labels will make them serve requests
in a round-robin manner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This deployment script has been pre-configured with the &lt;code&gt;0.0.2&lt;/code&gt; version, and to only start a single instance of the
new version of the services. This may be desirable if you want to monitor the behaviour of the new service versions over
a reasonable time period, but as we want to see results faster we will scale them up to see more activity. You can do this
by expanding the deployment area for each service in the OpenShift web console and selecting the up arrow to scale
up each service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-08-18-canary-scale-up.png&quot; alt=&quot;2017 08 18 canary scale up&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2: Scaling up canary deployment&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can monitor the Prometheus dashboard, using the following query, to see the error ratio per service and version:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;sum(increase(span_count{error=&quot;true&quot;,span_kind=&quot;server&quot;}[1m])) without (pod,instance,job,namespace,endpoint,transaction,error,operation,span_kind) / sum(increase(span_count{span_kind=&quot;server&quot;}[1m])) without (pod,instance,job,namespace,endpoint,transaction,error,operation,span_kind)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The result of this query can be seen in &lt;a href=&quot;#error-ratio-service-version&quot;&gt;Figure 1&lt;/a&gt; at the top of the article.
This chart shows that version &lt;code&gt;0.0.2&lt;/code&gt; of the &lt;code&gt;accountmgr&lt;/code&gt; service has not generated any errors, while the &lt;code&gt;0.0.2&lt;/code&gt;
of the &lt;code&gt;ordermgr&lt;/code&gt; appears to be less error prone than version &lt;code&gt;0.0.1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on these metrics, we could decide that the new versions of these services are better than the previous, and
therefore update the main service deployments to use the new versions.
In the OpenShift web console you can do this by clicking the three vertical dots in the upper right hand side of the
deployment region and selecting &lt;em&gt;Edit YAML&lt;/em&gt; from the menu.
This will display an editor window where you can change the version from &lt;code&gt;0.0.1&lt;/code&gt; to &lt;code&gt;0.0.2&lt;/code&gt; in the YAML file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-08-18-canary-service-update.png&quot; alt=&quot;2017 08 18 canary service update&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3: Update the service version&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you save the YAML configuration file, in the web console you can see the service going through a &quot;rolling update&quot; as OpenShift incrementally changes each service instance over to the new version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-08-18-canary-rolling-update.png&quot; alt=&quot;2017 08 18 canary rolling update&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4: Rolling update&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the rolling update has completed for both the &lt;code&gt;ordermgr&lt;/code&gt; and &lt;code&gt;accountmgr&lt;/code&gt; services, then you can scale down or
completely remove the canary version of each deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An alternative to performing the rolling update would simply be to name the canary version something else (i.e. specific
to the version being tested), and when it comes time to switch over, simply scale down the previous deployment version. This
would be more straightforward, but wouldn&amp;#8217;t show off the cool rolling update approach in the OpenShift web console :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-08-18-canary-scale-down.png&quot; alt=&quot;2017 08 18 canary scale down&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5: Scaling down canary deployment&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Although we have updated both services at the same time, this is not necessary. Generally microservices would be managed
by separate teams and subject to their own deployment lifecycles.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article has shown how application metrics, captured by instrumenting services using the OpenTracing API, can
be used to support a simple Canary deployment strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These metrics can similarly be used with other deployment strategies,
such as &lt;a href=&quot;https://en.wikipedia.org/wiki/A/B_testing&quot;&gt;A/B testing&lt;/a&gt;, which can be achieved
using a &lt;a href=&quot;https://docs.openshift.com/container-platform/3.6/dev_guide/routes.html#routes-load-balancing-for-AB-testing&quot;&gt;weighted load balancing capability&lt;/a&gt; within OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing: &lt;a href=&quot;http://opentracing.io&quot; class=&quot;bare&quot;&gt;http://opentracing.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github repository with demo: &lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example&quot; class=&quot;bare&quot;&gt;https://github.com/objectiser/opentracing-prometheus-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing java metrics: &lt;a href=&quot;https://github.com/opentracing-contrib/java-metrics&quot; class=&quot;bare&quot;&gt;https://github.com/opentracing-contrib/java-metrics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes: &lt;a href=&quot;https://kubernetes.io&quot; class=&quot;bare&quot;&gt;https://kubernetes.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenShift: &lt;a href=&quot;https://openshift.io&quot; class=&quot;bare&quot;&gt;https://openshift.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jaeger: &lt;a href=&quot;https://github.com/uber/jaeger&quot; class=&quot;bare&quot;&gt;https://github.com/uber/jaeger&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prometheus: &lt;a href=&quot;https://prometheus.io&quot; class=&quot;bare&quot;&gt;https://prometheus.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Advanced Behaviour Detection with Nelson Rules</title>
      <link>http://www.hawkular.org/blog/2017/08/alerts-nelson-rules.html</link>
      <author>noreply@hawkular.org (Lucas Ponce)</author>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/08/alerts-nelson-rules.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_modeling_conditions&quot;&gt;Modeling Conditions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting offers several types of &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html#_conditions&quot;&gt;Conditions&lt;/a&gt; for defining Triggers. Most of the Conditions deal with numeric data but String, Availability and Event data are also supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Modeling scenarios for detecting behaviours is highly dependent on the nature of the Domain being represented.  The Domain may only require simple numeric threshold conditions to efficiently detect unexpected situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In other domains, it can be non-trivial to identify unusual metric variations that may lead to a problem.
Simple thresholds are not expressive enough to detect metric patterns or trends that can identify potential problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_nelson_rules&quot;&gt;Nelson Rules&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting supports Conditions based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Nelson_rules&quot;&gt;Nelson Rules&lt;/a&gt; to enable advanced detection on Numeric metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These rules are based on the mean and the standard deviation of the samples and offer additional techniques for modeling complex scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;...
&quot;trigger&quot;:{
   &quot;id&quot;: &quot;nelson-rule-trigger&quot;,
   &quot;name&quot;: &quot;Nelson Rule Trigger&quot;,
   &quot;description&quot;: &quot;An example Trigger that uses Nelson Rules Conditions.&quot;,
   &quot;enabled&quot;: true,
   &quot;actions&quot;:[]
},
&quot;conditions&quot;:[
   {
      &quot;type&quot;: &quot;NELSON&quot;, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
      &quot;dataId&quot;: &quot;metric-data-id&quot;,
      &quot;activeRules&quot;: [&quot;Rule1&quot;,&quot;Rule2&quot;], &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
      &quot;sampleSize&quot;: 75 &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
   }
]
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Mark this Condition as a NelsonRule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define the Nelson Rules to activate (Rule1, Rule2, &amp;#8230;&amp;#8203;, Rule8) for metric-data-id (all rules are activated by default)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define the sampleSize (by default this value is set to 50)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each rule represents a specific pattern as described below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_1&quot;&gt;Rule 1&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr1.png&quot; alt=&quot;Nelson Rule 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One sample is grossly out of control.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_2&quot;&gt;Rule 2&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr2.png&quot; alt=&quot;Nelson Rule 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some prolonged error has been detected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_3&quot;&gt;Rule 3&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr3.png&quot; alt=&quot;Nelson Rule 3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An unusual trend has been detected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_4&quot;&gt;Rule 4&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr4.png&quot; alt=&quot;Nelson Rule 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The oscillation of a metric is beyond an expected amount of noise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the rule is concerned with directionality only. The position of the mean and the size of the standard deviation have no bearing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_5&quot;&gt;Rule 5&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr5.png&quot; alt=&quot;Nelson Rule 5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a medium tendency for samples to be mediumly out of control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The side of the mean for the third point is unspecified.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_6&quot;&gt;Rule 6&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr6.png&quot; alt=&quot;Nelson Rule 6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a strong tendency for samples to be out of control.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_7&quot;&gt;Rule 7&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr7.png&quot; alt=&quot;Nelson Rule 7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A greater variation would be expected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_rule_8&quot;&gt;Rule 8&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/nr8.png&quot; alt=&quot;Nelson Rule 8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jumping from above to below whilst missing the first standard deviation band is rarely random.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Applying Nelson Rules in our scenario can help to detect potential &quot;out of control&quot; situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But as discussed, modeling scenarios are highly dependent of the nature of the Domain; applying Nelson Rules is a useful tool to help identify a problem.  Although, the alerts are predictive and a Domain&amp;#8217;s Analyst may need to evaluate the quality of the model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Alerts with Prometheus, ElasticSearch, Kafka</title>
      <link>http://www.hawkular.org/blog/2017/08/alerts-multiple-sources.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/08/alerts-multiple-sources.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_federated_alerts&quot;&gt;Federated Alerts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts aims to be a federated alerting system. That is to say, it can fire alerts and send notifications that are triggered by data coming from a number of third-party external systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, Hawkular Alerts is more than just an alerting system for use with Hawkular Metrics. In fact, Hawkular Alerts can be used independently of Hawkular Metrics. This means you do not even have to be using Hawkular Metrics to take advantage of the functionality provided by Hawkular Alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a key differentiator between Hawkular Alerts and other alerting systems. Most alerting systems only alert on data coming from their respective storage systems (e.g. the Prometheus Alert Engine alerts only on Prometheus data). Hawkular Alerts, on the other hand, can trigger alerts based on data from various systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_alerts_vs_events&quot;&gt;Alerts vs. Events&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we begin, a quick clarification is in order. When it is said that Hawkular Alerts fires an &quot;alert&quot; it means some data came into Hawkular Alerts that matched some conditions which triggered the creation of an alert in Hawkular Alerts backend storage (which can then trigger additional actions such as sending emails or calling a webhook). An &quot;alert&quot; typically refers to a problem that has been detected, and someone should take action to fix it. An alert has a lifecycle attached to it - alerts are &lt;em&gt;opened&lt;/em&gt;, then &lt;em&gt;acknowledged&lt;/em&gt; by some user who will hopefully fix the problem, then &lt;em&gt;resolved&lt;/em&gt; when the problem can be considered closed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, there can be conditions that occur that do not represent problems but nevertheless are events you want recorded. There is no lifecycle associated with events and no additional actions are triggered by events, but &quot;events&quot; are fired by Hawkular Alerts in the same general manner as &quot;alerts&quot; are.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this document, when it is said that Hawkular Alerts can fire &quot;alerts&quot; based on data coming from external third-party systems such as Prometheus, ElasticSearch, and Kakfa, this also means events can be fired as well as alerts. What this means is you can record any event (not just a &quot;problem&quot;, aka &quot;alert&quot;) that can be gleaned from this data coming from external third-party systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html#_alerting_philosophy&quot;&gt;alerting philosophy&lt;/a&gt; for more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://youtu.be/mM1mwJneKO4&quot;&gt;recorded demo found here&lt;/a&gt; that will illustrate what this document is describing. After you read this document, you should watch the demo to gain further clarity on what is being explained. The demo is the &lt;code&gt;multiple-sources&lt;/code&gt; example which you can run yourself found &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples/multiple-sources&quot;&gt;here&lt;/a&gt; (note: at the time of writing, this example is only found in the &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/next/examples/multiple-sources&quot;&gt;next branch&lt;/a&gt;, to be merged in master soon).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_prometheus&quot;&gt;Prometheus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts can take the results of Prometheus metric queries and use the queried data for triggers that can fire alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Hawkular Alerts trigger will fire an alert (and send an email) when a Prometheus metric indicates our store&amp;#8217;s inventory of widgets is consistently low (as defined by the Prometheus query you see in the &quot;expression&quot; field of the condition):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;trigger&quot;:{
   &quot;id&quot;: &quot;low-stock-prometheus-trigger&quot;,
   &quot;name&quot;: &quot;Low Stock&quot;,
   &quot;description&quot;: &quot;The number of widgets in stock is consistently low.&quot;,
   &quot;severity&quot;: &quot;MEDIUM&quot;,
   &quot;enabled&quot;: true,
   &quot;tags&quot;: {
      &quot;prometheus&quot;: &quot;Prometheus&quot;
   },
   &quot;actions&quot;:[
      {
      &quot;actionPlugin&quot;: &quot;email&quot;,
      &quot;actionId&quot;: &quot;email-notify-owner&quot;
      }
   ]
},
&quot;conditions&quot;:[
   {
      &quot;type&quot;: &quot;EXTERNAL&quot;,
      &quot;alerterId&quot;: &quot;prometheus&quot;,
      &quot;dataId&quot;: &quot;prometheus-dataid&quot;,
      &quot;expression&quot;: &quot;rate(products_in_inventory{product=\&quot;widget\&quot;}[30s])&amp;lt;2&quot;
   }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_integration_with_prometheus_alert_engine&quot;&gt;Integration with Prometheus Alert Engine&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a side note, though not demostrated in the example, Hawkular Alerts also has an integration with Prometheus&apos; own Alert Engine. This means the alerts generated by Prometheus itself can be forward to Hawkular Alerts which can, in turn, be used for additional processing, perhaps for use with data that is unavailable to Prometheus that can tell Hawkular Alerts to fire other alerts. For example, Hawkular Alerts can take Prometheus alerts as input and feed it back into other conditions that trigger on the Prometheus alert along with ElasticSearch logs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_elasticsearch&quot;&gt;ElasticSearch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts can examine logs stored in ElasticSearch and trigger alerts based on patterns that match within the ElasticSearch log messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Hawkular Alerts trigger will fire an alert (and send an email) when ElasticSearch logs indicate sales are being lost due to inventory being out of stock of items (as defined by the condition which looks for a log category of &quot;FATAL&quot; which happens to mean a lost sale in the case of the store&amp;#8217;s logs). Notice dampening is enabled on this trigger - this alert will only fire when the logs indicate lost sales every 3 times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;trigger&quot;:{
   &quot;id&quot;: &quot;lost-sale-elasticsearch-trigger&quot;,
   &quot;name&quot;: &quot;Lost Sale&quot;,
   &quot;description&quot;: &quot;A sale was lost due to inventory out of stock.&quot;,
   &quot;severity&quot;: &quot;CRITICAL&quot;,
   &quot;enabled&quot;: true,
   &quot;tags&quot;: {
      &quot;Elasticsearch&quot;: &quot;Localhost instance&quot;
   },
   &quot;context&quot;: {
      &quot;timestamp&quot;: &quot;@timestamp&quot;,
      &quot;filter&quot;: &quot;{\&quot;match\&quot;:{\&quot;category\&quot;:\&quot;inventory\&quot;}}&quot;,
      &quot;interval&quot;: &quot;10s&quot;,
      &quot;index&quot;: &quot;store&quot;,
      &quot;mapping&quot;: &quot;level:category,@timestamp:ctime,message:text,category:dataId,index:tags&quot;
   },
   &quot;actions&quot;:[
      {
      &quot;actionPlugin&quot;: &quot;email&quot;,
      &quot;actionId&quot;: &quot;email-notify-owner&quot;
      }
   ]
},
&quot;dampenings&quot;: [
   {
      &quot;triggerMode&quot;: &quot;FIRING&quot;,
      &quot;type&quot;:&quot;STRICT&quot;,
      &quot;evalTrueSetting&quot;: 3
   }
],
&quot;conditions&quot;:[
   {
      &quot;type&quot;: &quot;EVENT&quot;,
      &quot;dataId&quot;: &quot;inventory&quot;,
      &quot;expression&quot;: &quot;category == &apos;FATAL&apos;&quot;
   }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kafka&quot;&gt;Kafka&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts can examine data retrieved from Kafka message streams and trigger alerts based that Kafka data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Hawkular Alerts trigger will fire an alert when data over a Kakfa topic indicates a large purchase was made to fill the store&amp;#8217;s inventory (as defined by the condition which evaluates to true when any number over 17 is received on the Kafka topic):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;trigger&quot;:{
   &quot;id&quot;: &quot;large-inventory-purchase-kafka-trigger&quot;,
   &quot;name&quot;: &quot;Large Inventory Purchase&quot;,
   &quot;description&quot;: &quot;A large purchase was made to restock inventory.&quot;,
   &quot;severity&quot;: &quot;LOW&quot;,
   &quot;enabled&quot;: true,
   &quot;tags&quot;: {
      &quot;Kafka&quot;: &quot;Localhost instance&quot;
   },
   &quot;context&quot;: {
      &quot;topic&quot;: &quot;store&quot;,
      &quot;kafka.bootstrap.servers&quot;: &quot;localhost:9092&quot;,
      &quot;kafka.group.id&quot;: &quot;hawkular-alerting&quot;
   },
   &quot;actions&quot;:[ ]
},
&quot;conditions&quot;:[
   {
      &quot;type&quot;: &quot;THRESHOLD&quot;,
      &quot;dataId&quot;: &quot;store&quot;,
      &quot;operator&quot;: &quot;GT&quot;,
      &quot;threshold&quot;: 17
   }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_but_wait_there_s_more&quot;&gt;But, Wait! There&amp;#8217;s More!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above only mentions the different ways Hawkular Metrics retrieves data for use in determining what alerts to fire. What is not covered here is the fact that Hawkular Alerts can stream data in the other direction as well - Hawkular Alerts can send alert and event data &lt;em&gt;to&lt;/em&gt; things like an ElasticSearch server or a Kafka broker. There are additional examples (mentioned below) that can demonstrate this capability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The point is Hawkular Alerts should be seen as a shared, common alerting engine that can be shared for use by multiple third-party systems and can be used as both a consumer and producer - as a consumer of the data from external third-party systems (which is used to fire alerts and events) and as a producer to send notifications of alerts and events to external third-party systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_more_examples&quot;&gt;More Examples&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take a look at the Hawkular Alerts &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;examples&lt;/a&gt; for more examples on using external systems as data to be used for triggering alerts. (note: at the time of writing, some examples are currently in the &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/next/examples&quot;&gt;next branch&lt;/a&gt; such as the Kafka ones).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>OpenTracing EJB instrumentation</title>
      <link>http://www.hawkular.org/blog/2017/07/opentracing-ejb.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/07/opentracing-ejb.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenTracing features more and more framework integrations, allowing for transparent instrumentation
of applications with minimal effort. This blog post will show how to use the EJB instrumentation
to automatically trace EJB invocations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-28-teaser.png&quot; alt=&quot;Jaeger with EJB traces&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this demo, we&amp;#8217;ll generate a project using the Wildfly Swarm project generator, which allows us to
have a seed project with the appropriate OpenTracing support in place. The concrete OpenTracing solution
we will use is provided by the &lt;a href=&quot;https://uber.github.io/jaeger/&quot;&gt;Jaeger project&lt;/a&gt;, which is also
provided as a Wildfly Swarm Fraction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that, we&amp;#8217;ll create a simple JAX-RS endpoint with an EJB facet, invoking a set of EJB services in
different ways to demonstrate all the features of this integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our application has one endpoint called &lt;code&gt;/order&lt;/code&gt;, responsible for receiving requests to place orders
in our system. When we call this endpoint, we also call some other EJB services, like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AccountService&lt;/code&gt; to send a notification that an order has been placed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OrderService&lt;/code&gt; to effectively place the order&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;InventoryService&lt;/code&gt; to change our inventory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;InventoryNotificationService&lt;/code&gt;, to notify other backend systems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we are only interested in the tracing parts, we&amp;#8217;ll not implement the business code itself, only the
scaffolding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our demo project is heavily based on the
&lt;a href=&quot;https://github.com/opentracing-contrib/java-ejb/tree/release-0.0.2/opentracing-ejb-example&quot;&gt;&lt;code&gt;opentracing-ejb-example&lt;/code&gt;&lt;/a&gt;
from the repository &lt;a href=&quot;https://github.com/opentracing-contrib/java-ejb&quot;&gt;&lt;code&gt;opentracing-contrib/java-ejb&lt;/code&gt;&lt;/a&gt;.
We have also prepared &lt;a href=&quot;/data/blog/2017/2017-07-28-demo-example-complete.tar.gz&quot;&gt;an archive&lt;/a&gt; with the
final outcome of this demo, which you can use as reference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_seed_project&quot;&gt;The seed project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To generate the seed project, open the &lt;a href=&quot;http://wildfly-swarm.io/generator/&quot;&gt;Wildfly Swarm generator&lt;/a&gt;
and create a project with the &quot;Group ID&quot; &lt;code&gt;io.opentracing.contrib.ejb&lt;/code&gt; and &quot;Artifact ID&quot;
&lt;code&gt;demo-example&lt;/code&gt;. Add the dependencies &lt;code&gt;EJB&lt;/code&gt;, &lt;code&gt;CDI&lt;/code&gt;, &lt;code&gt;JAX-RS&lt;/code&gt;, &lt;code&gt;OpenTracing&lt;/code&gt;, and &lt;code&gt;Jaeger&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Make sure to select all listed dependencies and confirm that they are shown in the &quot;Selected dependencies&quot;
section, otherwise, you might not have all the required fractions for this demo.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on &lt;code&gt;Generate Project&lt;/code&gt; and you&amp;#8217;ll get a ZIP file with the seed project. Uncompress it and add the following
dependency to the &lt;code&gt;pom.xml&lt;/code&gt;, within the &lt;code&gt;dependencies&lt;/code&gt; node and after the &lt;code&gt;WildFly Swarm Fractions&lt;/code&gt; dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.opentracing.contrib&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;opentracing-ejb&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;0.0.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s now a good time to perform a sanity build, to make sure everything is in place. The first build might take a few minutes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ mvn wildfly-swarm:run
...
...
2017-07-26 12:02:19,154 INFO  [org.wildfly.swarm] (main) WFSWARM99999: WildFly Swarm is Ready&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If it looks good, stop the server with &lt;code&gt;Ctrl+C&lt;/code&gt; and let&amp;#8217;s start coding our application!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_application&quot;&gt;The application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start by defining a JAX-RS endpoint that also acts as a stateless EJB. This is a common trick
to get JAX-RS endpoints to be managed as EJBs, so that they can be invoked via JMX or get
monitoring features. Or, in our case, to get traced via EJB interceptors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This endpoint is where we get our HTTP requests from and where our transaction starts, from
the tracing perspective. Once we receive an HTTP request, we call the
&lt;code&gt;AccountService#sendNotification&lt;/code&gt; method and then the &lt;code&gt;OrderService#processOrderPlacement&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that we annotate the class with &lt;code&gt;@Interceptors(OpenTracingInterceptor.class)&lt;/code&gt;, which means
that all methods on this class are to be traced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/java/io/opentracing/contrib/ejb/demoexample/Endpoint.java&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package io.opentracing.contrib.ejb.demoexample;

import io.opentracing.contrib.ejb.OpenTracingInterceptor;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.interceptor.Interceptors;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import java.util.logging.Logger;

/**
 * This is a regular JAX-RS endpoint with EJB capabilities. We use the EJB capability to specify an interceptor,
 * so that every method on this class is wrapped on its own span. If the OpenTracing JAX-RS integration is being used,
 * it would be a good idea to not have the interceptor at this level, to avoid having too much &quot;noise&quot;.
 *
 * @author Juraci Paixão Kröhling
 */
@Path(&quot;/order&quot;)
@Stateless
@Interceptors(OpenTracingInterceptor.class)
public class Endpoint {
    private static final Logger log = Logger.getLogger(Endpoint.class.getName());

    @Inject
    AccountService accountService;

    @Inject
    OrderService orderService;

    @POST
    @Path(&quot;/&quot;)
    public String placeOrder() {
        log.info(&quot;Request received to place an order&quot;);
        accountService.sendNotification();
        orderService.processOrderPlacement();
        return &quot;Order placed&quot;;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our &lt;code&gt;AccountService&lt;/code&gt; is a simple stateless EJB, responsible for sending a notification about the new order
to the owner of the account. Here, we could call another service, or send an email, SMS or any other form
of message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As this is a regular EJB, we are able to automatically join the span context from the JAX-RS endpoint, making
this call a child span of the main transaction. This is all transparent to you as developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note again that we annotate the bean with &lt;code&gt;@Interceptors(OpenTracingInterceptor.class)&lt;/code&gt;. As our interceptor
is just like any other EJB interceptor, you could use a &lt;code&gt;ejb-jar.xml&lt;/code&gt; to automatically use this inteceptor on
all available beans. Whether or not to trace all beans is a per-deployment decision, so, no &lt;code&gt;ejb-jar.xml&lt;/code&gt; is
provided by the integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/java/io/opentracing/contrib/ejb/demoexample/AccountService.java&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package io.opentracing.contrib.ejb.demoexample;

import io.opentracing.contrib.ejb.OpenTracingInterceptor;

import javax.ejb.Stateless;
import javax.interceptor.Interceptors;
import java.util.logging.Logger;

/**
 * This is a simple synchronous EJB, without any knowledge about span context or other OpenTracing semantics. All it
 * does is specify an interceptor and it&apos;s shown as the child of a parent span.
 *
 * @author Juraci Paixão Kröhling
 */
@Stateless
@Interceptors(OpenTracingInterceptor.class)
public class AccountService {
    private static final Logger log = Logger.getLogger(AccountService.class.getName());

    public void sendNotification() {
        log.info(&quot;Notifying the account owner about a new order&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our &lt;code&gt;OrderService&lt;/code&gt; is responsible for actually placing the order: it&amp;#8217;s where the business knowledge
resides. We&amp;#8217;ll later look into details at the &lt;code&gt;InventoryService&lt;/code&gt;, but for now, we need to know that
this service requires a &lt;code&gt;SpanContext&lt;/code&gt; to be explicitly passed. We can get this context from the &lt;code&gt;EJBContext&lt;/code&gt;,
stored under a context data entry that can be retrieved with the constant
&lt;code&gt;io.opentracing.contrib.ejb.OpenTracingInterceptor.SPAN_CONTEXT&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/java/io/opentracing/contrib/ejb/demoexample/OrderService.java&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package io.opentracing.contrib.ejb.demoexample;

import io.opentracing.SpanContext;
import io.opentracing.contrib.ejb.OpenTracingInterceptor;

import javax.annotation.Resource;
import javax.ejb.EJBContext;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.interceptor.Interceptors;
import java.util.logging.Logger;

import static io.opentracing.contrib.ejb.OpenTracingInterceptor.SPAN_CONTEXT;

/**
 * This is a regular synchronous stateless EJB. It demonstrates how to get the span context for the span it&apos;s wrapped
 * on. This can be used to pass down the call chain, create child spans or add baggage items.
 *
 * @author Juraci Paixão Kröhling
 */
@Stateless
@Interceptors(OpenTracingInterceptor.class)
public class OrderService {
    private static final Logger log = Logger.getLogger(OrderService.class.getName());

    @Resource
    EJBContext ctx;

    @Inject
    InventoryService inventoryService;

    public void processOrderPlacement() {
        log.info(&quot;Placing order&quot;);
        Object ctxParentSpan = ctx.getContextData().get(SPAN_CONTEXT);
        if (ctxParentSpan instanceof SpanContext) {
            inventoryService.changeInventory((SpanContext) ctxParentSpan);
            return;
        }

        inventoryService.changeInventory(null);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our &lt;code&gt;InventoryService&lt;/code&gt; is responsible for interfacing with backend systems dealing with inventory control.
We don&amp;#8217;t want to block the parent transaction while interacting with those systems, so, we make this an
asynchronous EJB. When dealing with asynchronous objects, it&amp;#8217;s a good idea to be explicit about the span
context, as there are potential concurrency issues when sharing a context between a synchronous and an
asynchronous bean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenTracing EJB integration is able to intercept the method call and detect if there is a span context
among the parameters, which is the case of the &lt;code&gt;changeInventory(SpanContext)&lt;/code&gt; method. In this situation,
the following happens behind the scenes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The caller makes a method call, passing the &lt;code&gt;SpanContext&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interceptor is activated, creating a new child span using the &lt;code&gt;SpanContext&lt;/code&gt; as the parent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interceptor replaces the original &lt;code&gt;SpanContext&lt;/code&gt; with this new child span on the method call&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The intercepted method is finally invoked, wrapped by the new child span.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the &lt;code&gt;SpanContext&lt;/code&gt; passed by the &lt;code&gt;OrderService&lt;/code&gt; is not the same as the one received by &lt;code&gt;InventoryService&lt;/code&gt;.
While this might cause some confusion, we believe this is the right semantic for this use case, as it allows
for a complete tracing picture, without any explicit tracing code, apart from passing the context around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/java/io/opentracing/contrib/ejb/demoexample/InventoryService.java&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package io.opentracing.contrib.ejb.demoexample;

import io.opentracing.SpanContext;
import io.opentracing.contrib.ejb.OpenTracingInterceptor;

import javax.ejb.Asynchronous;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.interceptor.Interceptors;
import java.util.logging.Logger;

/**
 * This is an asynchronous stateless EJB with spans created automatically by the interceptor. Note that the span context
 * that this method sees is &amp;lt;b&amp;gt;not&amp;lt;/b&amp;gt; the same as the span context sent by the caller: the interceptor wraps this
 * method call on its own span, and replaces the span context by the context of this new span. This is done so that this
 * span context can be passed along to the next service &quot;as is&quot;.
 *
 * @author Juraci Paixão Kröhling
 */
@Asynchronous
@Stateless
@Interceptors({OpenTracingInterceptor.class})
public class InventoryService {
    private static final Logger log = Logger.getLogger(InventoryService.class.getName());

    @Inject
    InventoryNotificationService inventoryNotificationService;

    public void changeInventory(SpanContext context) {
        log.info(&quot;Changing the inventory&quot;);
        inventoryNotificationService.sendNotification(context);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, our last service, &lt;code&gt;InventoryNotificationService&lt;/code&gt;: in this case, we notify another set of backend systems
that a new order has been placed. Again, this is an asynchronous EJB and works like the one above, but additionally,
we wanted to manually create a &quot;business span&quot;, called &lt;code&gt;sendNotification&lt;/code&gt;. This method could send several notifications,
wrapping each one into a span of its own. As we manually started it, we manually finish it as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/java/io/opentracing/contrib/ejb/demoexample/InventoryNotificationService.java&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package io.opentracing.contrib.ejb.demoexample;

import io.opentracing.Span;
import io.opentracing.SpanContext;
import io.opentracing.util.GlobalTracer;

import javax.ejb.Asynchronous;
import javax.ejb.Stateless;
import java.util.logging.Logger;

/**
 * This is the final call in the chain. This is an asynchronous stateless EJB, which obtains the span context
 * via a method parameter. This bean is not intercepted in any way by us, so, the span context received is exactly
 * the same as what was sent by the caller.
 *
 * @author Juraci Paixão Kröhling
 */
@Stateless
@Asynchronous
public class InventoryNotificationService {
    private static final Logger log = Logger.getLogger(InventoryNotificationService.class.getName());

    public void sendNotification(SpanContext context) {
        Span span = GlobalTracer.get().buildSpan(&quot;sendNotification&quot;).asChildOf(context).startManual();
        log.info(&quot;Sending an inventory change notification&quot;);
        span.finish();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s do a final sanity check and see if everything is in the right place:
&lt;code&gt;mvn wildfly-swarm:run&lt;/code&gt; . As before, the final message should be &lt;code&gt;WildFly Swarm is Ready&lt;/code&gt;. Hit &lt;code&gt;Ctrl+C&lt;/code&gt; and let&amp;#8217;s
setup our tracing backend.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_tracing_backend&quot;&gt;The tracing backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instrumenting our code is one part of the story. The other part is to plug in an actual OpenTracing implementation that
is capable of capturing the spans and submitting them to a backend service. For our demo, we&amp;#8217;ll use Jaeger. If you don&amp;#8217;t
have a Jaeger server running yet, one can be started via Docker as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run \
    --rm \
    -p5775:5775/udp \
    -p6831:6831/udp \
    -p6832:6832/udp \
    -p5778:5778 \
    -p16686:16686 \
    -p14268:14268 \
    --name jaeger \
    jaegertracing/all-in-one:latest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tying_everything_together&quot;&gt;Tying everything together&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have our code ready and a tracing backend, let&amp;#8217;s start Wildfly Swarm passing a service name, which is the only
property required by the Jaeger client. By default, Jaeger&amp;#8217;s Java tracer will attempt to send traces via UDP to a
Jaeger Agent located on the local machine. If you are using a different architecture, refer to the
&lt;a href=&quot;https://github.com/uber/jaeger-client-java/tree/master/jaeger-core&quot;&gt;Jaeger&amp;#8217;s documentation&lt;/a&gt;
on how to use environment variables to configure the client, or refer to the
&lt;a href=&quot;https://github.com/wildfly-swarm/wildfly-swarm-examples/tree/master/jaeger/jaeger-servlet&quot;&gt;Jaeger&amp;#8217;s fraction for Wildfly Swarm&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our demo, we&amp;#8217;ll use a property that is recognized by the Jaeger&amp;#8217;s Wildfly Swarm Fraction. The other two properties are telling
Jaeger that every request should be sampled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn wildfly-swarm:run -Dswarm.jaeger.service-name=order-processing -Dswarm.jaeger.sampler-type=const -Dswarm.jaeger.sampler-parameter=1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Watch the logs for an entry containing &lt;code&gt;com.uber.jaeger.Configuration&lt;/code&gt;: if everything is correctly set, it should show the
complete configuration of the Jaeger client, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;2017-07-26 12:03:09,139 INFO  [com.uber.jaeger.Configuration] (ServerService Thread Pool -- 6) Initialized tracer=Tracer(version=Java-0.20.0, serviceName=order-processing, reporter=RemoteReporter(queueProcessor=RemoteReporter.QueueProcessor(open=true), sender=UdpSender(udpTransport=ThriftUdpTransport(socket=java.net.DatagramSocket@7270de22, receiveBuf=null, receiveOffSet=-1, receiveLength=0)), maxQueueSize=100, closeEnqueueTimeout=1000), sampler=ConstSampler(decision=true, tags={sampler.type=const, sampler.param=true}), ipv4=-1062731153, tags={hostname=carambola, jaeger.version=Java-0.20.0, ip=192.168.2.111}, zipkinSharedRpcSpan=false)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the message &lt;code&gt;WildFly Swarm is Ready&lt;/code&gt; is seen, we can start making requests to our endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ curl -X POST localhost:8080/order
Order placed&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this can be seen on the server&amp;#8217;s log:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;2017-07-26 12:03:19,302 INFO  [io.opentracing.contrib.ejb.demoexample.Endpoint] (default task-2) Request received to place an order
2017-07-26 12:03:19,304 INFO  [io.opentracing.contrib.ejb.demoexample.AccountService] (default task-2) Notifying the account owner about a new order
2017-07-26 12:03:19,307 INFO  [io.opentracing.contrib.ejb.demoexample.OrderService] (default task-2) Placing order
2017-07-26 12:03:19,314 INFO  [io.opentracing.contrib.ejb.demoexample.InventoryService] (EJB default - 1) Changing the inventory
2017-07-26 12:03:19,322 INFO  [io.opentracing.contrib.ejb.demoexample.InventoryNotificationService] (EJB default - 2) Sending an inventory change notification&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, the complete trace with its 6 spans can be seen on Jaeger&amp;#8217;s UI, located at &lt;a href=&quot;http://localhost:16686/search&quot; class=&quot;bare&quot;&gt;http://localhost:16686/search&lt;/a&gt; , if you are using
the Docker command we listed before.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;EJBs are a very important part of Java EE and we expect the OpenTracing EJB framework integration to complement the other Java EE related
integrations, like the Servlet and JAX-RS. In this blog post, we&amp;#8217;ve shown how tracing EJBs can be accomplished by transparently tracing
synchronous stateless EJBs, intercepting span contexts in asynchronous EJBs and by exposing the span context via EJB contexts, as well
as manually starting spans to include specific business logic into the trace.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing: &lt;a href=&quot;http://opentracing.io&quot; class=&quot;bare&quot;&gt;http://opentracing.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing EJB3 instrumentation (with example): &lt;a href=&quot;https://github.com/opentracing-contrib/java-ejb&quot; class=&quot;bare&quot;&gt;https://github.com/opentracing-contrib/java-ejb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jaeger: &lt;a href=&quot;https://github.com/uber/jaeger&quot; class=&quot;bare&quot;&gt;https://github.com/uber/jaeger&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/data/blog/2017/2017-07-28-demo-example-complete.tar.gz&quot;&gt;ZIP file&lt;/a&gt; with the code from this blog post&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Grafana: new query interface</title>
      <link>http://www.hawkular.org/blog/2017/07/grafana-new-query-interface.html</link>
      <author>noreply@hawkular.org (Joel Takvorian)</author>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/07/grafana-new-query-interface.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There have been improvements lately in the Hawkular Grafana datasource that are worth mentioning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The way to query metrics by tags has changed since plugin &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource/releases/tag/v1.0.8&quot;&gt;v1.0.8&lt;/a&gt;.
It now takes advantage of the Hawkular Metrics&apos; tags query language,
that was introduced server-side in &lt;a href=&quot;http://www.hawkular.org/blog/2017/02/08/hawkular-metrics-0.24.0.Final-released.html&quot;&gt;Metrics 0.24.0&lt;/a&gt;
and enhanced in &lt;a href=&quot;http://www.hawkular.org/blog/2017/03/07/hawkular-metrics-0.25.0.Final-released.html&quot;&gt;0.25.0&lt;/a&gt;.
To sum it up, Metrics integrates a parser that allows queries such as:
&lt;code&gt;tag1 = &apos;awesome!&apos; AND tag2 NOT IN [&apos;foo&apos;, &apos;bar&apos;]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The datasource in now able to fetch bucketized metrics stats, instead of raw metrics.
It consists in aggregating datapoints in slices of time (buckets) and providing, for each slice, some statistics like &lt;em&gt;min&lt;/em&gt;, &lt;em&gt;max&lt;/em&gt;, &lt;em&gt;average&lt;/em&gt; and more.
The exact content of a bucket is described in &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-metrics.html#NumericBucketPoint&quot;&gt;Metrics REST API&lt;/a&gt;.
Hawkular has always been able to provide metric stats server-side,
but being able to use them in the Grafana plugin is new, introduced in &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource/releases/tag/v1.0.9&quot;&gt;v1.0.9&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-empty-query.png&quot; alt=&quot;New query interface&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;The new query interface&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_tags_query_language&quot;&gt;Tags query language&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first change is that you don&amp;#8217;t have to choose between &lt;em&gt;query by tag&lt;/em&gt; and &lt;em&gt;query by metric id&lt;/em&gt; anymore, you can do both at the same time.
Querying by tag will refine the available list of metric names (much like a filter) and can result in multiple metrics from a single query.
By selecting a &lt;em&gt;metric name&lt;/em&gt;, you restrict the query to only display that one.
This filtering is really nice when there&amp;#8217;s tons of metrics available, like in the case of
hundreds of OpenShift pods being monitored with the same tenant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simple &lt;em&gt;key/value&lt;/em&gt; pairs interface is now replaced with a more elaborated query builder, following the pattern:
&lt;em&gt;&apos;tag-key&apos;&lt;/em&gt; &lt;em&gt;&apos;operator&apos;&lt;/em&gt; &lt;em&gt;&apos;tag-value(s)&apos;&lt;/em&gt; [&lt;em&gt;&apos;AND/OR&apos;&lt;/em&gt; etc.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following images show a walk-through:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-tag_key.png&quot; alt=&quot;Selecting tag key&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Selecting the tag key&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-tag_operator.png&quot; alt=&quot;Selecting tag operator&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Selecting the tag operator&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-tag_value.png&quot; alt=&quot;Selecting tag value&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Selecting the tag value&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The text fields include dynamic suggestions, you can use Grafana template variables within tag values, or enter free text.
Once you&amp;#8217;ve set up a tag query expression, the relevant metrics immediately show up on the chart and the list of available metrics in the dropdown list in updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-tag-filtering.png&quot; alt=&quot;Filtered metrics&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Filtered metrics&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This query builder lets you build almost any tag query that the Hawkular server understands.
There are however some corner cases. For now this builder doesn&amp;#8217;t allow you to prioritize expressions with parentheses.
For instance, you cannot build &lt;code&gt;c1 = &apos;foo&apos; OR (b1 != &apos;B&apos; AND a1 = &apos;abcd&apos;)&lt;/code&gt;.
As a workaround you can turn off the query builder and directly type in your query expression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-editor-mode.png&quot; alt=&quot;Toggle editor mode&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Toggle editor mode&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will be sent as is to the Hawkular Metrics server.
This will also be useful to fill the gap if the language evolves server-side and this plugin isn&amp;#8217;t updated immediately.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_stats_query&quot;&gt;Stats query&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other important feature is the ability to run &lt;a href=&quot;http://www.hawkular.org/hawkular-metrics/docs/user-guide/#_downsampling&quot;&gt;stats&lt;/a&gt; queries against Hawkular Metrics, instead of &lt;a href=&quot;http://www.hawkular.org/hawkular-metrics/docs/user-guide/#_raw_data&quot;&gt;raw&lt;/a&gt; queries.
There are several reasons to do this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it reduces the network load, and client-side processing load, especially when raw data would contain tons of datapoints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it enables some aggregation methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it also allows higher-level analysis with stats such as percentiles&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable it, just clear the &lt;em&gt;raw&lt;/em&gt; checkbox.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-stats-mode.png&quot; alt=&quot;Toggle stats mode&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Toggle stats mode&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you clear the &lt;em&gt;raw&lt;/em&gt; checkbox, you can configure &lt;em&gt;Multiple series aggregation&lt;/em&gt; to &lt;em&gt;None&lt;/em&gt;, &lt;em&gt;Sum&lt;/em&gt; or &lt;em&gt;Average&lt;/em&gt;
and can configure &lt;em&gt;Stat type&lt;/em&gt; as &lt;em&gt;avg&lt;/em&gt;, &lt;em&gt;min&lt;/em&gt;, &lt;em&gt;max&lt;/em&gt;, &lt;em&gt;median&lt;/em&gt;, &lt;em&gt;sum&lt;/em&gt; and different percentiles.
You can display several different &lt;em&gt;Stat types&lt;/em&gt; within the same query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-stats-none.png&quot; alt=&quot;Stats without aggregation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Stats without aggregation: each two metrics show avg, min and max&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-20-grafana-stats-avg.png&quot; alt=&quot;Stats avg&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Same query with series aggregation: the two metrics are averaged into one, which shows avg, min and max&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the query returns multiple series, use &lt;em&gt;Multiple series aggregation&lt;/em&gt; to define if and how to aggregate them.
&lt;em&gt;None&lt;/em&gt; will show them individually on the chart. But consider for instance the case of an OpenShift pod with many replicas, and you&amp;#8217;re tracking their memory usage.
It may be more relevant here to aggregate all of them, both &lt;em&gt;sum&lt;/em&gt; and &lt;em&gt;average&lt;/em&gt; are meaningful here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Stat type&lt;/em&gt; option refers to an aggregation at a different level: not between multiple metrics, but within a single metric,
all raw datapoints are aggregated within time buckets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These two improvements aim a common goal, that is facilitating querying over large amounts of data. This is becoming crucial especially
in the context of microservices and applications running on container platforms, as the number of metrics explodes.
Proper metrics tagging is the corner stone to make sense of this data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Protecting Jaeger UI with a sidecar security proxy</title>
      <link>http://www.hawkular.org/blog/2017/07/jaeger-with-security-proxy.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/07/jaeger-with-security-proxy.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a production deployment of Jaeger, it may be advantageous to restrict access to Jaeger&amp;#8217;s Query
service, which includes the UI. For instance, you might have internal security requirements to allow
only certain groups to access trace data, or you might have deployed Jaeger into a public cloud.
In a true microservices way, one possible approach is to add a sidecar to the Jaeger Query service,
acting as a security proxy. Incoming requests hit our sidecar instead of reaching Jaeger&amp;#8217;s Query service
directly and the sidecar would be responsible for enforcing the authentication and authorization constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-18-teaser.png&quot; alt=&quot;Jaeger login screen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Incoming HTTP requests arrive at the route ①, which uses the internal service ② to resolve and communicate
with the security proxy ③. Once the request is validated and all security constraints are satisfied, the
request reaches Jaeger ④.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For demonstration purposes we&amp;#8217;ll make use of &lt;a href=&quot;http://keycloak.org&quot;&gt;Keycloak&lt;/a&gt; as our security solution, but
the idea can be adapted to work with any security proxy. This demo should also work without changes with
&lt;a href=&quot;https://access.redhat.com/products/red-hat-single-sign-on&quot;&gt;Red Hat SSO&lt;/a&gt;. For this exercise, we&amp;#8217;ll need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A Keycloak (or Red Hat SSO) server instance running. We&amp;#8217;ll call its location &lt;code&gt;${REDHAT_SSO_URL}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An OpenShift cluster, where we&amp;#8217;ll run Jaeger backend components. It might be as easy as &lt;code&gt;oc cluster up&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A local clone of the &lt;a href=&quot;https://github.com/jaegertracing/jaeger-openshift/blob/master/production/jaeger-production-template.yml&quot;&gt;Jaeger OpenShift Production template&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that we are not trying to secure the communication between the components, like from the Agent to the Collector.
For this scenario, there are other techniques that can be used, such as mutual authentication via certificates, employing
&lt;a href=&quot;https://istio.io/&quot;&gt;istio&lt;/a&gt; or other similar tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_preparing_keycloak&quot;&gt;Preparing Keycloak&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this demo, we&amp;#8217;ll run Keycloak via Docker directly on the host machine. This is to stress that Keycloak
does &lt;strong&gt;not&lt;/strong&gt; need to be running on the same OpenShift cluster as our Jaeger backend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following command should start an appropriate Keycloak server locally. If you already have your
own Keycloak or Red Hat SSO server, skip this step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --rm --name keycloak-server -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=password -p 8080:8080 jboss/keycloak&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the Keycloak server is up and running, let&amp;#8217;s create a realm for Jaeger:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Login into Keycloak (&lt;a href=&quot;http://&amp;lt;YOUR_IP&amp;gt;:8080/auth/admin/master/console&quot; class=&quot;bare&quot;&gt;http://&amp;lt;YOUR_IP&amp;gt;:8080/auth/admin/master/console&lt;/a&gt;) with &lt;code&gt;admin&lt;/code&gt; as username and &lt;code&gt;password&lt;/code&gt; as password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the top left corner, mouse over the &lt;code&gt;Select realm&lt;/code&gt; box and click &lt;code&gt;Add realm&lt;/code&gt;. Name it &lt;code&gt;jaeger&lt;/code&gt; and click &lt;code&gt;Create&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On &lt;code&gt;Clients&lt;/code&gt;, click &lt;code&gt;Create&lt;/code&gt; and set &lt;code&gt;proxy-jaeger&lt;/code&gt; as the name and save it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;Access Type&lt;/code&gt; to &lt;code&gt;confidential&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; as &lt;code&gt;Valid Redirect URIs&lt;/code&gt; and save it. You might want to fine tune this in a
production environment, otherwise you might be open to an attack known as
&lt;a href=&quot;https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet&quot;&gt;&quot;Unvalidated Redirects and Forwards&quot;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;Installation&lt;/code&gt; tab and select &lt;code&gt;Keycloak OIDC JSON&lt;/code&gt; and copy the JSON that is shown. It should look like this,
but the &lt;code&gt;auth-server-url&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt; will have different values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;realm&quot;: &quot;jaeger&quot;,
  &quot;auth-server-url&quot;: &quot;http://192.168.2.111:8080/auth&quot;,
  &quot;ssl-required&quot;: &quot;external&quot;,
  &quot;resource&quot;: &quot;proxy-jaeger&quot;,
  &quot;credentials&quot;: {
    &quot;secret&quot;: &quot;7f201319-1dfd-43cc-9838-057dac439046&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, let&amp;#8217;s create a role and a user, so that we can log into Jaeger&amp;#8217;s Query service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Under the &lt;code&gt;Configure&lt;/code&gt; left-side menu, open the &lt;code&gt;Roles&lt;/code&gt; page and click &lt;code&gt;Add role&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As role name, set &lt;code&gt;user&lt;/code&gt; and click &lt;code&gt;Save&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under the &lt;code&gt;Manage&lt;/code&gt; left-side menu, open the &lt;code&gt;Users&lt;/code&gt; page and click &lt;code&gt;Add user&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fill out the form as you wish and set &lt;code&gt;Email verified&lt;/code&gt; to &lt;code&gt;ON&lt;/code&gt; and click on &lt;code&gt;Save&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;Credentials&lt;/code&gt; tab for this user and set a password (temporary or not).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;Role mappings&lt;/code&gt; tab for this user, select the role &lt;code&gt;user&lt;/code&gt; from the &lt;code&gt;Available Roles&lt;/code&gt; list and click &lt;code&gt;Add selected&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_preparing_openshift&quot;&gt;Preparing OpenShift&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this demo, we assume you have an OpenShift cluster running already. If you don&amp;#8217;t, then you might want to check out tools
like &lt;a href=&quot;https://github.com/minishift/minishift&quot;&gt;&lt;code&gt;minishift&lt;/code&gt;&lt;/a&gt;. If you are running a recent version of Fedora, CentOS or
Red Hat Enterprise Linux you might want to install the package &lt;code&gt;origin-clients&lt;/code&gt; and run &lt;code&gt;oc cluster up --version=latest&lt;/code&gt;.
This should get you a basic OpenShift cluster running locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make it easier for our demonstration, we&amp;#8217;ll add &lt;code&gt;cluster-admin&lt;/code&gt; rights to our &lt;code&gt;developer&lt;/code&gt; user and we&amp;#8217;ll create
the Jaeger namespace:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc login -u system:admin
oc new-project jaeger
oc adm policy add-cluster-role-to-user cluster-admin developer -n jaeger
oc login -u developer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_preparing_the_jaeger_openshift_template&quot;&gt;Preparing the Jaeger OpenShift template&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll use the &lt;a href=&quot;https://github.com/jaegertracing/jaeger-openshift/blob/master/production/jaeger-production-template.yml&quot;&gt;Jaeger OpenShift Production template&lt;/a&gt;
as the starting point: either clone the entire repository, or just get a local version of the template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is to add the sidecar container to the &lt;code&gt;query-deployment&lt;/code&gt; object. Under the &lt;code&gt;containers&lt;/code&gt; list, after we
specify the &lt;code&gt;jaeger-query&lt;/code&gt;, let&amp;#8217;s add the sidecar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;        - image: jboss/keycloak-proxy
          name: ${JAEGER_SERVICE_NAME}-query-security-proxy
          volumeMounts:
          - mountPath: /opt/jboss/conf
            name: security-proxy-configuration-volume
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            httpGet:
              path: &quot;/&quot;
              port: 8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that container specifies a &lt;code&gt;volumeMount&lt;/code&gt; named &lt;code&gt;security-proxy-configuration-volume&lt;/code&gt;: we&amp;#8217;ll use it to store the
proxy&amp;#8217;s configuration file. You should add the volume under the &lt;code&gt;spec/template/spec&lt;/code&gt; node for &lt;code&gt;query-deployment&lt;/code&gt;, sibling to
the &lt;code&gt;dnsPolicy&lt;/code&gt; property (it&amp;#8217;s probably right under the previous code snippet):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;        volumes:
          - configMap:
              name: ${JAEGER_SERVICE_NAME}-configuration
              items:
                - key: proxy
                  path: proxy.json
            name: security-proxy-configuration-volume&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we need to specify the &lt;code&gt;ConfigMap&lt;/code&gt;, with the proxy&amp;#8217;s configuration entry. To do that, we add a new top-level item to
the template. As a suggestion, we recommend keeping it close to where it&amp;#8217;s consumed. For instance, right before the &lt;code&gt;query-deployment&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${JAEGER_SERVICE_NAME}-configuration
    labels:
      app: jaeger
      jaeger-infra: security-proxy-configuration
  data:
    proxy: |
      {
          &quot;target-url&quot;: &quot;http://localhost:16686&quot;,
          &quot;bind-address&quot;: &quot;0.0.0.0&quot;,
          &quot;http-port&quot;: &quot;8080&quot;,
          &quot;applications&quot;: [
              {
                  &quot;base-path&quot;: &quot;/&quot;,
                  &quot;adapter-config&quot;: {
                    &quot;realm&quot;: &quot;jaeger&quot;,
                    &quot;auth-server-url&quot;: &quot;${REDHAT_SSO_URL}&quot;,
                    &quot;ssl-required&quot;: &quot;external&quot;,
                    &quot;resource&quot;: &quot;proxy-jaeger&quot;,
                    &quot;credentials&quot;: {
                      &quot;secret&quot;: &quot;THE-SECRET-FROM-INSTALLATION-FILE&quot;
                    }
                  }
            ,
            &quot;constraints&quot;: [
                      {
                          &quot;pattern&quot;: &quot;/*&quot;,
                          &quot;roles-allowed&quot;: [
                              &quot;user&quot;
                          ]
                      }
                  ]
              }
          ]
      }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that we are only allowing users with the role &lt;code&gt;user&lt;/code&gt; to log into our Jaeger UI. In a real world scenario, you might
want to adjust this to fit your setup. For instance, your user data might come from LDAP, and you only want to allow users
from specific LDAP groups to access the Jaeger UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;secret&lt;/code&gt; within the &lt;code&gt;credentials&lt;/code&gt; should match the secret we got from Keycloak at the beginning of this exercise. Our
most curious readers will note that we mentioned the template parameter &lt;code&gt;REDHAT_SSO_URL&lt;/code&gt; under the property &lt;code&gt;auth-server-url&lt;/code&gt;.
Either change that to your Keycloak server, or let&amp;#8217;s specify a template parameter, allowing us to set this at deployment time.
Under the &lt;code&gt;parameters&lt;/code&gt; section of the template, add the following property:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;- description: The URL to the Red Hat SSO / Keycloak server
  displayName: Red Hat SSO URL
  name: REDHAT_SSO_URL
  required: true
  value: http://THE-URL-FROM-THE-INSTALLATION-FILE:8080/auth&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This value should be a location that is reacheable by both your browser and by the sidecar, like your host&amp;#8217;s LAN IP (192.x, 10.x).
Localhost/127.x is not going to work.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a final step, we need to change the service to direct requests to the port &lt;code&gt;8080&lt;/code&gt; (proxy) instead of &lt;code&gt;16686&lt;/code&gt;. This is done
by changing the property &lt;code&gt;targetPort&lt;/code&gt; on the service named &lt;code&gt;query-service&lt;/code&gt;, setting it to &lt;code&gt;8080&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;- apiVersion: v1
  kind: Service
  metadata:
    name: ${JAEGER_SERVICE_NAME}-query
    labels:
      app: jaeger
      jaeger-infra: query-service
  spec:
    ports:
    - name: jaeger-query
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      jaeger-infra: query-pod
    type: LoadBalancer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a reference, here&amp;#8217;s the &lt;a href=&quot;https://github.com/jaegertracing/jaeger-openshift/blob/KeycloakSecuringUI/production/jaeger-production-template.yml&quot;&gt;complete template file&lt;/a&gt;
that can be used for this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploying&quot;&gt;Deploying&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have everything ready, let&amp;#8217;s deploy Jaeger into our OpenShift cluster. Run the following command from the same
directory you stored the &lt;code&gt;YAML&lt;/code&gt; file from the previous steps, referenced here by the name &lt;code&gt;jaeger-production-template.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc process -f jaeger-production-template.yml | oc create -n jaeger -f -&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the first couple of minutes, it&amp;#8217;s OK if the pods &lt;code&gt;jaeger-query&lt;/code&gt; and &lt;code&gt;jaeger-collector&lt;/code&gt; fail, as Cassandra will still
be booting. Eventually, the service should be up and running, as shown in the following image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-07-18-pod.png&quot; alt=&quot;Pod with sidecar on OpenShift&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once it is ready to serve requests, click on URL for the route (&lt;a href=&quot;https://jaeger-query-jaeger.127.0.0.1.nip.io&quot; class=&quot;bare&quot;&gt;https://jaeger-query-jaeger.127.0.0.1.nip.io&lt;/a&gt;). You should be
presented with a login screen, served by the Keycloak server. Login with the credentials you set on the previous steps, and you
should reach the regular Jaeger UI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this exercise, we&amp;#8217;ve seen how to add a security proxy to our Jaeger Query pod as a sidecar. All incoming requests go through
this sidecar and all features available in Keycloak can be used transparently, such as 2-Factor authentication, service accounts,
single sign-on, brute force attack protection, LDAP support and much more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>OpenTracing JAX-RS Instrumentation</title>
      <link>http://www.hawkular.org/blog/2017/07/opentracing-jaxrs.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/07/opentracing-jaxrs.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous &lt;a href=&quot;http://www.hawkular.org/blog/2017/06/9/opentracing-spring-boot.html&quot;&gt;demo&lt;/a&gt;
we have demonstrated how to instrument a Spring Boot app
using &lt;a href=&quot;http://opentracing.io&quot;&gt;OpenTracing&lt;/a&gt;, a vendor-neutral standard for distributed tracing.
In this article we are going to instrument a Java API for RESTful Web Services (JAX-RS), and show
you how to trace the business layer and add custom data to the trace.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo_application&quot;&gt;Demo application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Creating a JAX-RS app from scratch can be a time consuming task, therefore in this case we are going to use
Wildfly Swarm&amp;#8217;s &lt;a href=&quot;http://wildfly-swarm.io/generator/&quot;&gt;app generator&lt;/a&gt;.
Select JAX-RS and CDI dependencies and hit generate button.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/wf-swarm-generator.png&quot; alt=&quot;wf swarm generator&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Wildfly Swarm generator.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The generated application contains one REST endpoint which returns hello world string.
This endpoint is accessible on &lt;code&gt;&lt;a href=&quot;http://localhost:8080/hello&quot; class=&quot;bare&quot;&gt;http://localhost:8080/hello&lt;/a&gt;&lt;/code&gt;.
In the next step we are going to add instrumentation and simple business logic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_instrumentation&quot;&gt;Instrumentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding OpenTracing instrumentation to JAX-RS is very simple, just include the following dependency in
the classpath and the tracing feature will be automatically registered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.opentracing.contrib&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;opentracing-jaxrs2&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenTracing is just an API, therefore it is required to register a specific tracer instance. In this demo
we are going to use &lt;a href=&quot;https://github.com/uber/jaeger&quot;&gt;Jaeger tracing system&lt;/a&gt;. The tracer should be created
and initialized only once per process, hence &lt;code&gt;ServletContextListener&lt;/code&gt; is the ideal place for this task:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@WebListener
public class TracingContextListener implements ServletContextListener {

  @Inject
  private io.opentracing.Tracer tracer;

  @Override
  public void contextInitialized(ServletContextEvent sce) {
    GlobalTracer.register(tracer);
  }

  @Override
  public void contextDestroyed(ServletContextEvent sce) {}

  @Produces
  @Singleton
  public static io.opentracing.Tracer jaegerTracer() {
    return new Configuration(&quot;wildfly-swarm&quot;, new Configuration.SamplerConfiguration(
        ProbabilisticSampler.TYPE, 1),
        new Configuration.ReporterConfiguration())
        .getTracer();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tracer initialization code requires to specify app name, which is in this case &lt;code&gt;wildfly-swarm&lt;/code&gt; and
sampler configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that we are suing Java&amp;#8217;s Context and Dependency Injection (CDI) to share a tracer instance in our app.
If we forget to register a specific tracer instance, then the tracing feature would use &lt;code&gt;NoopTracer&lt;/code&gt;.
Now we can verify tracing by starting Jaeger server using the following command:
&lt;code&gt;docker run --rm -it --network=host jaegertracing/all-in-one&lt;/code&gt; and accessing the endpoint at
&lt;code&gt;&lt;a href=&quot;http://localhost:8080/hello&quot; class=&quot;bare&quot;&gt;http://localhost:8080/hello&lt;/a&gt;&lt;/code&gt;. Our trace with one span should be present in the UI at
&lt;code&gt;&lt;a href=&quot;http://localhost:16686&quot; class=&quot;bare&quot;&gt;http://localhost:16686&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_instrumenting_business_logic&quot;&gt;Instrumenting business logic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JAX-RS instrumentation provides nice visibility into your app, however, it is often
necessary to add custom data to the trace to see what is happening in the service or database layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following code snippet shows how the service layer can create and add data to the trace:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class BackendService {

  @Inject
  private io.opentracing.Tracer tracer;

  public String action() throws InterruptedException {
    int random = new Random().nextInt(200);

    try (ActiveSpan span = tracer.buildSpan(&quot;action&quot;).startActive()) {
      anotherAction();
      Thread.sleep(random);
    }

    return String.valueOf(random);
  }

  private void anotherAction() {
    tracer.activeSpan().setTag(&quot;anotherAction&quot;, &quot;data&quot;);
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that it&amp;#8217;s not necessary to manually pass a span instance around. The method &lt;code&gt;anotherAction&lt;/code&gt; accesses
the current active span from the tracer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the additional instrumentation shown above, an invocation of the REST endpoint would result in
a trace consisting of two spans, one representing the inbound server request, and the other the business logic.
The span representing server processing is automatically considered as the parent for span created in business layer.
If we created span in &lt;code&gt;anotherAction&lt;/code&gt; then its parent would be span created in &lt;code&gt;action&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/swarm-jaeger.png&quot; alt=&quot;swarm jaeger&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Jaeger showing reported spans.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_video&quot;&gt;Video&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/gVwLenPH8SY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have demonstrated that instrumenting a JAX-RS app is just a matter of adding a dependency
and registering a tracer instance. If we would like to use a different OpenTracing implementation,
Zipkin for instance, it would just require changing tracer producer code. No changes to the application or
business logic! In the next demo we will wire this app with Spring Boot created
in previous demo and deploy them on Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing: &lt;a href=&quot;http://opentracing.io&quot; class=&quot;bare&quot;&gt;http://opentracing.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github repository with demo: &lt;a href=&quot;https://github.com/pavolloffay/opentracing-java-examples&quot; class=&quot;bare&quot;&gt;https://github.com/pavolloffay/opentracing-java-examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing JAX-RS instrumentation: &lt;a href=&quot;https://github.com/opentracing-contrib/java-jaxrs&quot; class=&quot;bare&quot;&gt;https://github.com/opentracing-contrib/java-jaxrs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jaeger: &lt;a href=&quot;https://github.com/uber/jaeger&quot; class=&quot;bare&quot;&gt;https://github.com/uber/jaeger&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Using OpenTracing to collect Application Metrics in Kubernetes</title>
      <link>http://www.hawkular.org/blog/2017/06/26/opentracing-appmetrics.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/06/26/opentracing-appmetrics.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article will show how &lt;a href=&quot;http://opentracing.io/&quot;&gt;OpenTracing&lt;/a&gt; instrumentation can be used to
collect Application Metrics, in addition to (but independent from) reported tracing data, from services
deployed within &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;. These Application Metrics can then be displayed in
your monitoring dashboard and used to trigger alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-06-26-grafana-error-ratio.png&quot; alt=&quot;2017 06 26 grafana error ratio&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_example_application&quot;&gt;The example application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a recent article we showed how a Spring Boot application could easily be
&lt;a href=&quot;http://www.hawkular.org/blog/2017/06/9/opentracing-spring-boot.html&quot;&gt;instrumented using OpenTracing&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example&quot;&gt;example&lt;/a&gt; we are going to use in
this article uses the same approach to create two services, &lt;em&gt;ordermgr&lt;/em&gt; and &lt;em&gt;accountmgr&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;accountmgr&lt;/em&gt; presents a single REST endpoint (&lt;code&gt;/getAccount&lt;/code&gt;) for internal use by &lt;em&gt;ordermgr&lt;/em&gt;. The code for this endpoint
is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Account Managers&amp;#8217;s Controller:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;    @RequestMapping(&quot;/account&quot;)
    public String getAccount() throws InterruptedException {
        Thread.sleep(1 + (long)(Math.random()*500)); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        if (Math.random() &amp;gt; 0.8) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            throw new RuntimeException(&quot;Failed to find account&quot;);
        }
        return &quot;Account details&quot;;
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This line simply introduces a random delay, to make the collected metrics more interesting.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;These three lines randomly cause an exception which will result in the span (associated with the REST
endpoint invocation) being tagged as an error with associated log events identifying the error details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;ordermgr&lt;/em&gt; presents three REST endpoints for use by an end user. These are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Order Manager&amp;#8217;s Controller:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;    @Autowired
    private io.opentracing.Tracer tracer; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @RequestMapping(&quot;/buy&quot;)
    public String buy() throws InterruptedException {
        Thread.sleep(1 + (long)(Math.random()*500)); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        tracer.activeSpan().setBaggageItem(&quot;transaction&quot;, &quot;buy&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(accountMgrUrl + &quot;/account&quot;, String.class);
        return &quot;BUY + &quot; + response.getBody();
    }

    @RequestMapping(&quot;/sell&quot;)
    public String sell() throws InterruptedException {
        Thread.sleep(1 + (long)(Math.random()*500)); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        tracer.activeSpan().setBaggageItem(&quot;transaction&quot;, &quot;sell&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(accountMgrUrl + &quot;/account&quot;, String.class);
        return &quot;SELL + &quot; + response.getBody();
    }

    @RequestMapping(&quot;/fail&quot;)
    public String fail() throws InterruptedException {
        Thread.sleep(1 + (long)(Math.random()*500)); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(accountMgrUrl + &quot;/missing&quot;, String.class); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        return &quot;FAIL + &quot; + response.getBody();
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The service injects the OpenTracing &lt;code&gt;Tracer&lt;/code&gt; to enable access to the active span.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;All three methods introduce a random delay.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;buy&lt;/code&gt; and &lt;code&gt;sell&lt;/code&gt; methods additionally set a baggage item &lt;code&gt;transaction&lt;/code&gt; with the name of the business
transaction being performed (i.e. buy or sell). For those not familiar with OpenTracing, the
&lt;a href=&quot;https://github.com/opentracing/specification/blob/master/specification.md#set-a-baggage-item&quot;&gt;baggage concept&lt;/a&gt;
allows information to be carried &lt;em&gt;in band&lt;/em&gt; with the trace context between invoked services. We will show
you how a baggage item can be used to isolate the metrics relevant only for a particular business transaction.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Invoking a non-existent endpoint on &lt;em&gt;accountmgr&lt;/em&gt; will lead to an error being reported in the trace and
metric
data.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_adding_metrics_reporting_to_the_opentracing_instrumentation&quot;&gt;Adding Metrics Reporting to the OpenTracing instrumentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenTracing API defines the concept of a &lt;em&gt;Span&lt;/em&gt; which represents a unit of work performed by a service,
e.g. to receive a service invocation, perform some internal task (e.g. accessing a database) or
invoking an external service. They provide an ideal basis upon which to report metrics
(count and duration) regarding these points within a service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore a new &lt;a href=&quot;https://github.com/opentracing-contrib/java-metrics&quot;&gt;OpenTracing contrib project&lt;/a&gt; has
been established (initially just for Java) to intercept
the finished spans, and create the relevant metrics. These metrics are then submitted to a &lt;em&gt;MetricsReporter&lt;/em&gt;
for recording - the initial implementation of this interface being for &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is to expose an endpoint for collecting the Prometheus metrics. Each service has the following
configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Configuration
@ConditionalOnClass(CollectorRegistry.class)
public class PrometheusConfiguration {

     @Bean
     @ConditionalOnMissingBean
     CollectorRegistry metricRegistry() {
         return CollectorRegistry.defaultRegistry;
     }

     @Bean
     ServletRegistrationBean registerPrometheusExporterServlet(CollectorRegistry metricRegistry) {
           return new ServletRegistrationBean(new MetricsServlet(metricRegistry), &quot;/metrics&quot;);
     }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will allow the Prometheus metrics to be obtained from the service&amp;#8217;s &lt;code&gt;/metrics&lt;/code&gt; REST endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each service then requires a configuration to obtain the &lt;code&gt;io.opentracing.Tracer&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Configuration
public class TracerConfiguration implements javax.servlet.ServletContextListener {

	@Bean
	public io.opentracing.Tracer tracer() {
		return io.opentracing.contrib.metrics.Metrics.decorate(
			io.opentracing.contrib.tracerresolver.TracerResolver.resolveTracer(),
			PrometheusMetricsReporter.newMetricsReporter()
				.withBaggageLabel(&quot;transaction&quot;,&quot;n/a&quot;)
				.build());
	}

	@Override
	public void contextInitialized(javax.servlet.ServletContextEvent sce) {
		sce.getServletContext().setAttribute(io.opentracing.contrib.web.servlet.filter.TracingFilter.SKIP_PATTERN, Pattern.compile(&quot;/metrics&quot;));
	}

	...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first method uses the
&lt;a href=&quot;https://github.com/opentracing-contrib/java-tracerresolver&quot;&gt;TracerResolver&lt;/a&gt; to provide a vendor
neutral approach for accessing a &lt;code&gt;Tracer&lt;/code&gt;. This tracer is then enhanced with the metrics capability
using a &lt;code&gt;PrometheusMetricsReporter&lt;/code&gt;. This metrics reporter is further configured to add a special
label related to the baggage key &lt;code&gt;transaction&lt;/code&gt; (discussed later).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the Servlet OpenTracing integration will trace all REST endpoints. Therefore in the
second method above we add an attribute that will inform the instrumentation to ignore the &lt;code&gt;/metrics&lt;/code&gt;
endpoint. Otherwise we will have tracing data reported each time Prometheus reads the metrics for the
service.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_deploying_on_kubernetes&quot;&gt;Deploying on Kubernetes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The steps to set up an environment on Kubernetes is discussed in the
&lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example&quot;&gt;example codebase&lt;/a&gt;. A summary of the steps is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start &lt;a href=&quot;https://kubernetes.io/docs/getting-started-guides/minikube&quot;&gt;minikube&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;minikube start
minikube dashboard&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy Prometheus - using the &lt;a href=&quot;https://github.com/coreos/prometheus-operator&quot;&gt;Prometheus Operator&lt;/a&gt; project to
capture metrics from the services&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;kubectl create -f https://raw.githubusercontent.com/coreos/prometheus-operator/master/bundle.yaml

# Wait until pods are green, then add configuration to locate service monitors based on label &quot;team: frontend&quot;:
kubectl create -f https://raw.githubusercontent.com/objectiser/opentracing-prometheus-example/master/prometheus-kubernetes.yml

# Wait until these pods are green, then get the URL from the following command and open in browser:
minikube service prometheus --url&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy &lt;a href=&quot;https://github.com/uber/jaeger&quot;&gt;Jaeger&lt;/a&gt; - an OpenTracing compatible tracing system&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;kubectl create -f https://raw.githubusercontent.com/jaegertracing/jaeger-kubernetes/master/all-in-one/jaeger-all-in-one-template.yml

# Once pods are green, then get the Jaeger dashboard URL from the following command and open in a browser
minikube service jaeger-query --url&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For this article, we also &lt;a href=&quot;https://github.com/kubernetes/charts/tree/master/stable/grafana&quot;&gt;deployed Grafana&lt;/a&gt;
to display the metrics, although the Prometheus dashboard could be used. Once Grafana is installed:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Obtain the Prometheus server URL using &lt;code&gt;minikube service prometheus --url&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure a new Datasource named &lt;em&gt;Prometheus&lt;/em&gt; of type &lt;code&gt;Prometheus&lt;/code&gt; and specify the URL obtained from the previous command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the example dashboard using the following command and import it into Grafana&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/objectiser/opentracing-prometheus-example/master/simple/GrafanaDashboard.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once they are all running, then the simple example with the two services can be deployed. For this you will need to
clone the &lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example&quot;&gt;example code repo&lt;/a&gt;, and follow
&lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example/blob/master/simple/README.md&quot;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this stage the Kubernetes dashboard would look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-06-26-kubernetes-dashboard.png&quot; alt=&quot;2017 06 26 kubernetes dashboard&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Kubernetes dashboard&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example code includes a script that loops, randomly invoking the three REST endpoints provided by
&lt;em&gt;ordermgr&lt;/em&gt;. Once some example requests have been created, you can view the tracing dashboard:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-06-26-traces.png&quot; alt=&quot;2017 06 26 traces&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2: Jaeger tracing dashboard&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can select a specific trace instance and see further details:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-06-26-trace.png&quot; alt=&quot;2017 06 26 trace&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3: Jaeger trace instance view&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shows that the trace instance has three spans, the first representing the receipt of the &lt;code&gt;/buy&lt;/code&gt; request on
&lt;em&gt;ordermgr&lt;/em&gt;, the second where &lt;em&gt;ordermgr&lt;/em&gt; is invoking &lt;em&gt;accountmgr&lt;/em&gt;, and finally the &lt;em&gt;accountmgr&lt;/em&gt; receiving the
&lt;code&gt;/hello&lt;/code&gt; request. In this particular trace instance, the &lt;em&gt;accountmgr&lt;/em&gt; invocation has reported an error, indicated
by the &lt;code&gt;error=true&lt;/code&gt; tag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we will look at the Grafana dashboard to see what metrics have been reported from the OpenTracing
instrumentation within the two services:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-06-26-grafana-dashboard.png&quot; alt=&quot;2017 06 26 grafana dashboard&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4: Grafana dashboard&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This dashboard includes three graphs, the first showing the number of spans created (i.e. span count) by
our &lt;code&gt;sell()&lt;/code&gt; method, and we can use it to track how many times this business operation has been executed.
The second showing the average duration of the spans, and third showing the ratio between successful and
erronous spans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metrics reported by Prometheus are based on a range of labels - a metric exists for each unique combination
of those labels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The standard labels included with the OpenTracing java-metrics project are: &lt;code&gt;operation&lt;/code&gt;, &lt;code&gt;span.kind&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this particular example, we also included the &lt;code&gt;transaction&lt;/code&gt; label.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However when the services are deployed to Kubernetes, the following additional labels are included for free: &lt;code&gt;pod&lt;/code&gt;,
&lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, &lt;code&gt;job&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our example Prometheus queries, we have ignored most of the Kubernetes added labels (except &lt;code&gt;service&lt;/code&gt;) so that
the metrics are aggregated across the specific pods, namespaces, etc. However, having these labels available means
it is possible to segment the metrics in whatever way is required to analyse the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using the &lt;code&gt;java-metrics&lt;/code&gt; project outside of Kubernetes, it is still possible to include the &lt;code&gt;service&lt;/code&gt;
label, however you would configure this when setting up the tracer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can also filter the data, to focus on specific areas of interest:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-06-26-grafana-txn-service.png&quot; alt=&quot;2017 06 26 grafana txn service&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5: Customized Grafana graph focusing on metrics for transaction &apos;sell&apos; and service &apos;accountmgr&apos;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this image we have filtered the metrics based on the &lt;code&gt;transaction=&apos;sell&apos;&lt;/code&gt; and &lt;code&gt;service=&apos;accountmgr&apos;&lt;/code&gt;. This is
where using the metric label based on the baggage item &lt;code&gt;transaction&lt;/code&gt; can be useful, to understand the
usage of a particular shared service by a business transaction. With further work it would be possible
to show the distribution of requests for a service across the various business transactions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_video&quot;&gt;Video&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/UAxuo3CWmRE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article has shown how a service can be instrumented once (using OpenTracing) and generate both
tracing and application metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When deployed to a Kubernetes environment, the metrics also benefit from an additional set of labels automatically
added by the infrastructure, describing the service, pod, namespace, etc. This makes it easy to isolate
specific metrics of interest, or view high level aggregated metrics to gain an overview of your
applications performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing: &lt;a href=&quot;http://opentracing.io&quot; class=&quot;bare&quot;&gt;http://opentracing.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github repository with demo: &lt;a href=&quot;https://github.com/objectiser/opentracing-prometheus-example&quot; class=&quot;bare&quot;&gt;https://github.com/objectiser/opentracing-prometheus-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing java metrics: &lt;a href=&quot;https://github.com/opentracing-contrib/java-metrics&quot; class=&quot;bare&quot;&gt;https://github.com/opentracing-contrib/java-metrics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes: &lt;a href=&quot;https://kubernetes.io&quot; class=&quot;bare&quot;&gt;https://kubernetes.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jaeger: &lt;a href=&quot;https://github.com/uber/jaeger&quot; class=&quot;bare&quot;&gt;https://github.com/uber/jaeger&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prometheus: &lt;a href=&quot;https://prometheus.io&quot; class=&quot;bare&quot;&gt;https://prometheus.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>OpenTracing Spring Boot Instrumentation</title>
      <link>http://www.hawkular.org/blog/2017/06/9/opentracing-spring-boot.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/06/9/opentracing-spring-boot.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo series we are going to look at how simple it is to instrument various Java frameworks using
&lt;a href=&quot;http://opentracing.io&quot;&gt;OpenTracing&lt;/a&gt;. You will see that it requires minimal changes to the
application code. In the last demo we will have microservice apps deployed on Kubernetes and
all services will be traced with an OpenTracing compliant tracing system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this first demo we are going to develop and trace a simple Spring Boot app.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_create_a_web_application&quot;&gt;Create a web application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First let&amp;#8217;s write a simple web app. Or better, let&amp;#8217;s generate it! All we have to do is just to select a web dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/spring-initializr.png&quot; alt=&quot;spring initializr&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Spring boot generator.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the application is generated, but it does not contain any web controller. We are going to implement a simple
controller with two methods. One will return a greeting and the other creates HTTP request which calls
hello endpoint. This demonstrates simple request chaining between services. Do not worry all the code is
on &lt;a href=&quot;https://github.com/pavolloffay/opentracing-java-examples&quot;&gt;GitHub&lt;/a&gt;. At the bottom of this article you will
find all necessary links.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Hello Controller:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@RestController
public class HelloController {

    @Autowired
    private RestTemplate restTemplate;

    @RequestMapping(&quot;/hello&quot;)
    public String hello() {
        return &quot;Hello from Spring Boot!&quot;;
    }

    @RequestMapping(&quot;/chaining&quot;)
    public String chaining() {
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(&quot;http://localhost:8080/hello&quot;, String.class);
        return &quot;Chaining + &quot; + response.getBody();
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the application can serve requests for URLs &lt;code&gt;&lt;a href=&quot;http://localhost:8080/hello&quot; class=&quot;bare&quot;&gt;http://localhost:8080/hello&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://localhost:8080/chaining&quot; class=&quot;bare&quot;&gt;http://localhost:8080/chaining&lt;/a&gt;&lt;/code&gt;.
The app is still not instrumented, we won&amp;#8217;t see any data coming to a tracing system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_instrumentation&quot;&gt;Instrumentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instrumentation with OpenTracing integrations is very simple. For Spring Boot there is
an auto-configuration which instruments all REST controllers and &lt;code&gt;RestTemplate&lt;/code&gt; beans. Just add the following
dependency to the classpath:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.opentracing.contrib&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;opentracing-spring-web-autoconfigure&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This dependency requires only one thing and that is a tracer bean which will be used to report data to the chosen
tracing system. If we don&amp;#8217;t specify this bean auto-configuration will choose &lt;code&gt;NoopTracer&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because we are using OpenTracing instrumentation we are not bound to any specific tracing system.
We will now show how to first use Jaeger and then switch to Zipkin. We will see that changing the tracing system is just
a matter of configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we mentioned the only tracing configuration needed here is to provide a tracer bean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jaeger&quot;&gt;Jaeger&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a Jaeger tracer is very simple. It just requires a sampler configuration and because it is a demo we are going
to sample all requests. Note that we are not specifying the URL to Jaeger server. By default it will assume that it
runs on localhost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Bean
public io.opentracing.Tracer jaegerTracer() {
    return new Configuration(&quot;spring-boot&quot;, new Configuration.SamplerConfiguration(ProbabilisticSampler.TYPE, 1),
        new Configuration.ReporterConfiguration())
        .getTracer();&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can start the Jaeger server using &lt;code&gt;docker run --rm -it --network=host jaegertracing/all-in-one&lt;/code&gt;, compile and
run our app. When everything is up and running generate some requests to URL&amp;#8217;s defined in the previous section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open the Jaeger UI on &lt;code&gt;&lt;a href=&quot;http://localhost:16686&quot; class=&quot;bare&quot;&gt;http://localhost:16686&lt;/a&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/boot-jaeger-traces.png&quot; alt=&quot;boot jaeger traces&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Jaeger showing reported traces.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the picture we can see traces for the request to the &lt;code&gt;/chaining&lt;/code&gt; endpoint. There are three spans: one representing
server processing of &lt;code&gt;/chaining&lt;/code&gt;, the second a client request to &lt;code&gt;/hello&lt;/code&gt; and the third server processing of &lt;code&gt;/hello&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_zipkin&quot;&gt;Zipkin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s benefit from OpenTracing and switch tracing system with O(1) effort. To do that we just need to
provide an instance of Zipkin tracer bean. Do not forget to comment out the Jaeger tracer bean, otherwise instrumentation
would not know which tracer to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zipkin configuration is very similar it just requires to know Zipkin URL:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Bean
public io.opentracing.Tracer zipkinTracer() {
    OkHttpSender okHttpSender = OkHttpSender.create(&quot;http://localhost:9411/api/v1/spans&quot;);
    AsyncReporter&amp;lt;Span&amp;gt; reporter = AsyncReporter.builder(okHttpSender).build();
    Tracing braveTracer = Tracing.newBuilder().localServiceName(&quot;spring-boot&quot;).reporter(reporter).build();
    return BraveTracer.create(braveTracer);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zipkin server can be started with &lt;code&gt;docker run --rm -it -p 9411:9411 openzipkin/zipkin&lt;/code&gt;. Now we have to rebuild and
start our demo app and generate requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/boot-zipkin-traces.png&quot; alt=&quot;boot zipkin traces&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Zipkin showing reported traces.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This screenshot also show traces for invocation of &lt;code&gt;/chaining&lt;/code&gt; endpoint. In this case it shows only two spans because Zipkin
uses a shared span model which means that client and server invocation of &lt;code&gt;/hello&lt;/code&gt; uses the same span.
This is a great example that shows how different OpenTracing providers might model and show things differently.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_video&quot;&gt;Video&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/RvCcWltMY7U?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have seen how simple it is to instrument Spring Boot with OpenTracing. This instrumentation leverages all
key OpenTracing &lt;a href=&quot;http://opentracing.io/documentation/#why-opentracing&quot;&gt;benefits&lt;/a&gt; like: vendor-neutrality,
O(1) change of tracing system or wiring different instrumentations together. In the next blog post we will look at JAX-RS instrumentation and in the
last demo all applications will be deployed on Kubernetes and traced using Jaeger&amp;#8217;s production deployment with Cassandra cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing: &lt;a href=&quot;http://opentracing.io&quot; class=&quot;bare&quot;&gt;http://opentracing.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github repository with demo: &lt;a href=&quot;https://github.com/pavolloffay/opentracing-java-examples&quot; class=&quot;bare&quot;&gt;https://github.com/pavolloffay/opentracing-java-examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing Spring Boot instrumentation: &lt;a href=&quot;https://github.com/opentracing-contrib/java-spring-web&quot; class=&quot;bare&quot;&gt;https://github.com/opentracing-contrib/java-spring-web&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jaeger: &lt;a href=&quot;https://github.com/uber/jaeger&quot; class=&quot;bare&quot;&gt;https://github.com/uber/jaeger&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zipkin: &lt;a href=&quot;https://github.com/openzipkin/zipkin&quot; class=&quot;bare&quot;&gt;https://github.com/openzipkin/zipkin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.27.0 - Release</title>
      <link>http://www.hawkular.org/blog/2017/06/06/hawkular-metrics-0.27.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 6 Jun 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/06/06/hawkular-metrics-0.27.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.27.0 of Hawkular Metrics. This release is anchored by performance improvements and enhancements.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;REST API - Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Resolved an issue where a failure to insert metric tags can result in inconsistent state for a metric&apos;s definition and tags index; &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-660&quot;&gt;HWKMETRICS-660&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;The &lt;code&gt;/metrics&lt;/code&gt; endpoint is now aliased by &lt;code&gt;/m&lt;/code&gt; to avoid false positives due to privacy blockers restricting access to &lt;code&gt;/metrics/metrics&lt;/code&gt;; &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-621&quot;&gt;HWKMETRICS-621&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Added &lt;code&gt;GET /${metric_type}/tags/{tags}/raw&lt;/code&gt; endpoints for all metric types to allow easier querying for raw data; &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-482&quot;&gt;HWKMETRICS-482&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tag Query Language&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A new set of operators was added for regex matching. The operators are &lt;code&gt;~&lt;/code&gt; for a positive match and &lt;code&gt;!~&lt;/code&gt; for a negative match.&lt;/li&gt;
      &lt;li&gt;The existing equality operators (&lt;code&gt;=&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) will be exclusively used for strict string matching.&lt;/li&gt;
      &lt;li&gt;This improves language expressiveness and also removes confusion about the actual meaning of the string operators.&lt;/li&gt;
      &lt;li&gt;A side effect of this change is a dramatic performance improvement of up to 30x for expressions that use the equality operator (&lt;code&gt;=&lt;/code&gt;).&lt;/li&gt;
      &lt;li&gt;For more details please visit: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-676&quot;&gt;HWKMETRICS-676&lt;/a&gt; and &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/pull/828&quot;&gt;PR-828&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Other Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Added a flag (&lt;code&gt;METRICS_EXPIRATION_JOB_ENABLED&lt;/code&gt; set to true by default) to allow admins to disable the job that removes expired metric definitions. &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-643&quot;&gt;HWKMETRICS-643&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Updated RXJava to version 1.2.8; &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-652&quot;&gt;HWKMETRICS-652&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Alerting - Included&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/projects/HWKALERTS/versions/12334290&quot;&gt;1.7.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Examples&lt;/a&gt;, &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.27.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.27.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS/versions/12334300&quot;&gt;https://issues.jboss.org/projects/HWKMETRICS/versions/12334300&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Hawkular and Grafana Out of the Box</title>
      <link>http://www.hawkular.org/blog/2017/05/31/hawkular-grafana-ootb.html</link>
      <author>noreply@hawkular.org (Joel Takvorian)</author>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/05/31/hawkular-grafana-ootb.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jotak/hawkular-grafana-outofthebox&quot;&gt;Hawkular and Grafana Out of the Box&lt;/a&gt; is a new way to quickly setup Hawkular and Grafana together with very little work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming you already have docker installed and recent enough (you need at least Compose 1.6.0 and Docker Engine 1.10.0),
you&amp;#8217;re just 2 lines of YAML edition and a &lt;code&gt;docker-compose up&lt;/code&gt; away from having Hawkular + Grafana running and pre-configured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It is NOT intended for production/long-term usage unless you do some extra work to make it secured.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_does_it_work&quot;&gt;How does it work?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a look to the docker-compose file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;docker-compose.yml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;version: &apos;2&apos; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
services:
  hawkular:
    image: &quot;hawkular/hawkular-services:latest&quot; &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    ports:
      - &quot;8080:8080&quot;
      - &quot;8443:8443&quot;
      - &quot;9990:9990&quot;
    # volumes: &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    #   - /tmp/opt/hawkular/server:/opt/data:Z
    environment:
      - CASSANDRA_NODES=hawkular-cassandra
      - ADMIN_TOKEN
      - HAWKULAR_AGENT_ENABLE=false &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
  hawkular-cassandra: &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
    image: cassandra:3.0.9
    environment:
      - CASSANDRA_START_RPC=true
  grafana: &lt;b class=&quot;conum&quot;&gt;(6)&lt;/b&gt;
    image: &quot;hawkular/hawkular-grafana-datasource:latest&quot;
    ports:
      - &quot;3000:3000&quot;
  bootstrap: &lt;b class=&quot;conum&quot;&gt;(7)&lt;/b&gt;
    image: &quot;jotak/hawkular-grafana-bootstrap:latest&quot;
    environment:
      - TENANT=put_your_tenant_here
      - DASHBOARDS=put_dashboard_file_names_here&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Docker-compose format v2 brings some networking improvements that proved to be useful here, that&amp;#8217;s why you&amp;#8217;ll need docker 1.10.0+ and docker-compose 1.6.0+.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the official Hawkular Services image. Accessible on &lt;a href=&quot;http://localhost:8080/hawkular/metrics&quot; class=&quot;bare&quot;&gt;http://localhost:8080/hawkular/metrics&lt;/a&gt; or &lt;a href=&quot;http://localhost:8080/hawkular/alerts&quot; class=&quot;bare&quot;&gt;http://localhost:8080/hawkular/alerts&lt;/a&gt;, with credentials &lt;em&gt;jdoe&lt;/em&gt;/&lt;em&gt;password&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The volume is commented-out, so data is not persisted if you run &lt;code&gt;docker-compose down&lt;/code&gt;. To persist data, uncomment these lines and eventually set something different than &lt;code&gt;/tmp/opt/hawkular/server&lt;/code&gt; as the host directory. Make sure this directory exists on your host.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Hawkular agent is disabled by default, which means Hawkular is not self-monitored. You can enable it if you want, and use the &lt;code&gt;hawkular-self&lt;/code&gt; dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Cassandra node. Note that it&amp;#8217;s not exposed outside of the compose&amp;#8217;s subnetwork.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Grafana server with pre-installed Hawkular plugin, accessible on &lt;a href=&quot;http://localhost:3000&quot; class=&quot;bare&quot;&gt;http://localhost:3000&lt;/a&gt;, with credentials &lt;em&gt;admin&lt;/em&gt;/&lt;em&gt;admin&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This image contains a bootstrap script that configures a Grafana datasource with the &lt;code&gt;TENANT&lt;/code&gt; defined as environment variable, which is also injected in dashboard templates defined here (&lt;code&gt;DASHBOARDS&lt;/code&gt;). Those dashboards are sent to Grafana through its REST API. Current available dashboard templates are listed below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to have more than one tenant configured, you can add other sections to this compose file (&lt;em&gt;bootstrap2&lt;/em&gt;, &lt;em&gt;bootstrap3&lt;/em&gt;, etc. the name doesn&amp;#8217;t matter),
with the same docker image and different environment variables. You are limited, however, in the number of tenants per dashboard (a single dashboard cannot use several tenants).
You need to duplicate dashboards, or create them manually.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_available_dashboard_templates&quot;&gt;Available dashboard templates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only a few are available right now, but the list should grow and pull requests are welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some dashboards may be very specific, dedicated to the demos presented here, while others aim to be generic and reusable. The next step will be to inject custom dashboards through volume in docker-compose without having the rebuild the bootstrap image. Anyway, the current list is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;vertx-hwk&lt;/strong&gt;: for Vert.X applications that use the &lt;a href=&quot;http://vertx.io/docs/vertx-hawkular-metrics/java/&quot;&gt;vertx-hawkular-metrics&lt;/a&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;vertx-dw&lt;/strong&gt;: for Vert.X applications that use the &lt;a href=&quot;http://vertx.io/docs/vertx-dropwizard-metrics/java/&quot;&gt;vertx-dropwizard-metrics&lt;/a&gt; module along with the &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/tree/master/clients/dropwizard&quot;&gt;Hawkular reporter&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;hawkular-self&lt;/strong&gt;: for Hawkular self monitoring using its WildFly agent (but could work with other WF apps)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;cpudemo&lt;/strong&gt;: for the CPU demo (explained below)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;falco&lt;/strong&gt;: for the game/demo &quot;&lt;a href=&quot;https://github.com/jotak/falco-demo&quot;&gt;Falco the Hawk&lt;/a&gt;&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cpu_demo&quot;&gt;CPU Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want a demo? Take the docker-compose file located in &lt;code&gt;cpudemo/&lt;/code&gt; (&lt;a href=&quot;https://github.com/jotak/hawkular-grafana-outofthebox/blob/master/cpudemo/docker-compose.yml&quot;&gt;yes, this one&lt;/a&gt;) and store it locally. From its location run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose up&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first run may take some time since the docker engine has to download several images.
Also, the Hawkular first start is longer because it has to setup schema in Cassandra.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then open Grafana (&lt;a href=&quot;http://localhost:3000&quot; class=&quot;bare&quot;&gt;http://localhost:3000&lt;/a&gt;), log in (&lt;em&gt;admin&lt;/em&gt;/&lt;em&gt;admin&lt;/em&gt;), click on &quot;Home&quot; and you will see that a dashboard is already listed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-05-30-hgootb-grafana-startup.png&quot; alt=&quot;Grafana startup&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-05-30-hgootb-grafana-cpudemo.png&quot; alt=&quot;Grafana CPU demo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see it&amp;#8217;s updated regularly with your host&amp;#8217;s CPU usage (to be more accurate, it&amp;#8217;s the &lt;a href=&quot;https://en.wikipedia.org/wiki/Load_(computing)&quot;&gt;system load average&lt;/a&gt; over the past minute).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_how_does_it_work_2&quot;&gt;How does it work?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s actually very simple. A &lt;a href=&quot;https://github.com/jotak/hawkular-grafana-outofthebox/blob/master/cpudemo/push-cpu.sh&quot;&gt;shell script&lt;/a&gt; runs &lt;code&gt;top&lt;/code&gt; and extracts the system load average.
That value is pushed to Hawkular every 10 seconds under the tenant &lt;code&gt;$TENANT&lt;/code&gt; and gauge &lt;code&gt;load-avg&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;while :
do
  loadavg=`awk &apos;{ print $1 }&apos; /proc/loadavg`
  ux_timestamp=`date +%s`
  timestamp=$(($ux_timestamp * 1000))
  curl -u jdoe:password -X POST http://hawkular:8080/hawkular/metrics/gauges/load-avg/raw \
    -d &quot;[{\&quot;timestamp\&quot;: $timestamp, \&quot;value\&quot;: $loadavg}]&quot; \
    -H &quot;Content-Type: application/json&quot; -H &quot;Hawkular-Tenant: $TENANT&quot;
  sleep 10
done&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This script is then included in a docker image (&lt;code&gt;jotak/hawkular-grafana-cpudemo&lt;/code&gt;) with a simple Dockerfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;FROM centos:7
ADD ./push-cpu.sh /tmp/push-cpu.sh
RUN chmod +x /tmp/push-cpu.sh
ENTRYPOINT [&quot;/tmp/push-cpu.sh&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The docker image is on dockerhub so you don&amp;#8217;t have to worry about building it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, all the glue is done in the docker-compose file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;docker-compose.yml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;hawkular:
  # (same as before)
hawkular-cassandra:
  # (same as before)
grafana:
  # (same as before)
bootstrap:
  image: &quot;jotak/hawkular-grafana-bootstrap:latest&quot;
  environment:
    - TENANT=cpudemo
    - DASHBOARDS=cpudemo
cpudemo:
  image: &quot;jotak/hawkular-grafana-cpudemo:latest&quot;
  environment:
    - TENANT=cpudemo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, we just configured the tenant and dashboards in &lt;code&gt;bootstrap&lt;/code&gt;,
and added a section for our new image &lt;code&gt;jotak/hawkular-grafana-cpudemo&lt;/code&gt; with the same tenant configured.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_self_monitoring&quot;&gt;Hawkular self monitoring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building Hawkular self monitoring is even simpler as there&amp;#8217;s no outside application involved.
Take &lt;a href=&quot;https://github.com/jotak/hawkular-grafana-outofthebox/blob/master/hawkular/docker-compose.yml&quot;&gt;this docker-compose file&lt;/a&gt; and put it up
(make sure you&amp;#8217;ve stopped the other one before, to avoid port conflicts).
After several minutes of monitoring (be patient, some metrics take longer than others to gather), Grafana would display something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-05-30-hgootb-grafana-hawkular.png&quot; alt=&quot;Grafana Hawkular selfmon&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-05-30-hgootb-grafana-hawkular2.png&quot; alt=&quot;Grafana Hawkular selfmon&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This dashboard can be reused for other WildFly application that uses the Hawkular WildFly agent, since the metrics come from there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_how_does_it_work_3&quot;&gt;How does it work?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just some tweaks in the docker-compose file were needed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;docker-compose.yml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;hawkular:
  image: &quot;hawkular/hawkular-services:latest&quot;
  ports:
    - &quot;8080:8080&quot;
    - &quot;8443:8443&quot;
    - &quot;9990:9990&quot;
  environment:
    - CASSANDRA_NODES=hawkular-cassandra
    - ADMIN_TOKEN
    - HAWKULAR_AGENT_ENABLE=true &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
hawkular-cassandra:
  # (same as before)
grafana:
  # (same as before)
bootstrap:
  image: &quot;jotak/hawkular-grafana-bootstrap:latest&quot;
  environment: &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    - TENANT=hawkular
    - DASHBOARDS=hawkular-self&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Hawkular environment variable &lt;code&gt;HAWKULAR_AGENT_ENABLE&lt;/code&gt; was set to true to enable collecting agent&amp;#8217;s metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;bootstrap&lt;/code&gt;, &lt;em&gt;TENANT&lt;/em&gt; is set to &lt;em&gt;hawkular&lt;/em&gt; (this is the tenant used internally to collect agent&amp;#8217;s metrics) and the dashboard template is &lt;em&gt;hawkular-self&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_falco_the_hawk&quot;&gt;Falco the Hawk&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;&lt;a href=&quot;https://github.com/jotak/falco-demo&quot;&gt;Falco the Hawk&lt;/a&gt;&quot; is a demo game developed for the occasion. It runs with Vert.X with metrics enabled, and also provide its own game metrics to Hawkular.
You can download its &lt;code&gt;docker-compose.yml&lt;/code&gt; and put it up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget -O docker-compose.yml https://raw.githubusercontent.com/jotak/falco-demo/master/docker-compose.yml

docker-compose up&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can open &lt;a href=&quot;http://localhost:8081&quot; class=&quot;bare&quot;&gt;http://localhost:8081&lt;/a&gt; to play the game (beware, 8bits-style music inside!), and see the metrics at the same time on &lt;a href=&quot;http://localhost:3000&quot; class=&quot;bare&quot;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-05-30-hgootb-grafana-falco.png&quot; alt=&quot;Grafana Falco the Hawk&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-05-30-hgootb-grafana-vertx.png&quot; alt=&quot;Grafana Vert.X&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_next&quot;&gt;Next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s all for now. Please don&amp;#8217;t hesitate to give feedback, ask for feature requests, maybe new dashboard templates, ask for help or submit pull requests. One link for that: &lt;a href=&quot;https://github.com/jotak/hawkular-grafana-outofthebox&quot; class=&quot;bare&quot;&gt;https://github.com/jotak/hawkular-grafana-outofthebox&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Kubernetes and OpenShift Templates for Jaeger</title>
      <link>http://www.hawkular.org/blog/2017/05/25/jaeger-contributions.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/05/25/jaeger-contributions.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce that we have made it easier to deploy Jaeger on Kubernetes.
This work has been carried out in a new github organization &lt;a href=&quot;https://github.com/jaegertracing&quot;&gt;Jaegertracing&lt;/a&gt;
established to contain contributions for the Jaeger ecosystem. At the moment this organization holds
repositories for Kubernetes and OpenShift templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, we provide templates for deploying an all-in-one distribution. These bits are designed for demo
and test purposes since they use only in-memory database. Be careful and do not use it in production!
More sophisticated templates using a pure microservice approach and Cassandra storage will be available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The templates have been tested against minikube and minishift using an excellent integration testing framework
&lt;a href=&quot;https://github.com/arquillian/arquillian-cube&quot;&gt;Arquillian Cube&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/jaeger-openshift.png&quot; alt=&quot;jaeger openshift&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Jaeger deployed on OpenShift&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes templates: &lt;a href=&quot;https://github.com/jaegertracing/jaeger-kubernetes&quot; class=&quot;bare&quot;&gt;https://github.com/jaegertracing/jaeger-kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Openshift templates: &lt;a href=&quot;https://github.com/jaegertracing/jaeger-openshift&quot; class=&quot;bare&quot;&gt;https://github.com/jaegertracing/jaeger-openshift&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Services 0.37.Final</title>
      <link>http://www.hawkular.org/blog/2017/05/03/hawkular-services-0.37-released.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Wed, 3 May 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/05/03/hawkular-services-0.37-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular services is a ready to run distribution of Hawkular-Metrics with Alerts, Inventory, the WildFly agent and other components.
The version &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.37.0.Final/hawkular-services-dist-0.37.0.Final.zip&quot;&gt;0.37.0.Final&lt;/a&gt; has just been released and is ready to be tested and integrated with other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_in_this_release&quot;&gt;What&amp;#8217;s in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes those changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inventory.v3 (already introduced in 0.36). This version of inventory stores its data inside of Hawkular-Metrics as String metrics.
See &lt;a href=&quot;http://www.hawkular.org/hawkular-services/docs/user-guide/inventory/inventory-v3-details.html&quot;&gt;this page for technical details&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This does no longer need Postgres for Inventory storage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agent version 1.0.0.CR2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The agent inside the Hawkular-services server is now the javaagent instead of the subsystem-based agent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular-Metrics version 0.26.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better support for running on OpenShift&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby client gem v 3.0.1 to support Inventory.v3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Inventory.v3 is incompatible with the previous version of Inventory. We made this change
 to be able to get rid of the SQL database (Postgres) that was needed with the previous inventory. You need to
 use ruby client gem version 3.0.1+ to use Inventory.v3. Similar agent version 1.0.0.CR1 and later.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is released every week on Tuesdays.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started&quot;&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started with Hawkular Services, &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.37.0.Final/hawkular-services-dist-0.37.0.Final.zip&quot;&gt;download the latest release&lt;/a&gt;, unzip it,
add a user and set the Agent to use the credentials for the user just added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be accomplished with the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export HAWKULAR_HOME=&quot;/path/to/hawkular-services&quot;
export HAWKULAR_USERNAME=&quot;jdoe&quot;
export HAWKULAR_PASSWORD=&quot;password&quot;

cd &quot;${HAWKULAR_HOME}&quot;
&quot;${HAWKULAR_HOME}/bin/add-user.sh&quot; \
  -a \
  -u &quot;${HAWKULAR_USERNAME}&quot; \
  -p &quot;${HAWKULAR_PASSWORD}&quot; \
  -g read-write,read-only
&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting the server, you need to have Cassandra 3.0.9 up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_get_started_via_docker_builds&quot;&gt;Get started via Docker builds&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are official Docker images of the release available on
DockerHub at &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-services/&quot;&gt;Hawkular services&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;latest&lt;/code&gt; tag will always point to the latest release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;NOTE&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;There are also images with a &lt;code&gt;devel&lt;/code&gt; tag, which are pushed by internal CI on individual commits.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_build_from_master_and_cassandra&quot;&gt;Build from master and Cassandra&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you build from master, you can pass &lt;code&gt;-Pembeddedc&lt;/code&gt; to get a distribution with embedded Cassandra for local development.
Similarly if you build via &lt;code&gt;-Pdev&lt;/code&gt; a default user of &lt;em&gt;jdoe/password&lt;/em&gt; will be installed and also be used with the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_use_grafana_with_hawkular_services&quot;&gt;Use Grafana with Hawkular-services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do now have a Grafana datasource to make it easier to connect to Hawkular-services from Grafana.
You can download it from &lt;a href=&quot;https://grafana.net/plugins/hawkular-datasource&quot;&gt;Grafana.net&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;website of the datasource tells more&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_unofficial_wildfly_agent&quot;&gt;Unofficial WildFly + agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also an instrumented WildFly server available at
&lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkfly/&quot;&gt;Instrumented WildFly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both images have been instrumented with the &lt;em&gt;jdoe/password&lt;/em&gt; user for the Hawkular server and the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&quot; class=&quot;bare&quot;&gt;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&lt;/a&gt; on some more
details about using those images.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Alerting Tutorial: Lesson 06 - Events!</title>
      <link>http://www.hawkular.org/blog/2017/04/27/hawkular-alerting-tutorial-l6.html</link>
      <author>noreply@hawkular.org (Jay Shaughnessy)</author>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/04/27/hawkular-alerting-tutorial-l6.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Announcing availability of Tutorial Lesson 06: Events!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new lesson builds on the &lt;a href=&quot;http://www.hawkular.org/blog/2017/03/14/hawkular-alerting-tutorial.html&quot;&gt;previously announced tutorial&lt;/a&gt;.  It talks about events in Hawkular alerting, how they differ from alerts, and how to work with them. Check it out!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting is a pluggable, API-driven component for adding alerting to your application or tool.  It&amp;#8217;s one of the many &lt;a href=&quot;http://hawkular.org&quot;&gt;Hawkular&lt;/a&gt; offerings for monitoring and management.  To help quick-start new users, and as a reference for current users, we&amp;#8217;ve now released six tutorial lessons, with more to follow.  It&amp;#8217;s a great way to hit the ground running.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_for_git_users&quot;&gt;For Git Users:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git clone https://github.com/hawkular/hawkular-alerts.git
cd hawkular-alerts/examples/tutorial&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_for_others&quot;&gt;For Others:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Click this link to visit &lt;a href=&quot;http://github.com/hawkular/hawkular-alerts&quot;&gt;Hawkular Alerting on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;em&gt;Clone or download&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;em&gt;Download ZIP&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;unzip hawkular-alerts-master.zip
cd hawkular-alerts/examples/tutorial&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_for_everyone&quot;&gt;For Everyone:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start with the README.adoc. If you don&amp;#8217;t have an asciidoc extension in your browser you can read the rendered README &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/examples/tutorial/README.adoc&quot;&gt;directly from GitHub&lt;/a&gt;.  From here just click links in the document to proceed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting has several deployment options, it can be deployed standalone, or embedded in Hawkular Metrics, or as part of Hawkular Services.  The tutorial drives off of a docker container running alerting as part of Hawkular Metrics, generating alerts off of incoming metric data.  The first lesson will help you get set up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try it and let us know how it goes! If you have any questions or want to share your thoughts, join us on IRC at &lt;a href=&quot;irc://irc.freenode.org/#hawkular&quot;&gt;#hawkular on freenode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular APM: The Future</title>
      <link>http://www.hawkular.org/blog/2017/04/19/hawkular-apm-jaeger.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/04/19/hawkular-apm-jaeger.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since October last year, the Hawkular APM project has been actively working on supporting, and contributing to,
the &lt;a href=&quot;http://opentracing.io/&quot;&gt;OpenTracing&lt;/a&gt; standard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We began by implementing our own Java OpenTracing provider, followed by a Node.js/Javascript implementation. We have
also been active in the OpenTracing community, developing Java framework integrations and more recently a
Java Agent that can be used to automatically install those framework integrations without any changes to the
application code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However we realised that the core model used in Hawkular APM (fragments of call traces)
was not particularly well aligned with the model used in OpenTracing (span based). This made it more complicated to
implement client providers, as they need to build the call trace fragments from multiple spans, and it means
the information stored in the server wasn&amp;#8217;t in the same form expected by users of the OpenTracing API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore at the beginning of this year we made the decision to change the core model used by Hawkular APM to be
compatible with the model used by the OpenTracing API - and essentially provide an &quot;OpenTracing&quot; native solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the initial design meetings to discuss the proposed changes, we became aware of a
&lt;a href=&quot;https://eng.uber.com/distributed-tracing/&quot;&gt;blog post from Uber&lt;/a&gt;
regarding the future of their &lt;a href=&quot;https://github.com/uber/jaeger&quot;&gt;Jaeger&lt;/a&gt; project.
Up until that point Jaeger used the &lt;a href=&quot;http://zipkin.io/&quot;&gt;Zipkin&lt;/a&gt; project to provide its
backend tracing solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new version of Jaeger provides very similar functionality to Zipkin, which is focused on visualising individual
traces. It does not have the aggregated views currently supported in Hawkular APM - however from discussions with the
Jaeger project, they are keen to be able to provide aggregated views.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore we have made the decision that, rather than refactor the Hawkular APM project&amp;#8217;s model to be more
OpenTracing compatible, it makes more sense to collaborate on the Jaeger project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-04-19-jaeger-trace.png&quot; alt=&quot;2017 04 19 jaeger trace&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Individual trace captured from the Jaeger HotRod example&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current Hawkular APM codebase will still be available as an OpenTracing solution - however our intention is to focus more effort on the Jaeger project, initially with the aim of making it easy to use within OpenShift, and then adding aggregated views.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>CloudNativeCon summary</title>
      <link>http://www.hawkular.org/blog/2017/04/07/cloudnativecon-summary.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Fri, 7 Apr 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/04/07/cloudnativecon-summary.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CloudNativeCon happened last week in Berlin and Hawkular APM was represented there
with a talk, &lt;a href=&quot;https://www.youtube.com/watch?v=utCOfSz202o&quot;&gt;&quot;Operational and Business Insights from Tracing Distributed Microservices&quot;&lt;/a&gt;.
Here&amp;#8217;s a short summary of the event, with a focus on OpenTracing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-04-07-teaser.png&quot; alt=&quot;CloudNativeCon logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This event was co-located with KubeCon and as you would expect, pretty much
everything revolved around Kubernetes. There were quite a few tracing vendors
with booths and/or in the audience: Instana, DataDog, Dynatrace, Sysdig,
CA Technologies, among others. It was a great opportunity to talk to them,
watch each others demos, exchange ideas and invite them to the OpenTracing
community. A few of them have components which are similar in purpose to some that
we are developing as part of &quot;opentracing-contrib&quot; and would be the perfect opportunity
for a collaboration!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the talk, we were able to answer some questions around OpenTracing and
Hawkular APM. Those with good questions got
&lt;a href=&quot;https://pbs.twimg.com/media/C8EgCvzXkAIsr8L.jpg:large&quot;&gt;&quot;data containers and books&quot;&lt;/a&gt;.
There was also quite some interest in OpenShift: most people knew about it already and
among those who didn&amp;#8217;t, most seemed impressed by its user interface once presented to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the last day, there was a Distributed Tracing Salon: in this workshop, people
were able to get started with OpenTracing by using a demo application written in
Go and adding instrumentation to it. The final goal was to see the traces on
Zipkin&amp;#8217;s user interface, and I believe most participants reached the goal! Those
who didn&amp;#8217;t could continue working on it after the workshop, as the
&lt;a href=&quot;https://github.com/tedsuo/ot-walkthrough-go&quot;&gt;source code&lt;/a&gt; is available on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was also a great opportunity to meet some OpenTracing members from LightStep,
and I made sure to smuggle a few stickers and T-Shirts back to Munich, to be distributed
during meetup talks there. All the videos from this conference, including the
ones from the OpenTracing track, can be watched on
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLj6h78yzYM2PAavlbv0iZkod4IVh_iGqV&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some interesting topics were brought up during the conference, a few of them more than once:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What&amp;#8217;s the overhead? Hint: As OpenTracing is a specification and API, the
overhead is dependent on the concrete implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiplexer: sending traces to more than one backend seems to be a common use-case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Should the &quot;wire transport&quot; be part of the specification?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Should an export format, like &lt;code&gt;pcap&lt;/code&gt;, be part of the specification?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What can be used for &quot;reacting&quot; on data (alerting)? Hint:
&lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Hawkular Alerts &lt;/a&gt;
is a great alternative and can be used as a standalone solution!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And you, what&amp;#8217;s your opinion on the questions related to the specification?
&lt;a href=&quot;http://opentracing.io&quot;&gt;Join the OpenTracing community&lt;/a&gt; and make your opinion count!&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Alerts and Notifications for Elasticsearch using Hawkular Alerting</title>
      <link>http://www.hawkular.org/blog/2017/04/06/hawkular-alerting-elasticsearch.html</link>
      <author>noreply@hawkular.org (Lucas Ponce)</author>
      <pubDate>Thu, 6 Apr 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/04/06/hawkular-alerting-elasticsearch.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_elasticsearch_alerter&quot;&gt;Elasticsearch Alerter&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting includes a new &lt;em&gt;Alerter&lt;/em&gt; capable to query &lt;em&gt;Elasticsearch&lt;/em&gt; servers and represent documents as &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html#Event&quot;&gt;Hawkular Events&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Managing &lt;em&gt;Elasticsearch&lt;/em&gt; documents as Events allows Hawkular Alerting to define rich and complex conditions using &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html#EventCondition&quot;&gt;EventConditions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Triggers tagged with &lt;em&gt;Elasticsearch&lt;/em&gt; will be used to schedule a periodic query to an &lt;em&gt;Elasticsearch&lt;/em&gt; server. Trigger&amp;#8217;s context will be used to define the interval between queries, additional query filtering or mapping options that will be used by the alerter to convert documents into events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;    &quot;tags&quot;: {
      &quot;Elasticsearch&quot;: &quot;Localhost instance&quot; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    },
    &quot;context&quot;: {
      &quot;timestamp&quot;: &quot;@timestamp&quot;, &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
      &quot;interval&quot;: &quot;30s&quot;, &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
      &quot;index&quot;: &quot;log&quot;,  &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
      &quot;filter&quot;: &quot;{\&quot;match\&quot;:{\&quot;app\&quot;:\&quot;AppA\&quot;}}&quot;, &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
      &quot;mapping&quot;: &quot;level:category,@timestamp:ctime,message:text,app:dataId,index:tags&quot; &lt;b class=&quot;conum&quot;&gt;(6)&lt;/b&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Elasticsearch&lt;/em&gt; tag is used by the alerter to schedule a query from this trigger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Elasticsearch&lt;/em&gt; field &quot;@timestamp&quot; will be used to fetch documents in regular intervals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interval between queries will be &lt;em&gt;30&lt;/em&gt; seconds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documents are fetched from &lt;em&gt;log&lt;/em&gt; index&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional filtering to refine the query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mapping between &lt;em&gt;Elasticsearch&lt;/em&gt; document fields and &lt;em&gt;Hawkular Events&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full reference of the &lt;em&gt;Elasticsearch&lt;/em&gt; Alerter can be found under
&lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html#_elasticsearch_alerter&quot;&gt;Elasticsearch Alerter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_elasticsearch_plugin&quot;&gt;Elasticsearch Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Hawkular Alerting&lt;/em&gt; also includes a new &lt;em&gt;Action Plugin&lt;/em&gt; capable to transform Hawkular Events and Alerts into &lt;em&gt;Elasticsearch&lt;/em&gt; documents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Elasticsearch Plugin&lt;/em&gt; properties allows to define how an Event or Alert will be transformed in a document and under which index and type will be stored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;    {
      &quot;actionPlugin&quot;: &quot;elasticsearch&quot;,
      &quot;actionId&quot;: &quot;write-partial-alert&quot;,
      &quot;properties&quot;: {
        &quot;index&quot;: &quot;alerts_summary&quot;,  &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
        &quot;timestamp_pattern&quot;: &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSZ&quot;,   &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
        &quot;transform&quot;: &quot;{\&quot;tenantId\&quot;:\&quot;tenant\&quot;,\&quot;ctime\&quot;:\&quot;timestamp\&quot;,\&quot;text\&quot;:\&quot;trigger\&quot;,\&quot;context\&quot;:{\&quot;interval\&quot;:\&quot;fetch-interval\&quot;},\&quot;evalSets\&quot;:\&quot;details\&quot;}&quot; &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
      }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Index used to store documents transformed by this plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;em&gt;timestamp_pattern&lt;/em&gt; indicates that all timestamp fields of Events/Alerts should be transformed into strings using this pattern&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSON &amp;#8594; JSON mapping to convert Events/Alerts into document using &lt;a href=&quot;http://jolt-demo.appspot.com/&quot;&gt;JOLT Shiftr&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full reference of the &lt;em&gt;Elasticsearch&lt;/em&gt; Plugin can be found under &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html#_elasticsearch_action_plugin&quot;&gt;Elasticsearch Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_logging_example&quot;&gt;Logging Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An small but rich example can be found under &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples/elasticsearch&quot;&gt;Elasticsearch example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This example simulates different logs entries that are stored in &lt;em&gt;Elasticsearch&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These entries define a log level &lt;em&gt;(INFO, WARN or ERROR)&lt;/em&gt;, a source application &lt;em&gt;(AppA, AppB and AppC)&lt;/em&gt; and in the body message describes some reference about the subcomponent related &lt;em&gt;(Security, Frontend or Backend)&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These logs are stored in &lt;em&gt;Elasticsearch&lt;/em&gt; with the following format:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;@timestamp&quot;:&quot;2017-04-05T14:23:13.360447+0200&quot;,
    &quot;level&quot;:&quot;ERROR&quot;,
    &quot;app&quot;:&quot;AppA&quot;,
    &quot;message&quot;:&quot;Message 6167 from Security&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example a first trigger is defined to fetch documents just for AppA, for this, the in the context we define a &lt;em&gt;match&lt;/em&gt; filter as&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;    &quot;context&quot;: {
      &quot;timestamp&quot;: &quot;@timestamp&quot;,
      &quot;filter&quot;: &quot;{\&quot;match\&quot;:{\&quot;app\&quot;:\&quot;AppA\&quot;}}&quot;, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
      &quot;interval&quot;: &quot;30s&quot;,
      &quot;index&quot;: &quot;log&quot;,
      &quot;mapping&quot;: &quot;level:category,@timestamp:ctime,message:text,app:dataId,index:tags&quot; &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;From all possible documents, only AppA are interested for this trigger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that &lt;em&gt;app&lt;/em&gt; field is used as dataId for Events&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once events are mapped we can define an &lt;em&gt;EventsCondition&lt;/em&gt; to detect any &lt;em&gt;ERROR&lt;/em&gt; log related to &lt;em&gt;Backend&lt;/em&gt; components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;      &quot;conditions&quot;:[
        {
          &quot;type&quot;: &quot;EVENT&quot;,
          &quot;dataId&quot;: &quot;AppA&quot;,
          &quot;expression&quot;: &quot;category == &apos;ERROR&apos;,text contains &apos;Backend&apos;&quot;
        }
      ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a similar way, a second trigger is defined in the example to fetch documents for AppB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;    &quot;context&quot;: {
      ...
      &quot;filter&quot;: &quot;{\&quot;match\&quot;:{\&quot;app\&quot;:\&quot;AppB\&quot;}}&quot;, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;From all possible documents, only AppB are interested for this trigger&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On this second trigger, we want to detect when we have a suspected high number of WARN messages in the log. There are several ways to map this, in the example we are going to use a &lt;em&gt;Dampening&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;      &quot;dampenings&quot;: [
        {
          &quot;triggerMode&quot;: &quot;FIRING&quot;,
          &quot;type&quot;:&quot;RELAXED_COUNT&quot;,
          &quot;evalTrueSetting&quot;: 3,
          &quot;evalTotalSetting&quot;: 10
        }
      ],
      &quot;conditions&quot;:[
        {
          &quot;type&quot;: &quot;EVENT&quot;,
          &quot;dataId&quot;: &quot;AppB&quot;,
          &quot;expression&quot;: &quot;category == &apos;WARN&apos;&quot;
        }
      ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, this second trigger will alert when more than 3 WARN messages are detected in a rate of 10 messages processed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, the example defines several ways of notifications: sending an email to administrators and writting back into &lt;em&gt;Elasticsearch&lt;/em&gt; the alerts fired.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_elasticsearch_integration&quot;&gt;Elasticsearch Integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a result, we can combine all the Logs and Alerts in custom searches and provide them a UI dashboard in Kibana.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/Kibana-Hawkular-Alerting.png&quot; alt=&quot;Kibana - Hawkular Alerting&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Deploying Hawkular OpenShift Agent Easily</title>
      <link>http://www.hawkular.org/blog/2017/04/05/deploy-hosa-easily.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Wed, 5 Apr 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/04/05/deploy-hosa-easily.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent&quot;&gt;Hawkular OpenShift Agent&lt;/a&gt; has its docker images released on &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-openshift-agent&quot;&gt;Docker Hub&lt;/a&gt;. So it is easily deployed in your OpenShift nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You simply need to run some &quot;oc&quot; commands to create the agent and its configmap using a few &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/tree/master/deploy/openshift&quot;&gt;OpenShift templates&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make deploying the agent easier - especially for someone just wanting to try it out - a new &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/hack/deploy-openshift-agent.sh&quot;&gt;deploy-openshift-agent.sh&lt;/a&gt; script has been provided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now all you need to do in order to deploy HOSA is run this one command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/hawkular/hawkular-openshift-agent/master/hack/deploy-openshift-agent.sh &amp;amp;&amp;amp; sh ./deploy-openshift-agent.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will deploy the latest agent version in your OpenShift node in the &quot;default&quot; OpenShift project. If you wish to install a different version, use the DOCKER_VERSION environment variable like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/hawkular/hawkular-openshift-agent/master/hack/deploy-openshift-agent.sh &amp;amp;&amp;amp; DOCKER_VERSION=1.4.0.Final sh ./deploy-openshift-agent.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that this script will ask you for your OpenShift credentials if you are not yet logged in - it runs &quot;oc login&quot; which requires you to enter your username and password at the prompts. You may optionally log in ahead of time by running the &quot;oc login&quot; command prior to running this deploy script.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_deploying_the_examples&quot;&gt;Deploying the Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that you have the Hawkular OpenShift Agent deployed, you can just as easily deploy some of the examples to see the agent work. There is a similar script located in the &lt;code&gt;examples&lt;/code&gt; directory called &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/examples/deploy-example.sh&quot;&gt;deploy-example.sh&lt;/a&gt;. You pass to it a command line argument whose value is the name of an example. The names of the examples are found in the &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples&quot;&gt;examples&lt;/a&gt; directory - names such as &lt;code&gt;jolokia-wildfly-example&lt;/code&gt; and &lt;code&gt;multiple-endpoints-example&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All you need to do in order to deploy an example is run this one command (note that this deploys the &lt;code&gt;jolokia-wildfly-example&lt;/code&gt; but you can pass in any example name you want):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/hawkular/hawkular-openshift-agent/master/examples/deploy-example.sh &amp;amp;&amp;amp; sh ./deploy-example.sh jolokia-wildfly-example&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will deploy the latest example version in your OpenShift node in your user&amp;#8217;s default OpenShift project. If you wish to install a different version, use the DOCKER_VERSION environment variable. If you wish to install your example in a different OpenShift project, use the EXAMPLE_NAMESPACE environment variable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/hawkular/hawkular-openshift-agent/master/examples/deploy-example.sh &amp;amp;&amp;amp; DOCKER_VERSION=1.4.0.Final EXAMPLE_NAMESPACE=myproject sh ./deploy-example.sh jolokia-wildfly-example&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have already logged into OpenShift, the script will not ask you to log in again. It will only log you into OpenShift if you have not yet done so.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.26.0 - Release</title>
      <link>http://www.hawkular.org/blog/2017/04/04/hawkular-metrics-0.26.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 4 Apr 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/04/04/hawkular-metrics-0.26.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.26.0 of Hawkular Metrics. This release is anchored by performance improvements and enhancements.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;REST API - Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Added an endpoint to delete a single metric - &lt;code&gt;DELETE /{metric_type}/{metric_id}&lt;/code&gt;. NOTE: deleting a metric using this endpoint will immediately delete all uncompressed data, tags, and index entries for a single metric; the compressed data will not be deleted but will expire using the preset data retention; &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-612&quot;&gt;HWKMETRICS-612&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Added a mixed stats batch query endpoint to request multiple stats queries at the same time, &lt;code&gt;POST /metrics/stats/batch/query&lt;/code&gt;. For a sample query and reply please visit: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-618&quot;&gt;HWKMETRICS-618&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Enabled GZIP content compression when the client accepts it; &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-623&quot;&gt;HWKMETRICS-623&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Min and max timestamp for metric definitions are now fetched only when explicitly requested. To enable min and max timestamps please use &lt;code&gt;timestamps=true&lt;/code&gt; query parameter. &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-625&quot;&gt;HWKMETRICS-625&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cassandra&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Cassandra 3.0.12 is now the supported version of Cassandra.&lt;/li&gt;
      &lt;li&gt;Support for previous versions of Cassandra 3.0.x is deprecated.&lt;/li&gt;
      &lt;li&gt;For more details please visit: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-622&quot;&gt;HWKMETRICS-622&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External Metrics Alerter - Enhancements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Added &apos;quietCount&apos; option to the ConditionExpression to prevent alert repetition. If set then redundant firings for the same metric are suppressed until after N false evaluations. This applies to each metric individually. &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-630&quot;&gt;HWKMETRICS-630&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Added support for metrics group triggers, a way to define a single trigger and have it apply to an unknown and changing set of metrics. For documentation regarding this feature please visit &lt;a href=&quot;http://www.hawkular.org/hawkular-metrics/docs/user-guide/#_metrics_group_triggers&quot;&gt;Metrics Group Triggers&lt;/a&gt;, and &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-640&quot;&gt;HWKMETRICS-640&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Resolved an issue where schema installation on multi Cassandra node cluster may fail; &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-637&quot;&gt;HWKMETRICS-637&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Added an internal job that deletes metrics definitions after all the associated data (compressed and uncompressed) expires. This will remove the tags and index entries for metrics that are no longer in use. &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-613&quot;&gt;HWKMETRICS-613&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Alerting - Included&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/projects/HWKALERTS/versions/12333585&quot;&gt;1.6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Examples&lt;/a&gt;, &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.26.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.26.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS/versions/12333957&quot;&gt;https://issues.jboss.org/projects/HWKMETRICS/versions/12333957&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Collecting Application Metrics Within OpenShift</title>
      <link>http://www.hawkular.org/blog/2017/03/25/collecting-application-metrics-openshift.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/03/25/collecting-application-metrics-openshift.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introducing_hawkular_openshift_agent&quot;&gt;Introducing Hawkular OpenShift Agent&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular supports the collection of application metrics within an OpenShift cluster via the Hawkular OpenShift Agent (HOSA). Metrics are stored in the OpenShift-provided Hawkular-Metrics storage facility providing out-of-box, scalable long term storage of metric data allowing for future analytics of your performance data in additional to graphing recent data within the OpenShift UI Console. Alerting on metric data is also provided via the Hawkular-Alerts component within Hawkular-Metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HOSA provides ease-of-use for end customers of OpenShift since once HOSA is deployed in a node, the only thing pod developers need to do to collect and store their metrics as well as display them in the OpenShift console is to publish a configmap declaring what metrics that pod wants collected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HOSA dynamically discovers pods when they are deployed in the node (regardless of what project they are in). HOSA will automatically begin collecting metrics from the discovered pods. Metric collection is opt-in - only those pods that declare a specific config map containing HOSA metric configuration will have their metrics collected by HOSA. This allows pod developers to choose what they want to collect and how often they want them collected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pods may expose their metric data as either Prometheus endpoints (using either the binary or text formats), Jolokia/JMX endpoints (using Jolokia&amp;#8217;s REST API), or as simple JSON documents (as is how, for example, Go&amp;#8217;s expvar data is exposed).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HOSA tags each metric with name/value pairs for easy querying and graphing. In addition to the tags defined specifically by HOSA itself, pod developers can attach their own custom tags to their metrics allowing for further customization of the metadata attached to each metric.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-25-hosa-on-openshift-node.png&quot; alt=&quot;2017 03 25 hosa on openshift node&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Hawkular OpenShift Agent Monitoring Pods on an OpenShift Node&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-25-hosa-on-openshift-cluster.png&quot; alt=&quot;2017 03 25 hosa on openshift cluster&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2: Hawkular OpenShift Agent Monitoring Pods on an OpenShift Cluster&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install HOSA, you can use the latest release published on &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-openshift-agent/tags/&quot;&gt;Docker Hub&lt;/a&gt;. HOSA can be deployed in your OpenShift node as a daemon set. For example, here is an &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/deploy/openshift/hawkular-openshift-agent.yaml&quot;&gt;OpenShift YAML template&lt;/a&gt; along with its &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/deploy/openshift/hawkular-openshift-agent-configmap.yaml&quot;&gt;config map configuration&lt;/a&gt; which you can use to deploy HOSA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HOSA requires additional roles in order to function - you must have the rights to give HOSA its additional roles. Without these additional roles, HOSA will not operate properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To deploy HOSA:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;oc create -f &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/deploy/openshift/hawkular-openshift-agent-configmap.yaml&quot;&gt;deploy/openshift/hawkular-openshift-agent-configmap.yaml&lt;/a&gt; -n default&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;oc process -f &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/deploy/openshift/hawkular-openshift-agent.yaml&quot;&gt;deploy/openshift/hawkular-openshift-agent.yaml&lt;/a&gt; -v IMAGE_VERSION=latest | oc create -n deafult -f -&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;oc adm policy add-cluster-role-to-user hawkular-openshift-agent system:serviceaccount:default:hawkular-openshift-agent&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or, if you wish, clone the &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent.git&quot;&gt;HOSA github repo&lt;/a&gt; and run &lt;code&gt;make openshift-deploy&lt;/code&gt; and it will run the commands you need to deploy. You first must log into OpenShift via &lt;code&gt;oc login&lt;/code&gt; prior to running that &lt;code&gt;make&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_defining_application_metrics_to_be_collected&quot;&gt;Defining Application Metrics To Be Collected&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HOSA is only installed by the OpenShift administrator and only one need be installed per node. Once installed, the only thing for pod developers to do in order for HOSA to begin collecting application metrics (and thus allowing the OpenShift Console to graph their data) is to create a config map that defines the metrics that are to be collected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In order to declare to HOSA which config map to use, the pod must configure a volume named &quot;hawkular-openshift-agent&quot; which refers to the config map. For more details on this, consult one of the example yamls or see the &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/README.adoc#pod-volumes&quot;&gt;HOSA README&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A pod may have one or more endpoints exposing one or more metrics. HOSA can collect any number of metrics from any number of endpoints from any number of pods from any number of projects within the node. Note that HOSA is configured to limit the number of metrics any one pod may ask to be collected - this is to avoid a &quot;pod hog&quot; who asks HOSA to collect large amounts of data. HOSA will thus limit the amount of resources any one pod can use for metric storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what a pod config map can look like - this tells HOSA to collect all metrics from the pod&amp;#8217;s Prometheus endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;endpoints:
- type: prometheus
  protocol: http
  port: 8181
  path: /metrics
  collection_interval: 30s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what a pod config map can look like if the pod emits Jolokia/JMX metrics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;endpoints:
- type: jolokia
  protocol: http
  port: 8778
  path: /jolokia/
  collection_interval: 15s
  metrics:
  - name: java.lang:type=OperatingSystem#OpenFileDescriptorCount
    type: gauge
    description: Open File Descriptor Count
  - name: java.lang:type=Memory#HeapMemoryUsage#*
    type: gauge
    description: Heap Memory Used ${2}
    units: B
  - name: jboss.as:subsystem=datasources,data-source=*,statistics=jdbc#*
    type: gauge
    description: Data Source ${data-source} JDBC Statistic ${1}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_examples&quot;&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several examples published in the HOSA git repo and docker hub to see how different types of metrics can be configured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A pod deployed with a Python application that emits metrics via a Prometheus endpoint:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/prometheus-python-example&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/prometheus-python-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Image on Docker Hub: &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-prometheus-python&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-prometheus-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A pod deployed with a WildFly application server that emits metrics via a secured Jolokia/JMX endpoint:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/jolokia-wildfly-example&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/jolokia-wildfly-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Image on Docker Hub: &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-jolokia-wildfly/&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-jolokia-wildfly/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A pod deployed with a Python application that emits metrics over several Prometheus endpoints:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/multiple-endpoints-example&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/multiple-endpoints-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Image on Docker Hub: &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-multiple-endpoints/&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-multiple-endpoints/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A pod deployed with a Go application that emits metrics in a JSON document (using Go&amp;#8217;s expvar feature):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/go-expvar-example&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-openshift-agent/tree/master/examples/go-expvar-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Image on Docker Hub: &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-go-expvar/&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/hawkular/hawkular-openshift-agent-example-go-expvar/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see HOSA collect metrics from these example pods, deploy one or more of these in OpenShift. If you git cloned the HOSA git repo, you can use the Makefiles in the example directories to deploy them - within an example directory, run &lt;code&gt;make openshift-deploy&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once HOSA is collecting and storing your application metrics, the OpenShift Console will display graphs of your data in the pod&amp;#8217;s Metrics tab:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-25-hosa-os-ui.png&quot; alt=&quot;2017 03 25 hosa os ui&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3: OpenShift Application Metrics Collected and Stored By Hawkular&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_for_more_details&quot;&gt;For More Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take a look at the &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent/blob/master/README.adoc&quot;&gt;HOSA README file&lt;/a&gt; for more details. You may ask questions in the #hawkular chat room on freenode IRC or send an email to the &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/hawkular-dev&quot;&gt;hawkular-dev mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also check out an earlier blog on this topic - &lt;a href=&quot;http://www.hawkular.org/blog/2017/01/17/obst-hosa.html&quot;&gt;Monitoring Microservices on Openshift with the Hawkular Openshift Agent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Distributed Tracing with Apache Camel and OpenTracing</title>
      <link>http://www.hawkular.org/blog/2017/03/24/distributed-tracing-with-camel.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/03/24/distributed-tracing-with-camel.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we will discuss how the &lt;a href=&quot;http://opentracing.io/&quot;&gt;OpenTracing standard&lt;/a&gt; is being supported in the upcoming release of Apache Camel (version 2.19).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenTracing is the vendor neutral open standard for distributed tracing, supported across many languages and with a growing number of tracer implementations and framework integrations. To illustrate the vendor neutrality, we will demonstrate two examples, each using a different OpenTracing compliant Tracer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-24-camel-loanbroker-jms-instance.png&quot; alt=&quot;2017 03 24 camel loanbroker jms instance&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1: Distributed trace for the Camel Loan Broker JMS example&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_instrument_a_camel_application&quot;&gt;How to Instrument a Camel Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing to note is that it is not necessary to modify the Camel routes to have them instrumented using an OpenTracing compliant Tracer. The only requirement is to add some relevant dependencies and initialize the tracer on the &lt;code&gt;CamelContext&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be achieved in three ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_explicit_initialization&quot;&gt;Explicit initialization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The dependencies required to explicitly initialize OpenTracing are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;camel-opentracing&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and any other dependencies specific to the OpenTracing compliant Tracer implementation being used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then either add the initialization of the tracer to the Spring configuration,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;  &amp;lt;bean id=&quot;tracer&quot; class=&quot;...&quot;/&amp;gt;

  &amp;lt;bean id=&quot;ottracer&quot; class=&quot;org.apache.camel.opentracing.OpenTracingTracer&quot;&amp;gt;
    &amp;lt;property name=&quot;tracer&quot; ref=&quot;tracer&quot;/&amp;gt;
  &amp;lt;/bean&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or create an observer on the &lt;code&gt;CamelContextStartingEvent&lt;/code&gt; to trigger the initialization of the tracer,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@ContextName(&quot;....&quot;)
public class MyApplication {
    public void setupCamel(@Observes CamelContextStartingEvent event) {
	// Location for initializing the Tracer if not implicitly loaded
        OpenTracingTracer ottracer = new OpenTracingTracer();
        ottracer.init(event.getContext());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/apache/camel/tree/master/examples/camel-example-opentracing/client&quot;&gt;camel-opentracing example client application&lt;/a&gt; for an example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_spring_boot_annotation&quot;&gt;Spring Boot Annotation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The dependencies required to use OpenTracing in a Spring Boot application are simply&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;camel-opentracing-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and any other dependencies specific to the OpenTracing compliant Tracer implementation being used. Then simply annotate the application using &lt;code&gt;CamelOpenTracing&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@SpringBootApplication
@CamelOpenTracing
public class MyApplication {
    public static void main(String[] args) {
	// Location for initializing the Tracer if not implicitly loaded
        SpringApplication.run(MyApplication.class, args);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/apache/camel/tree/master/examples/camel-example-opentracing/service1&quot;&gt;camel-opentracing example service1 application&lt;/a&gt; for an example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_java_agent&quot;&gt;Java Agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach uses a &lt;code&gt;javaagent&lt;/code&gt; to handle the initialization, so does not require any code/configuration changes. The dependencies required are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;camel-opentracing&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.opentracing.contrib&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;opentracing-agent&amp;lt;/artifactId&amp;gt;
      &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Changes are also required in the &lt;code&gt;pom.xml&lt;/code&gt; to download the &lt;code&gt;opentracing-agent.jar&lt;/code&gt; and then execute the application supplying the java agent on the command line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/apache/camel/tree/master/examples/camel-example-opentracing/service2&quot;&gt;camel-opentracing example service2 application&lt;/a&gt; for an example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_instrumenting_some_examples&quot;&gt;Instrumenting Some Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section will show how two examples can be instrumented using two different OpenTracing compliant Tracer implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first is a new example introduced to demonstrate the three ways a Camel application can be instrumented with OpenTracing, and will be updated to use the &lt;a href=&quot;http://zipkin.io/&quot;&gt;Zipkin&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second shows how an existing example (Loan Broker JMS) can be instrumented using the &lt;a href=&quot;http://www.hawkular.org/hawkular-apm/&quot;&gt;Hawkular APM&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_camel_opentracing_example&quot;&gt;Camel OpenTracing Example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section will show how the new example, which uses a simple &lt;em&gt;logging&lt;/em&gt; tracer implementation by default, can be changed to use Zipkin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First edit each of the client/service1/service2 &lt;code&gt;pom.xml&lt;/code&gt; files to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add properties&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;  &amp;lt;properties&amp;gt;
    ...
    &amp;lt;version.brave.opentracing&amp;gt;0.19.0&amp;lt;/version.brave.opentracing&amp;gt;
    &amp;lt;version.zipkin.reporter&amp;gt;0.6.13&amp;lt;/version.zipkin.reporter&amp;gt;
  &amp;lt;/properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Replace the &lt;code&gt;camel-example-opentracing-loggingtracer&lt;/code&gt; dependency with:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.opentracing.brave&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;brave-opentracing&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${version.brave.opentracing}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.zipkin.reporter&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;zipkin-sender-urlconnection&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${version.zipkin.reporter}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then the following Java code changes are required:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Common code for ClientApplication, Service1Application and Service2Application&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import brave.opentracing.BraveTracer;
import io.opentracing.Tracer;
import zipkin.Span;
import zipkin.reporter.AsyncReporter;
import zipkin.reporter.Reporter;
import zipkin.reporter.urlconnection.URLConnectionSender;

....
    public static Tracer initTracer() {
        System.out.println(&quot;Using Zipkin Tracer&quot;);
        String zipkinServerUrl = String.format(&quot;%s/api/v1/spans&quot;, System.getenv(&quot;ZIPKIN_SERVER_URL&quot;));
        Reporter&amp;lt;Span&amp;gt; reporter = AsyncReporter.builder(URLConnectionSender.create(zipkinServerUrl)).build();
        brave.Tracer tracer = brave.Tracer.newBuilder().localServiceName(&quot;SERVICE_NAME&quot;).reporter(reporter).build();
        return BraveTracer.wrap(tracer);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Don&amp;#8217;t forget to change the &lt;code&gt;SERVICE_NAME&lt;/code&gt; to something appropriate (e.g. client, service1 and service2 respectively).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;ClientApplication.java&lt;/code&gt; add &lt;code&gt;ottracer.setTracer(initTracer())&lt;/code&gt;, e.g.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;        OpenTracingTracer ottracer = new OpenTracingTracer();
        ottracer.setTracer(initTracer());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;Service1Application.java&lt;/code&gt;, simply add the &lt;code&gt;@Bean&lt;/code&gt; annotation above the &lt;code&gt;initTracer()&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;Service2Application.java&lt;/code&gt;, add the tracer from &lt;code&gt;initTracer()&lt;/code&gt; to the registry, e.g.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;        Main main = new Main();
        main.bind(&quot;tracer&quot;, initTracer());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the changes have all been made, compile the example using &lt;code&gt;mvn compile&lt;/code&gt; from the &lt;code&gt;examples/camel-example-opentracing&lt;/code&gt; folder. Next step is to start the Zipkin server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -p 9411:9411 openzipkin/zipkin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then follow the instructions in the README.md for running the three applications. Before running each command, you will need to run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export ZIPKIN_SERVER_URL=http://localhost:9411&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the example has executed, start up the &lt;a href=&quot;http://localhost:9411/&quot;&gt;Zipkin UI&lt;/a&gt; in a brower. Select the &lt;code&gt;client&lt;/code&gt; service and you should see some traces:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-24-camel-opentracing-example-zipkin.png&quot; alt=&quot;2017 03 24 camel opentracing example zipkin&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2: Zipkin trace instance showing communication between client, service1 and service2&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_camel_loan_broker_jms_example&quot;&gt;Camel Loan Broker JMS Example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The standard example can be found in &lt;code&gt;examples/camel-example-loan-broker-jms&lt;/code&gt; folder within the Apache Camel source code. To enable tracing, against the Hawkular APM server, you need to edit the &lt;code&gt;pom.xml&lt;/code&gt; based on the
&lt;a href=&quot;/data/blog/2017/2017-03-24-loanbroker-apm.patch&quot;&gt;differences shown here&lt;/a&gt;
. This patch file can be used to quickly update the example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These differences can be broken down into three main changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added dependencies, including the &lt;code&gt;camel-opentracing&lt;/code&gt; component, &lt;code&gt;opentracing-agent&lt;/code&gt; and &lt;code&gt;hawkular-apm&lt;/code&gt; (OpenTracing client and REST client publisher)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieval of the &lt;code&gt;opentracing-agent.jar&lt;/code&gt;, which is placed in a local &lt;code&gt;lib&lt;/code&gt; folder for subsequent use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Changes to the &lt;code&gt;exec-maven-plugin&lt;/code&gt; configuration to enable the services to be started with the &lt;code&gt;opentracing-agent.jar&lt;/code&gt; (using &lt;code&gt;mvn exec:exec&lt;/code&gt; instead of &lt;code&gt;mvn exec:java&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To try out the example, it is first necessary to start the Hawkular APM server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -p 8180:8080 jboss/hawkular-apm-server-dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step is to open up two command windows and setup the environment variables in each:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export HAWKULAR_APM_USERNAME=admin
export HAWKULAR_APM_PASSWORD=password
export HAWKULAR_APM_URI=http://localhost:8180&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then run the following in the first window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn compile
mvn exec:java -PQueue.LoanBroker&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once fully started, then run the following in the second window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn exec:java -PQueue.Client&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the client has finished, open a &lt;a href=&quot;http://localhost:8180&quot;&gt;browser window&lt;/a&gt; and log in using username &lt;code&gt;admin&lt;/code&gt; password &lt;code&gt;password&lt;/code&gt;, and view the &lt;em&gt;Distributed Tracing&lt;/em&gt; page to view the dependencies between the JMS endpoints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-24-camel-loanbroker-jms-dependencies.png&quot; alt=&quot;2017 03 24 camel loanbroker jms dependencies&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3: Service endpoint dependencies for the loan broker JMS example&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selecting the &lt;em&gt;Show 1 Instance(s) Details&lt;/em&gt; button will show the trace instance shown in Figure 1 above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post has shown how OpenTracing can be used to provide distributed tracing capabilities for Camel applications. This capability will be introduced in version 2.19 of Apache Camel, but we would encourage anyone interested in this functionality to obtain a snapshot version to try it out. If you find any issues, or would like additional capabilities prior to the release, then please &lt;a href=&quot;http://www.hawkular.org/community/docs/getting-involved/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For any Apache Camel users currently using the &lt;code&gt;camel-zipkin&lt;/code&gt; component we would encourage you to try out the new &lt;code&gt;camel-opentracing&lt;/code&gt; component with the &lt;code&gt;brave-opentracing&lt;/code&gt; bridge.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Introducing Hawkular Java Agent</title>
      <link>http://www.hawkular.org/blog/2017/03/24/hawkular-java-agent.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/03/24/hawkular-java-agent.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new Hawkular Agent has been published.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on the Hawkular WildFly Agent, this new agent - the &lt;strong&gt;Hawkular Java Agent&lt;/strong&gt; - has an easier deployment model.
Unlike the Hawkular WildFly Agent, the Hawkular Java Agent does not need to be deployed inside an EAP or WildFly container.
It runs as a simple Java Agent in any JVM.
It also is configured by an independent YAML file, not within a WildFly standalone.xml configuration file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install the Hawkular Java Agent, you simply pass in a &lt;code&gt;-javaagent&lt;/code&gt; JVM command line argument to your Java or JVM application start command.
You must have the agent jar
(&lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/agent/hawkular-javaagent/&quot;&gt;&lt;code&gt;hawkular-javaagent-#.#.#.jar&lt;/code&gt;&lt;/a&gt;)
and its YAML configuration file located somewhere on your file system, and pass in an argument such as this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;-javaagent:hawkular-javaagent-*.jar=config=hawkular-javaagent-config.yaml,delay=60&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, make sure the path names point to the correct Hawkular Java Agent jar and its configuration file.
The &lt;code&gt;delay&lt;/code&gt; option tells the agent to delay its start up the given number of seconds.
This is useful to give your main application time to start up before the agent starts monitoring it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_installing_inside_a_wildfly_or_eap_server&quot;&gt;Installing Inside a WildFly or EAP Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is recommended you copy the Hawkular Java Agent jar to the WildFly/EAP &lt;code&gt;bin/&lt;/code&gt; directory and its configuration file
to the &lt;code&gt;standalone/configuration&lt;/code&gt; directory, but their locations really do not matter so long as you refer to their
proper file paths in the &lt;code&gt;-javaagent&lt;/code&gt; command line argument
(e.g. &lt;code&gt;-javaagent:&amp;lt;path-to-jar&amp;gt;=config=&amp;lt;path-to-config-file&amp;gt;,delay=60&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Due to the way the logging implementations are loaded, you must change your WildFly/EAP server&amp;#8217;s &lt;code&gt;standalone.conf&lt;/code&gt; file slightly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;# Hawkular Java Agent: Add &quot;org.jboss.logmanager&quot; to the JBoss Modules system packages
if [ &quot;x$JBOSS_MODULES_SYSTEM_PKGS&quot; = &quot;x&quot; ]; then
   JBOSS_MODULES_SYSTEM_PKGS=&quot;org.jboss.byteman,org.jboss.logmanager&quot;
fi

# Hawkular Java Agent:
#   Explicitly tell the VM to use the JBoss Log Manager via -Djava.util.logging.manager system property.
#   Use the -javaagent VM option to load the Hawkular Java Agent with its config file.
JAVA_OPTS=&quot;$JAVA_OPTS -Djava.util.logging.manager=org.jboss.logmanager.LogManager -javaagent:$JBOSS_HOME/bin/hawkular-javaagent-*.jar=config=$JBOSS_HOME/standalone/configuration/hawkular-javaagent-config.yaml,delay=60&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular Java Agent is configured with a YAML configuration file, though if you have used the Hawkular WildFly Agent,
the YAML configuration properties will look familiar. The configuration model and the names themselves closely mimic that of the
Hawkular WildFly Agent standalone.xml configuration settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an example configuration that instructs the Hawkular Java Agent to monitor a EAP 7.0 or 7.1 server, see &lt;a href=&quot;https://github.com/hawkular/hawkular-agent/blob/master/hawkular-javaagent/src/test/resources/real-config.yaml&quot;&gt;this config file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an example configuration that instructs the Hawkular Java Agent to monitor a simple JMX application, see &lt;a href=&quot;https://github.com/hawkular/hawkular-agent/blob/master/hawkular-javaagent/src/test/resources/real-config-jmx.yaml&quot;&gt;this config file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Adjusting sampling rates for Hawkular APM on OpenShift</title>
      <link>http://www.hawkular.org/blog/2017/03/22/apm-adjusting-sampling-rate.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/03/22/apm-adjusting-sampling-rate.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When doing distributed tracing of a busy application, it&amp;#8217;s a good practice
to limit the amount of data being collected or stored. The techniques for that
are diverse, ranging from a simple &quot;percentage based sampling&quot; of the
incoming requests, up to complex heuristics to keep/discard traces based on the
code path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-22-teaser.png&quot; alt=&quot;Final result&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s also a good practice to empower the admin, or an automated monitoring system,
with the capability of adjusting the sampling based on the current conditions.
For instance, we&amp;#8217;d probably want to get more traces from a
&lt;a href=&quot;/blog/2017/02/13/monitoring-canary-deployments.html&quot;&gt;newly deployed version&lt;/a&gt;
of an existing application, as we might want to compare the performance and adjust
the percentage in steps. Or even, we want more information from an application
that we suspect to be behaving badly. Similarly, if we are experiencing
expected traffic peaks and need every resource available, we might enable tracing
only to a small percentage of the incoming requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the simple scenario, let&amp;#8217;s call it &quot;percentage based sampling&quot;, we have a few
alternatives on how to implement it:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_application_based_decision&quot;&gt;Application-based decision&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this scenario, we embed the logic into the application, using the percentage
as the probability a random number is within a range. In other words: 20% sampling
would be 20% chance that a number is lower or equal to 2 on a range of 1-10.
Anything more complex than that would be &quot;too much&quot; for our scenario.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As hinted before, we want to externalize the percentage so that an external
actor can change this. One solution is to store this percentage number into an
environment variable on the Deployment Configuration (DC). This will, however,
rollout a new deployment after every change, which might not be desirable in some
scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another solution is to externalize this into a Configuration Map (ConfigMap),
but then, we also need to let our application listen to events related to this
ConfigMap. For a microservice, we might end up with a bunch of unrelated
dependencies, just to decide whether or not to trace a request.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_openshift_based_decision&quot;&gt;OpenShift-based decision&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this scenario, we delegate the decision to our runtime environment. Similar
to a simple A/B testing scenario, our deployment architecture would allow for
quick changes in the routing decision. It does require a simple change to our
application, but it&amp;#8217;s a small compromise for the benefits it provides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that, we&amp;#8217;ll use one single Image Stream (&lt;code&gt;is&lt;/code&gt;) with our code, two Deployment
Configurations (&lt;code&gt;dc&lt;/code&gt;), two Services (&lt;code&gt;svc&lt;/code&gt;) and one Route object. Each one of our
&lt;code&gt;dc&lt;/code&gt; objects would have a different value for an environment variable called
&lt;code&gt;TRACER_ENABLED&lt;/code&gt;. Each &lt;code&gt;svc&lt;/code&gt; has its own &lt;code&gt;dc&lt;/code&gt;, and the router sends a
percentage of the requests to each of the &lt;code&gt;svc&lt;/code&gt; instances. The main advantage of
this approach is that the application image is the same for both &lt;code&gt;tracing-enabled&lt;/code&gt;
and &lt;code&gt;tracing-disabled&lt;/code&gt; scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_doing_it&quot; class=&quot;sect0&quot;&gt;Doing it!&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enough talk, let&amp;#8217;s start doing it. The first step is to create an OpenShift
cluster. The following commands will give us a recent version of OpenShift Origin
and will deploy Hawkular APM on it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc cluster up --version=latest
$ oc create -f https://raw.githubusercontent.com/jboss-dockerfiles/hawkular-apm/master/openshift-templates/hawkular-apm-server-deployment.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll now bootstrap a vert.x application from scratch via
&lt;a href=&quot;http://start.prod-preview.openshift.io/&quot;&gt;Obsidian Toaster&lt;/a&gt;. For our example,
click on &quot;&amp;#8230;&amp;#8203; selecting a runtime project framework&quot;, select &quot;Vert.x&quot; and give
it a name like &lt;code&gt;conditional-tracer&lt;/code&gt; (leave the package name as &lt;code&gt;com.example&lt;/code&gt;
and the version as &lt;code&gt;1.0.0-SNAPSHOT&lt;/code&gt;). On the next step, set the Vert.x version
to &lt;code&gt;3.3.3&lt;/code&gt; and select &lt;code&gt;Vert.x Web&lt;/code&gt;. Scroll down the list and click &lt;code&gt;Finish&lt;/code&gt; and
download the ZIP file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Obsidian Toaster is still in alpha. If it&amp;#8217;s not working for some reason,
we have a ZIP file ready for you to download link:
&lt;a href=&quot;/data/blog/2017/2017-03-22-conditional-tracer.zip&quot;&gt;conditional-tracer.zip&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s add our Hawkular APM dependencies to our new project by adding the following
lines to the &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.hawkular.apm&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;hawkular-apm-trace-publisher-rest-client&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.14.2.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.hawkular.apm&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;hawkular-apm-client-opentracing&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.14.2.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;jackson-core&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;jackson-annotations&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
we need to override the Jackson dependencies because of incompatibilities
between the version Hawkular APM uses and the one Vert.x uses.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now remove the &lt;code&gt;src/main/fabric8/svc.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ rm src/main/fabric8/svc.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll create two service files instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/fabric8/no-tracer-svc.yml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: v1
kind: Service
metadata:
  name: conditional-tracer-disabled
  labels:
    tracer: disabled
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    group: com.example
    project: conditional-tracer
    tracer: disabled
  type: ClusterIP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/fabric8/tracer-svc.yml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: v1
kind: Service
metadata:
  name: conditional-tracer-enabled
  labels:
    tracer: enabled
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    group: com.example
    project: conditional-tracer
    tracer: enabled
  type: ClusterIP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now create our two &lt;code&gt;dc&lt;/code&gt; objects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/fabric8/no-tracer-dc.yml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    group: com.example
    project: conditional-tracer
    tracer: disabled
  name: conditional-tracer-disabled
spec:
  replicas: 1
  selector:
    group: com.example
    project: conditional-tracer
    tracer: disabled
  template:
    metadata:
      labels:
        group: com.example
        project: conditional-tracer
        tracer: disabled
    spec:
      containers:
      - env:
        - name: HAWKULAR_APM_URI
          value: http://hawkular-apm
        - name: HAWKULAR_APM_USERNAME
          value: admin
        - name: HAWKULAR_APM_PASSWORD
          value: password
        - name: TRACER_ENABLED
          value: false
        - name: JAVA_APP_DIR
          value: /deployments
        - name: JAVA_MAIN_CLASS
          value: io.vertx.core.Launcher
        name: java-exec
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
      dnsPolicy: ClusterFirst
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - java-exec
      from:
        kind: ImageStreamTag
        name: conditional-tracer:latest
    type: ImageChange&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/fabric8/tracer-dc.yml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    group: com.example
    project: conditional-tracer
    tracer: enabled
  name: conditional-tracer-enabled
spec:
  replicas: 1
  selector:
    group: com.example
    project: conditional-tracer
    tracer: enabled
  template:
    metadata:
      labels:
        group: com.example
        project: conditional-tracer
        tracer: enabled
    spec:
      containers:
      - env:
        - name: HAWKULAR_APM_URI
          value: http://hawkular-apm
        - name: HAWKULAR_APM_USERNAME
          value: admin
        - name: HAWKULAR_APM_PASSWORD
          value: password
        - name: TRACER_ENABLED
          value: true
        - name: JAVA_APP_DIR
          value: /deployments
        - name: JAVA_MAIN_CLASS
          value: io.vertx.core.Launcher
        name: java-exec
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
      dnsPolicy: ClusterFirst
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - java-exec
      from:
        kind: ImageStreamTag
        name: conditional-tracer:latest
    type: ImageChange&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, we change our &lt;code&gt;route.yml&lt;/code&gt; to alternate the requests among the
services:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/fabric8/route.yml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Route
metadata:
  name: conditional-tracer
spec:
  alternateBackends:
  - kind: Service
    name: conditional-tracer-disabled
    weight: 80
  to:
    kind: Service
    name: conditional-tracer-enabled
    weight: 20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only remaining change is within our Java code, to use a &lt;code&gt;NoopTracer&lt;/code&gt; by
default, using a concrete tracer (&lt;code&gt;APMTracer&lt;/code&gt;) if the environment variable
&lt;code&gt;TRACER_ENABLED&lt;/code&gt; parses to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/java/com/example/MainVerticle.java&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MainVerticle extends AbstractVerticle {
    private Tracer tracer = NoopTracerFactory.create();

    @Override
    public void start() {
        boolean tracerEnabled = Boolean.parseBoolean(System.getenv(&quot;TRACER_ENABLED&quot;));
        if (tracerEnabled) {
            tracer = new APMTracer();
        }
        vertx.createHttpServer()
                .requestHandler((req) -&amp;gt; {
                    Span span = tracer.buildSpan(&quot;hello-world-request&quot;).start();
                    span.setTag(&quot;enabled&quot;, tracerEnabled);
                    req.response().end(String.format(&quot;Hello World! Are we tracing this request? %s&quot;, System.getenv(&quot;TRACER_ENABLED&quot;)));
                    span.finish();
                })
                .listen(8080);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, we are ready to test it! As we already have an OpenShift cluster
running with our Hawkular APM server, we just need to run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ mvn clean fabric8:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the build finishes running, we should see the following on OpenShift&amp;#8217;s Web
Console:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-22-final-result.png&quot; alt=&quot;Final result&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To check whether our tracing is working, we can use a script like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ export URL=&quot;http://conditional-tracer-myproject.192.168.2.107.xip.io&quot;
$ for i in `seq 1 10` ; do curl ${URL} 2&amp;gt;/dev/null | awk &apos;{print $NF}&apos; ; done | sort | uniq -c&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An output similar to this one should be printed out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;8 false
2 true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that 8 didn&amp;#8217;t have their traces published and two requests had
their traces published to Hawkular APM. You can check that by logging into Hawkular
APM (username: &lt;code&gt;admin&lt;/code&gt;, password: &lt;code&gt;password&lt;/code&gt;) and looking into the
&lt;code&gt;Distributed Tracing&lt;/code&gt; screen. There should be only two traces there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You might be tempted to try opening the URL in your browser and hitting
refresh, but you&amp;#8217;ll notice that the OpenShift router tries to send you to the same
backend service all the time. For this reason, it makes more sense to test on
the command line with &lt;code&gt;curl&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From this point and on, we can adjust the percentage by changing the route. One
way to do that is by issuing the command &lt;code&gt;oc edit route conditional-tracer&lt;/code&gt;,
or by navigating on the UI to &lt;code&gt;Applications - Routes - conditional-tracer -
Actions - Edit&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-03-22-edit-route.png&quot; alt=&quot;Final result&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wrapping_up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deciding whether a transaction should be traced or not is a decision that should
be outsourced as much as possible to the underlying Tracer, possibly with data
coming from different sources. Having a simple switch on the code loading the
Tracer, however, might prove invaluable to admins in determined situations.
Given the simplicity of this solution, there&amp;#8217;s no reason not to have it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full source code for this example can be found at
&lt;a href=&quot;https://github.com/jpkrohling/conditional-tracer&quot;&gt;github.com/jpkrohling/conditional-tracer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Distributed Tracing Workshop and OpenTracing Collaboration</title>
      <link>http://www.hawkular.org/blog/2017/03/15/hawkular-opentracing-otsc.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/03/15/hawkular-opentracing-otsc.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The distributed tracing workshop is organized by the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/distributed-tracing&quot;&gt;Distributed Tracing Workgroup&lt;/a&gt;
and takes place approximately once a year. This time it was 18th-19th February in Berlin. It was a pleasure
to be there with people from various companies and share ideas and a common goal to improve distributed tracing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_agenda&quot;&gt;Agenda&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agenda covered various hot topics like in-process context propagation, proposal for trace context header, state
of OpenZipkin ecosystem and the latest happenings in OpenTracing. There were also research presentations by
Jonathan Mace from Brown University about Baggage protocol and Baggage buffers. The workshop also included
product presentations by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instana&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Datadog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Amazon X-Ray&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jaeger by Uber&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was great to see how other projects present data to end users and what type of higher level analysis they focus on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We discussed many things, and here are my main takeaways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Key upcoming changes in OpenTracing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Formal project organization called OpenTracing Specification Council (keep reading).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clarification between logging, metrics and tracing. The discussion continues in &lt;a href=&quot;https://github.com/opentracing/specification/pull/46&quot;&gt;specification/pull/46&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In-process context propagation. This feature will probably be the biggest change in the next OpenTracing
version. It should solve inconvenient passing of parent context. Users would just start new span and if there
is a parent available it will be automatically linked.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Trace context propagation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Currently there are no standard headers for passing trace context. Several tracing systems adopted
OpenZipkin&amp;#8217;s &lt;a href=&quot;https://github.com/openzipkin/b3-propagation&quot;&gt;B3 Propagation&lt;/a&gt;. Standardization of context header
should help with concerns like CORS and linking together traces between different service providers.
Proposed &lt;a href=&quot;https://docs.google.com/document/d/1Mrw7hxVAkj7h98hvgRixDt1RrEJ5fsqqddPofIHRVvI/edit&quot;&gt;document&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_on_opentracing_specification_council&quot;&gt;Hawkular on OpenTracing Specification Council!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am also happy to announce that the Hawkular project is part of the
&lt;a href=&quot;https://github.com/opentracing/specification/blob/master/project_organization.md&quot;&gt;OpenTracing Specification Council&lt;/a&gt; (OTSC).
This more formal organization structure will help with project growth and ensure that all major constituencies
are involved. There will be regular calls to discuss priorities for OpenTracing standard and project, strategize around
third-party project integrations and offer tie-breaking votes for issues where consensus among the larger community has
proven elusive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenTracing project organization: &lt;a href=&quot;https://github.com/opentracing/specification/blob/master/project_organization.md&quot; class=&quot;bare&quot;&gt;https://github.com/opentracing/specification/blob/master/project_organization.md&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trace context propagation proposal: &lt;a href=&quot;https://docs.google.com/document/d/1Mrw7hxVAkj7h98hvgRixDt1RrEJ5fsqqddPofIHRVvI/edit?ts=58767913&quot; class=&quot;bare&quot;&gt;https://docs.google.com/document/d/1Mrw7hxVAkj7h98hvgRixDt1RrEJ5fsqqddPofIHRVvI/edit?ts=58767913&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workshop agenda: &lt;a href=&quot;https://docs.google.com/document/d/16qNbn6IU43FuNMIie0rgWswIjWUCZUU0yNHxeR1vlRk/edit#heading=h.yt8qfxmai1sh&quot; class=&quot;bare&quot;&gt;https://docs.google.com/document/d/16qNbn6IU43FuNMIie0rgWswIjWUCZUU0yNHxeR1vlRk/edit#heading=h.yt8qfxmai1sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workshop notes: &lt;a href=&quot;https://docs.google.com/document/d/16mKbo6pWKHq30KvYYVSqo6c8uTOTkNLDSgjKwUs1PGs&quot; class=&quot;bare&quot;&gt;https://docs.google.com/document/d/16mKbo6pWKHq30KvYYVSqo6c8uTOTkNLDSgjKwUs1PGs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to Adrian Cole for organizing it and also to all attendees for sharing great ideas and knowledge
around distributed tracing. Do not forget to join the group and be informed about upcoming events!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Alerting: Tutorial Now Available!</title>
      <link>http://www.hawkular.org/blog/2017/03/14/hawkular-alerting-tutorial.html</link>
      <author>noreply@hawkular.org (Jay Shaughnessy)</author>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/03/14/hawkular-alerting-tutorial.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting is a pluggable, API-driven component for adding alerting to your application or tool.  It&amp;#8217;s one of the many &lt;a href=&quot;http://hawkular.org&quot;&gt;Hawkular&lt;/a&gt; offerings for monitoring and management.  To help quick-start new users, and as a reference for current users, we&amp;#8217;ve released the first five lessons of a new tutorial, with more to follow.  It&amp;#8217;s a great way to hit the ground running.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_for_git_users&quot;&gt;For Git Users:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git clone https://github.com/hawkular/hawkular-alerts.git
cd hawkular-alerts/examples/tutorial&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_for_others&quot;&gt;For Others:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Click this link to visit &lt;a href=&quot;http://github.com/hawkular/hawkular-alerts&quot;&gt;Hawkular Alerting on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;em&gt;Clone or download&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;em&gt;Download ZIP&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;unzip hawkular-alerts-master.zip
cd hawkular-alerts/examples/tutorial&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_for_everyone&quot;&gt;For Everyone:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start with the README.adoc. If you don&amp;#8217;t have an asciidoc extension in your browser you can read the rendered README &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/examples/tutorial/README.adoc&quot;&gt;directly from GitHub&lt;/a&gt;.  From here just click links in the document to proceed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting has several deployment options, it can be deployed standalone, or embedded in Hawkular Metrics, or as part of Hawkular Services.  The tutorial drives off of a docker container running alerting as part of Hawkular Metrics, generating alerts off of incoming metric data.  The first lesson will help you get set up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try it and let us know how it goes! If you have any questions or want to share your thoughts, join us on IRC at &lt;a href=&quot;irc://irc.freenode.org/#hawkular&quot;&gt;#hawkular on freenode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.25.0 - Release</title>
      <link>http://www.hawkular.org/blog/2017/03/07/hawkular-metrics-0.25.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 7 Mar 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/03/07/hawkular-metrics-0.25.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.25.0 of Hawkular Metrics. This release is anchored by general stability improvements and enhanced query capabilities for the external metrics alerter.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;External Metrics Alerter - Enhancements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Both syntax and query capabilities have been revamped to allow defining conditions using flexible expressions with embedded stats queries&lt;/li&gt;
      &lt;li&gt;The ExternalCondition expression is now JSON and has support for the new tag query language&lt;/li&gt;
      &lt;li&gt;The full documentation about this feature can be found in the &lt;a href=&quot;http://www.hawkular.org/hawkular-metrics/docs/user-guide/#_alerting&quot;&gt;Alerting section&lt;/a&gt; of the &lt;a href=&quot;http://www.hawkular.org/hawkular-metrics/docs/user-guide/&quot;&gt;user guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;For more details please see: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-566&quot;&gt;HWKMETRICS-566&lt;/a&gt; and &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/pull/727&quot;&gt;Pull Request 727&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dropwizard-Metrics - Merged&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The &lt;a href=&quot;https://github.com/hawkular/hawkular-dropwizard-reporter&quot;&gt;Dropwizard-Metrics reporter&lt;/a&gt; has been merged into the Metrics repository in &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/tree/44677cc5d6267e738ea51bdd9a37be062ca1b8c2/clients/dropwizard&quot;&gt;clients/dropwizard&lt;/a&gt; module&lt;/li&gt;
      &lt;li&gt;The &lt;a href=&quot;https://github.com/hawkular/hawkular-dropwizard-reporter&quot;&gt;old repository&lt;/a&gt; is decommissioned, all new development will happen in the Metrics project&lt;/li&gt;
      &lt;li&gt;This was done to simplify the compatibility matrix between the reporter and Hawkular Metrics REST API; going forward they will have identical versions. Furthermore, the compatibility is now tested via continuous integration tests.&lt;/li&gt;
      &lt;li&gt;Please use the new maven artifact &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/hawkular-dropwizard-reporter/0.25.0.Final/&quot;&gt;hawkular-dropwizard-reporter&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;For more details please see: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-585&quot;&gt;HWKMETRICS-585&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tag Query Language - Enhancements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The tag query language now supports the dot character in the tag name. The list of allowed characters is &lt;code&gt;a-zA-Z_0-9.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;The query language allows regex matching for tag values but not tag names&lt;/li&gt;
      &lt;li&gt;This allows translating JSON-like tag structures into Hawkular Metrics tags and query using the new tag query language&lt;/li&gt;
      &lt;li&gt;For example, a tag structure like &lt;code&gt;[tag.subtag1: value1, tag.subtag2.subsubtag1: value2]&lt;/code&gt; is now queriable via the tag query language with queries like &lt;code&gt;tag.subtag1 = value1&lt;/code&gt; or &lt;code&gt;tag.subtag2.subsubtag1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;For more details please see: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-611&quot;&gt;HWKMETRICS-611&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;REST API - Request Logging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;It is now possible to enable detailed logging for all REST API requests&lt;/li&gt;
      &lt;li&gt;Two properties have been added to enable this features: &lt;code&gt;hawkular.metrics.request.logging.level&lt;/code&gt; to enable logging for all read requests and &lt;code&gt;hawkular.metrics.request.logging.level.writes&lt;/code&gt; to enable logging for write requests&lt;/li&gt;
      &lt;li&gt;By default this feature is disabled, to enable just set the log level via each property&lt;/li&gt;
      &lt;li&gt;For more details please see: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-589&quot;&gt;HWKMETRICS-589&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Here is a sample log:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;INFO  [org.hawkular.metrics.api.jaxrs.util.RequestLoggingFilter] (default task-49)
REST API request:
--------------------------------------
path: /metrics
segments: [metrics]
method: GET
query parameters: {type=[availability]}
Tenant: T9a116f18-28cf-41b3-8ff8-c9752ac60e26232
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Other Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Automatically fix schema issues that occur when the server is restarted during initial schema installation (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-594&quot;&gt;HWKMETRICS-594&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Metric data points inserts have been optimized to use token ranges for Cassandra writes (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-599&quot;&gt;HWKMETRICS-599&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Alerting - Included&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/projects/HWKALERTS/versions/12333651&quot;&gt;1.5.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Examples&lt;/a&gt;, &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.25.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.25.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS/versions/12333676&quot;&gt;https://issues.jboss.org/projects/HWKMETRICS/versions/12333676&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Processing Hawkular-Metrics data with Python Pandas</title>
      <link>http://www.hawkular.org/blog/2017/02/22/pandas-and-hawkular-metrics.html</link>
      <author>noreply@hawkular.org (Michael Burman)</author>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/02/22/pandas-and-hawkular-metrics.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Storing the time series is not worth much if we can&amp;#8217;t actually do something valuable with it. For some time, many data analytics have used Python tools to extract valuable information from the available data. Today, lets look at one of the popular options, &lt;a href=&quot;http://pandas.pydata.org&quot;&gt;Pandas&lt;/a&gt;. In this blog post I will show how to fetch data from the Hawkular-Metrics and turn it to a processable form for the Pandas and do something with the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a data, I&amp;#8217;ve taken some real world values from my current air-to-water heat pump and how it has functioned in some non-ideal circumstances. To make things more difficult, I&amp;#8217;ve started logging the information after there&amp;#8217;s been historical data already so the starting values are not from the same point of time. To make things a bit more complicated I&amp;#8217;ve also included some temperature values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets start by introducing a helper function and initialize pandas. You can install Pandas with &lt;code&gt;pip install pandas&lt;/code&gt; or with &lt;code&gt;dnf&lt;/code&gt; or &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np
import pandas as pd
from hawkular import *

c = HawkularMetricsClient(tenant_id=&apos;pandas_test&apos;, port=8080)

def read_hawkular(c, id):
    s = c.query_metric(MetricType.Gauge, id, fromEarliest=&apos;true&apos;)
    df2 = pd.DataFrame(s, columns=[&apos;timestamp&apos;, &apos;value&apos;])
    df2[&apos;timestamp&apos;] = pd.to_datetime(df2[&apos;timestamp&apos;], unit=&apos;ms&apos;)
    df2 = df2.set_index(&apos;timestamp&apos;)
    df2 = df2.rename(columns={&apos;value&apos;: id})
    return df2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, with the read_hawkular we can fetch data from the Hawkular-Metrics using the given id. I&amp;#8217;ve hardcoded Gauge as the metric type in this case as that&amp;#8217;s the type of the values we&amp;#8217;re processing today. We&amp;#8217;ll also make the id as the column name for these values and use the timestamp as our index. Pandas will automatically convert the values to float64 and with our hints use the timestamps as the indexing value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets insert some data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;c.push(MetricType.Gauge, &apos;pollucom.reading&apos;, 41955, timestamp=1487192074052)
c.push(MetricType.Gauge, &apos;meter.reading&apos;, 584.22, timestamp=1487192074145)
c.push(MetricType.Gauge, &apos;temperature.reading&apos;, 0.0, timestamp=1487192075645)

c.push(MetricType.Gauge, &apos;pollucom.reading&apos;, 42007, timestamp=1487272174104)
c.push(MetricType.Gauge, &apos;meter.reading&apos;, 606.41, timestamp=1487272174467)
c.push(MetricType.Gauge, &apos;temperature.reading&apos;, 1.6, timestamp=1487272176067)

c.push(MetricType.Gauge, &apos;pollucom.reading&apos;, 42075, timestamp=1487403934003)
c.push(MetricType.Gauge, &apos;meter.reading&apos;, 636.60, timestamp=1487403934732)
c.push(MetricType.Gauge, &apos;temperature.reading&apos;, 0.7, timestamp=1487403932678)

c.push(MetricType.Gauge, &apos;pollucom.reading&apos;, 42234, timestamp=1487663134340)
c.push(MetricType.Gauge, &apos;meter.reading&apos;, 702.29, timestamp=1487663134230)
c.push(MetricType.Gauge, &apos;temperature.reading&apos;, -3.3, timestamp=1487663134678)

c.push(MetricType.Gauge, &apos;pollucom.reading&apos;, 42296, timestamp=1487745987030)
c.push(MetricType.Gauge, &apos;meter.reading&apos;, 732.32, timestamp=1487745987575)
c.push(MetricType.Gauge, &apos;temperature.reading&apos;, -8.8, timestamp=1487745987976)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can already see from the data, we use millisecond precision when fetching the data and the timestamps have some variance in them. Now, using the previously defined function we will fetch the data to a Pandas DataFrame:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# Read the data

pollu = read_hawkular(c, &apos;pollucom.reading&apos;)
meter = read_hawkular(c, &apos;meter.reading&apos;)
temperature = read_hawkular(c, &apos;temperature.reading&apos;)

# Lets rename the columns

temperature = temperature.rename(columns={&apos;temperature.reading&apos;: &apos;temperature&apos;})
meter = meter.rename(columns={&apos;meter.reading&apos;: &apos;electricity&apos;})
pollu = pollu.rename(columns={&apos;pollucom.reading&apos;: &apos;heat&apos;})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Three distinct series are now stored in three distinct DataFrames. Combining them and looking at the data reveals something interesting:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;stats = pd.concat([pollu, meter, temperature]).sort_index()
&amp;gt;&amp;gt;&amp;gt; stats
                         electricity   heat  temperature
timestamp
2017-02-15 20:54:34.052          NaN  41955          NaN
2017-02-15 20:54:34.145       584.22    NaN          NaN
2017-02-15 20:54:35.645          NaN    NaN          0.0
2017-02-16 19:09:34.104          NaN  42007          NaN
2017-02-16 19:09:34.467       606.41    NaN          NaN
2017-02-16 19:09:36.067          NaN    NaN          1.6
2017-02-18 07:45:32.678          NaN    NaN          0.7
2017-02-18 07:45:34.003          NaN  42075          NaN
2017-02-18 07:45:34.732       636.60    NaN          NaN
2017-02-21 07:45:34.230       702.29    NaN          NaN
2017-02-21 07:45:34.340          NaN  42234          NaN
2017-02-21 07:45:34.678          NaN    NaN         -3.3
2017-02-22 06:46:27.030          NaN  42296          NaN
2017-02-22 06:46:27.575       732.32    NaN          NaN
2017-02-22 06:46:27.976          NaN    NaN         -8.8
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we see a very common problem for the time series processing. All the timestamps are close to each other, but they&amp;#8217;re not quite aligned. So we can&amp;#8217;t read from the same row what statistics we had for each value. If we wanted to fill the values from previous rows, we could do that easily with &lt;code&gt;fillna&lt;/code&gt; function of the Pandas. However, in this case it makes more sense to resample the data to a one-day buckets and then drop the duplicate rows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;stats = stats.resample(&apos;D&apos;, fill_method=&apos;ffill&apos;).drop_duplicates()

&amp;gt;&amp;gt;&amp;gt; stats
            electricity   heat  temperature
timestamp
2017-02-15       584.22  41955          0.0
2017-02-16       606.41  42007          1.6
2017-02-18       636.60  42075          0.7
2017-02-21       702.29  42234         -3.3
2017-02-22       732.32  42296         -8.8
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s much better. Now we can easily see the statistics for each day and how the counters had behaved. In this example it does not matter that we&amp;#8217;re missing data, but there&amp;#8217;s lots of tools in the Pandas to generate that missing data based on the rows we have. In this example, lets look at how to calculate from the values our coefficiency ratio (amount of heat generated divided by electricity used). We&amp;#8217;ll do this by taking the difference of previous row to the current row from both heat as well as electricity:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;stats[&apos;cop&apos;] = stats.diff().apply(lambda row: row[&apos;heat&apos;] / row[&apos;electricity&apos;], axis=1)

&amp;gt;&amp;gt;&amp;gt; stats
            electricity   heat  temperature       cop
timestamp
2017-02-15       584.22  41955          0.0       NaN
2017-02-16       606.41  42007          1.6  2.343398
2017-02-18       636.60  42075          0.7  2.252401
2017-02-21       702.29  42234         -3.3  2.420460
2017-02-22       732.32  42296         -8.8  2.064602
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first row shows &lt;code&gt;NaN&lt;/code&gt; as we don&amp;#8217;t have any information prior to it for calculation. The coefficiency numbers show something worrysome, they don&amp;#8217;t seem to follow a pattern normally associated with them (higher temperature gives higher coefficiency). For a simple check, lets check the Pearson correlation between avg temperature and coefficiency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; stats.temperature.corr(stats.cop)
0.65064171188572928
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll leave the interpretation to the viewer, but lets comment quickly that the number of datapoints is too low in this example to have a meaningful value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was a short example on how to get started with Pandas and Hawkular-Metrics, but even with it we were able to calculate how efficiently our heat pump was working and actually notice that it&amp;#8217;s working sub-optimally when temperature is high in this small sample scenario. The Pandas library gives multiple tools to process time series to a form that they can be used for further analytical processing, including but not limited to resampling, shifting, frequency conversions and periodic calculations. After modifying the data it can be easily further processed with other Python tools and even sent back to the Hawkular-Metrics in the processed form for storage purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Services 0.32.Final</title>
      <link>http://www.hawkular.org/blog/2017/02/15/hawkular-services-0.32-released.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/02/15/hawkular-services-0.32-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular services is a ready to run distribution of Hawkular-Metrics with Alerts, Inventory, the WildFly agent and other components.
The version &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.32.0.Final/hawkular-services-dist-0.32.0.Final.zip&quot;&gt;0.32.0.Final&lt;/a&gt; has just been released and is ready to be tested and integrated with other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_in_this_release&quot;&gt;What&amp;#8217;s in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes those changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Official docker images (see below)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agent version 0.27&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agent has a new flag &apos;immutable&apos;, that when set will prevent modifications of its config or running state altering operations. That flag can be set via &lt;code&gt;-Dhawkular.agent.immutable=true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular-Metrics version 0.24.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better support for running on OpenShift&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following video gives a walk-through of some of the features&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/hQqkwCoIDBA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is released every week on Tuesdays.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started&quot;&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started with Hawkular Services, &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.32.0.Final/hawkular-services-dist-0.32.0.Final.zip&quot;&gt;download the latest release&lt;/a&gt;, unzip it,
add a user and set the Agent to use the credentials for the user just added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be accomplished with the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export HAWKULAR_HOME=&quot;/path/to/hawkular-services&quot;
export HAWKULAR_USERNAME=&quot;jdoe&quot;
export HAWKULAR_PASSWORD=&quot;password&quot;

cd &quot;${HAWKULAR_HOME}&quot;
&quot;${HAWKULAR_HOME}/bin/add-user.sh&quot; \
  -a \
  -u &quot;${HAWKULAR_USERNAME}&quot; \
  -p &quot;${HAWKULAR_PASSWORD}&quot; \
  -g read-write,read-only
&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting the server, you need to have Cassandra 3.0.9 up and running with the RPC port enabled either via
setting the env variable of &lt;code&gt;CASSANDRA_START_RPC&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or by editing &lt;code&gt;cassandra.yml&lt;/code&gt; and setting it there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;# Whether to start the thrift rpc server.
start_rpc: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;ccm&lt;/code&gt; you can use this to update the config: &lt;code&gt;ccm updateconf &apos;start_rpc: true&apos;&lt;/code&gt;.
Another option is via &lt;code&gt;nodetool enablethrift&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_using_postgres&quot;&gt;Using Postgres&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use Postgres as backend you need to pass additional properties to the &lt;code&gt;standalone.sh&lt;/code&gt; command
above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; \
    -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD} \
    -Dhawkular.inventory.sql.jdbc.url=jdbc:postgresql://1.2.3.4:5432/hawkular \
    -Dhawkular.inventory.sql.jdbc.username=jdoe \
    -Dhawkular.inventory.sql.jdbc.password=password&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use a postgres database called &lt;em&gt;hawkular&lt;/em&gt; on host &lt;em&gt;1.2.3.4&lt;/em&gt; owned by a user &lt;em&gt;jdoe&lt;/em&gt; with a
 password of &lt;em&gt;password&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also
&lt;a href=&quot;http://www.hawkular.org/hawkular-services/docs/user-guide/inventory/index.html#configuration-properties&quot; class=&quot;bare&quot;&gt;http://www.hawkular.org/hawkular-services/docs/user-guide/inventory/index.html#configuration-properties&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_build_from_master_and_cassandra&quot;&gt;Build from master and Cassandra&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you build from master, you can pass &lt;code&gt;-Pembeddedc&lt;/code&gt; to get a distribution with embedded Cassandra for local development.
Similarly if you build via &lt;code&gt;-Pdev&lt;/code&gt; a default user of &lt;em&gt;jdoe/password&lt;/em&gt; will be installed and also be used with the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_use_grafana_with_hawkular_services&quot;&gt;Use Grafana with Hawkular-services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do now have a Grafana datasource to make it easier to connect to Hawkular-services from Grafana.
You can download it from &lt;a href=&quot;https://grafana.net/plugins/hawkular-datasource&quot;&gt;Grafana.net&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;website of the datasource tells more&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started_via_docker_builds&quot;&gt;Get started via Docker builds&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are official Docker images of the release available on
DockerHub at &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-services/&quot;&gt;Hawkular services&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;latest&lt;/code&gt; tag will always point to the latest release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;NOTE&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;There are also images with a &lt;code&gt;devel&lt;/code&gt; tag, which are pushed by internal CI on individual commits.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_unofficial_wildfly_agent&quot;&gt;Unofficial WildFly + agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also an instrumented WildFly server available at
&lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkfly/&quot;&gt;Instrumented WildFly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both images have been instrumented with the &lt;em&gt;jdoe/password&lt;/em&gt; user for the Hawkular server and the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&quot; class=&quot;bare&quot;&gt;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&lt;/a&gt; on some more
details about using those images.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Canary Releases with Hawkular APM</title>
      <link>http://www.hawkular.org/blog/2017/02/13/monitoring-canary-deployments.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/02/13/monitoring-canary-deployments.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our last release, &lt;a href=&quot;/blog/2017/02/04/hawkular-apm-service-deployments.html&quot;&gt;we built a Services screen&lt;/a&gt;
on top of a feature added a couple of releases ago, the &quot;service name&quot; and &quot;build
stamps&quot;. These properties can be specified as an environment variable or system
property, and are automatically detected when the monitored application runs on
OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-13-teaser.png&quot; alt=&quot;Bars comparing performance of different service versions&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we&amp;#8217;ll show you how to use that screen to monitor a Canary release
scenario. &lt;a href=&quot;https://martinfowler.com/bliki/CanaryRelease.html&quot;&gt;A Canary&lt;/a&gt; release
is a technique used to minimize downtime (and risk) between deployments by preparing
the new version on a completely different production environment and, once this new
version is ready to serve requests, redirect &lt;em&gt;some&lt;/em&gt; traffic from the &quot;old&quot; version
to the &quot;new&quot; version. If this new version looks good, it gradually replaces the
old version, eventually taking over all traffic. This technique builds on top of
the &lt;a href=&quot;https://martinfowler.com/bliki/BlueGreenDeployment.html&quot;&gt;Blue-Green&lt;/a&gt; deployment
technique.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_getting_the_example_running&quot;&gt;Getting the example running&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll use our &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples/vertx-opentracing&quot;&gt;Vert.x OpenTracing example&lt;/a&gt;
for this demo. First, let&amp;#8217;s deploy the example into OpenShift, along with Hawkular APM,
by running the following Ansible playbook:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ ansible-playbook vertx-opentracing.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few minutes, it should print out the address for the Order Manager microservice,
like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;TASK [Print out the order-manager address] *************************************
ok: [localhost] =&amp;gt; {
    &quot;msg&quot;: &quot;The hostname for the Order Manager service is: http://order-manager-order-manager.192.168.2.107.xip.io&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, change the &lt;code&gt;genorders.sh&lt;/code&gt; script, to use this host instead of the
original &lt;code&gt;&lt;a href=&quot;http://localhost:8180&quot; class=&quot;bare&quot;&gt;http://localhost:8180&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;curl&lt;/code&gt; command. It should then read:
&lt;code&gt;curl -X POST -H &quot;Content-Type: application/json&quot; -d &quot;$data&quot; &lt;a href=&quot;http://order-manager-order-manager.192.168.2.107.xip.io/orders&quot; class=&quot;bare&quot;&gt;http://order-manager-order-manager.192.168.2.107.xip.io/orders&lt;/a&gt;&lt;/code&gt;.
Note that your hostname might be different than our example. You can then run
the &lt;code&gt;genorders.sh&lt;/code&gt; script, which will simulate some random requests to the Order
Manager. The script will execute until it&amp;#8217;s cancelled with &lt;code&gt;Ctrl+C&lt;/code&gt;, and should
have an output similar to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;Creating an order for account=brian item=laptop quantity=3
{
  &quot;accountId&quot; : &quot;brian&quot;,
  &quot;itemId&quot; : &quot;laptop&quot;,
  &quot;quantity&quot; : 3,
  &quot;id&quot; : &quot;d3f09a97-6f87-45c5-98c8-b592b6beb501&quot;
}

Creating an order for account=sarah item=car quantity=4
Not account found

Creating an order for account=steve item=car quantity=2
{
  &quot;accountId&quot; : &quot;steve&quot;,
  &quot;itemId&quot; : &quot;car&quot;,
  &quot;quantity&quot; : 2,
  &quot;id&quot; : &quot;7f095b1e-94a2-4398-8480-01aaea43e021&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular APM should be located under the service name &lt;code&gt;hawkular-apm&lt;/code&gt;, so, the URL
follows the pattern: &lt;code&gt;&lt;a href=&quot;https://hawkular-apm-order-manager.YOUR-IP.xip.io&quot; class=&quot;bare&quot;&gt;https://hawkular-apm-order-manager.YOUR-IP.xip.io&lt;/a&gt;&lt;/code&gt;. Note
that you&amp;#8217;ll need to change the &lt;code&gt;YOUR-IP&lt;/code&gt; part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few minutes with our &lt;code&gt;genorders.sh&lt;/code&gt; script running, the following can be
seen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-13-initial-apm-screen-with-data.png&quot; alt=&quot;Hawkular APM Dashboard with Data&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s open the &lt;em&gt;Services&lt;/em&gt; tab, select the service &lt;em&gt;order-manager.account-manager&lt;/em&gt;
and the &lt;em&gt;order-manager.account-manager-1&lt;/em&gt; version. These names are derived automatically
from the service name and deployment number provided by OpenShift. Let&amp;#8217;s select
an &lt;em&gt;Aggregation Interval&lt;/em&gt; of 10 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-13-single-service.png&quot; alt=&quot;Hawkular APM Services Tab with One Service&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_introducing_the_blue_deployment_and_the_canary_release&quot;&gt;Introducing the Blue Deployment and the Canary Release&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we&amp;#8217;ll create a new build and new application for our &quot;Blue&quot; deployment. We
first set the current deployment to have 4 replicas, so that we&amp;#8217;ll have 80% of
the traffic going to the old version, and 20% going to the new one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd account-manager/
oc scale deploymentconfig account-manager --replicas=4
oc new-build --binary --name=account-manager-blue -l app=account-manager-blue
oc start-build account-manager-blue --from-dir=. --follow
oc new-app \
  account-manager-blue \
  -l app=account-manager-blue \
  HAWKULAR_APM_URI=&apos;http://hawkular-apm&apos; \
  HAWKULAR_APM_USERNAME=&apos;admin&apos; \
  HAWKULAR_APM_PASSWORD=&apos;password&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the expected output for the previous command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;--&amp;gt; Found image 3f61c6a (37 seconds old) in image stream account-manager-blue under tag &quot;latest&quot; for &quot;account-manager-blue&quot;

    * This image will be deployed in deployment config &quot;account-manager-blue&quot;
    * The image does not expose any ports - if you want to load balance or send traffic to this component
      you will need to create a service with &apos;expose dc/account-manager-blue --port=[port]&apos; later

--&amp;gt; Creating resources with label app=account-manager-blue ...
    deploymentconfig &quot;account-manager-blue&quot; created
--&amp;gt; Success
    Run &apos;oc status&apos; to view your app.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We should also have a new service displayed on OpenShift console. Note the new
&lt;em&gt;account-manager-blue&lt;/em&gt; deployment, with 1 pod.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-13-openshift-account-manager-services.png&quot; alt=&quot;OpenShift with Blue/Green deployments for Account Manager&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Account Manager microservice is a Vert.x Verticle, and reacts on messages sent
to &lt;code&gt;AccountManager.getAccount&lt;/code&gt;. As we are using a clustered event bus, our new
&lt;em&gt;account-manager-blue&lt;/em&gt; service will join the cluster and start replying to those
messages. The Vert.x clustered bus will take care of load balancing the processing
of the messages for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because of that, we should already have some data being captured and reported to
our Hawkular APM server. On the &lt;em&gt;Services&lt;/em&gt; screen, add the new service &lt;em&gt;order-manager.account-manager-blue&lt;/em&gt;,
version &lt;em&gt;order-manager.account-manager-blue-1&lt;/em&gt; to the graphic. It should then look similar
to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-13-account-manager-blue-added.png&quot; alt=&quot;Hawkular APM Services Tab with Blue and Green services&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We should see the bar for our &lt;em&gt;blue&lt;/em&gt; deployment (orange bar on the image) to be
around a quarter the size of the old version (blue bar on the image). As the number
of errors is in line with what we expect, we can now reduce the traffic to the old
version by adding more replicas to the new version and decreasing replicas from
the old one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc scale deploymentconfig account-manager-blue --replicas=3
oc scale deploymentconfig account-manager --replicas=2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s leave it running for a minute or so, and we should see that the new version
is now responsible for processing around 60% of the traffic, while the old version
is now processing around 40%. If it still looks good, we&amp;#8217;ll make it 80%/20%:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc scale deploymentconfig account-manager-blue --replicas=4
oc scale deploymentconfig account-manager --replicas=1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, we would want to decommission the old version:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc scale deploymentconfig account-manager-blue --replicas=5
oc scale deploymentconfig account-manager --replicas=0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s now simulate a new build for our &lt;em&gt;Account Manager&lt;/em&gt; microservice, to be deployed
on the &lt;em&gt;green&lt;/em&gt; service (&lt;em&gt;account-manager&lt;/em&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd account-manager/
oc start-build account-manager --from-dir=. --follow&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once it&amp;#8217;s finished, we can direct some of the traffic to this new version:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc scale deploymentconfig account-manager --replicas=1
oc scale deploymentconfig account-manager-blue --replicas=4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few seconds, we should see the new version as a valid option on our &lt;em&gt;Services&lt;/em&gt;
screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-13-new-version-available.png&quot; alt=&quot;New Green version&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s add it to the graphic, and watch the errors. If this version looks sane,
we can direct more traffic to it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc scale deploymentconfig account-manager --replicas=3
oc scale deploymentconfig account-manager-blue --replicas=2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And eventually, direct all traffic to it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc scale deploymentconfig account-manager --replicas=5
oc scale deploymentconfig account-manager-blue --replicas=0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the next screenshot, we can infer the following from the graphic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We started with 100% traffic on &lt;em&gt;order-manager.account-manager-1&lt;/em&gt; (green deployment, blue bar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We directed some traffic to &lt;em&gt;order-manager.account-manager-blue-1&lt;/em&gt; (blue deployment, orange bar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We switched off &lt;em&gt;order-manager.account-manager-1&lt;/em&gt; (green deployment, blue bar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We deployed the new version &lt;em&gt;order-manager.account-manager-2&lt;/em&gt; (green deployment, green bar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We directed some traffic to &lt;em&gt;order-manager.account-manager-2&lt;/em&gt; (green deployment, green bar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We switched off &lt;em&gt;order-manager.account-manager-blue-1&lt;/em&gt; (blue deployment, orange bar)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-13-final.png&quot; alt=&quot;Final Result&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_closing_notes&quot;&gt;Closing notes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a real world scenario, the manual steps we did would be automated, potentially
making your Continuous Deployment scripts read data from Hawkular APM in order
to decide whether to scale up or down a canary release. Thanks to Vert.x, we were
able to completely abstract the load balancer, controlling the percentage of traffic
by adjusting the number of replicas on the Green/Blue deployments, but it&amp;#8217;s also
possible to achieve similar effects with other stacks. The &lt;a href=&quot;http://bit.ly/msa-instructions&quot;&gt;OpenShift Hello World Microservices Architecture&lt;/a&gt;
shows another way this can be achieved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to OpenShift, we were able to instantly see the performance of new versions,
comparing it with previous versions. Outside of OpenShift, we would be able to get
the same effect by properly setting the environment variables &lt;em&gt;HAWKULAR_APM_SERVICE_NAME&lt;/em&gt;
and &lt;em&gt;HAWKULAR_APM_BUILDSTAMP&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try it out and let us know about your experiments! Should you face any issues, or
if you want to talk to us, join us at &lt;code&gt;#hawkular&lt;/code&gt; on &lt;code&gt;irc.freenode.net&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.24.0 - Release</title>
      <link>http://www.hawkular.org/blog/2017/02/08/hawkular-metrics-0.24.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Wed, 8 Feb 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/02/08/hawkular-metrics-0.24.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.24.0 of Hawkular Metrics. This release is anchored by a new tag query language and general stability improvements.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tag Query Language&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A query language was added to support complex constructs for tag based queries for metrics&lt;/li&gt;
      &lt;li&gt;The old tag query syntax is deprecated but can still be used; the new syntax takes precedence&lt;/li&gt;
      &lt;li&gt;The new syntax supports:
        &lt;ul&gt;
          &lt;li&gt;logical operators: &lt;code&gt;AND&lt;/code&gt;,&lt;code&gt;OR&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;equality operators: &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;value in array operators: &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;NOT IN&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;existential conditions:
            &lt;ul&gt;
              &lt;li&gt;tag without any operator is equivalent to &lt;code&gt;= &amp;#39;*&amp;#39;&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;tag preceded by the NOT operator matches only instances without the tag defined&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;all the values in between single quotes are treated as regex expressions&lt;/li&gt;
          &lt;li&gt;simple text values do not need single quotes&lt;/li&gt;
          &lt;li&gt;spaces before and after equality operators are not necessary&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;For more details please see: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/pull/725&quot;&gt;Pull Request 725&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-523&quot;&gt;HWKMETRICS-523&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Sample queries:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;a1 = &amp;#39;bcd&amp;#39; OR a2 != &amp;#39;efg&amp;#39;
a1=&amp;#39;bcd&amp;#39; OR a2!=&amp;#39;efg&amp;#39;
a1 = efg AND ( a2 = &amp;#39;hijk&amp;#39; OR a2 = &amp;#39;xyz&amp;#39; )
a1 = &amp;#39;efg&amp;#39; AND ( a2 IN [&amp;#39;hijk&amp;#39;, &amp;#39;xyz&amp;#39;] )
a1 = &amp;#39;efg&amp;#39; AND a2 NOT IN [&amp;#39;hijk&amp;#39;]
a1 = &amp;#39;d&amp;#39; OR ( a1 != &amp;#39;ab&amp;#39; AND ( c1 = &amp;#39;*&amp;#39; ) )
a1 OR a2
NOT a1 AND a2
a1 = &amp;#39;a&amp;#39; AND NOT b2
a1 = a AND NOT b2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Updated compaction strategies for data tables from size tiered compaction (STCS) to time window compaction (TWCS) (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-556&quot;&gt;HWKMETRICS-556&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Jobs now execute on RxJava&apos;s I/O scheduler thread pool&lt;br/&gt;(&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-579&quot;&gt;HWKMETRICS-579&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Administration&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The admin tenant is now configurable via &lt;code&gt;ADMIN_TENANT&lt;/code&gt; environment variable (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-572&quot;&gt;HWKMETRICS-572&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Internal metric collection is disabled by default (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-578&quot;&gt;HWKMETRICS-578&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Resolved a null pointer exception in DropWizardReporter due to admin tenant changes (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-577&quot;&gt;HWKMETRICS-577&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Job Scheduler&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Resolved an issue where the compression job would stop running after a few days (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-564&quot;&gt;HWKMETRICS-564&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Updated the job scheduler to renew job locks during job execution (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-570&quot;&gt;HWKMETRICS-570&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Updated the job scheduler to reacquire job lock after server restarts (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-583&quot;&gt;HWKMETRICS-583&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hawkular Alerting - Major Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Resolved several issues where schema upgrades were not applied after the initial schema install (&lt;a href=&quot;https://issues.jboss.org/browse/HWKALERTS-220&quot;&gt;HWKALERTS-220&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKALERTS-222&quot;&gt;HWKALERTS-222&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Alerting - Included&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/projects/HWKALERTS/versions/12333065&quot;&gt;1.5.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Examples&lt;/a&gt;, &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.24.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.24.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS/versions/12332966&quot;&gt;https://issues.jboss.org/projects/HWKMETRICS/versions/12332966&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics - 2017 Roadmap</title>
      <link>http://www.hawkular.org/blog/2017/02/07/hawkular-metrics-roadmap.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 7 Feb 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/02/07/hawkular-metrics-roadmap.html</guid>
      	<description>
	&lt;p&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just like last year, Hawkular Metrics contributors have been working for the past few weeks on the roadmap for the upcoming year. The goal is to give clarity on the project direction, serve as a planning tool for releases, and show our strong commitment to open source.&lt;/p&gt;
&lt;p&gt;For those not familiar with Hawkular Metrics, the project is a high performance and high availability storage engine for large volume metric data. Cassandra is the storage engine because of its flexible data model well suited for time-series data storage and linear scalability with no single point of failure. The distribution includes Hawkular Alerting, an alerts module responsible for defining conditions rules over data events and fire alerts that can be sent by several action plugins.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Review - 2016&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, let&apos;s review the progress against the roadmap set at the beginning of last year. Due to the competitive space for metrics, metrics storage, and alerting, the community had to constantly balance the plan execution while reacting to community requests. While the majority of goals set to accomplish were completed, there are some carried over to this year and some indefinitely postponed.&lt;/p&gt;
&lt;p&gt;The project was updated to run on Cassandra 3.x in May (&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.15.0&quot;&gt;release 0.15.0&lt;/a&gt;). The native Grafana integration was released in July (&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.17.0&quot;&gt;release 0.17.0&lt;/a&gt;) and it is now an &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;independent project&lt;/a&gt;. And lastly, we improved the developer support by creating distributions that include Metrics, Alerting and Cassandra pre-deployed inside Wildlfly to make it extremely simple to download and get the project running.&lt;/p&gt;
&lt;p&gt;The pre-computed aggregates were postponed to this year due to the major work done for compressing data at rest released in October (&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.20.0&quot;&gt;release 0.20.0&lt;/a&gt;). The histogram metrics were also carried-over to this year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Roadmap - 2017&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Administration &amp;amp; Management&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Add monitoring and management features for Cassandra and application server; the goal is to unify the configuration and management for Cassandra, Metrics and Alerting.&lt;/li&gt;
      &lt;li&gt;Provide diagnostics and error reports to administrators; automatic or on-demand, scan the setup and find errors to help debug difficult problems&lt;/li&gt;
      &lt;li&gt;Allow automatic scaling of both Cassandra and application servers via the HPA in OpenShifts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pre-computed &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-580s&quot;&gt;Aggregates&lt;/a&gt; (carry-over from 2016)&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Needed to support long term data storage and retrieval for high volume metrics&lt;/li&gt;
      &lt;li&gt;Single metrics roll-ups are also the foundation for pre-computed multi-metric aggregations, that goal is to work on this subsequent to single metric roll-ups&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Query Features&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Histogram metrics are fairly common in other time series databases. The plan is to add histogram metrics as a sub-metric to existing gauge metrics, analogous to what counter-rate metrics are counter metrics. It is common to do the calculations need for the histogram on the client side, but there are a lot of advantages to push the calculations to the server (carry-over from 2016)&lt;/li&gt;
      &lt;li&gt;Add query languages for both stats and tag based queries to enhance the query capabilities and simplify the API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Performance Improvements&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Improve the read (query, stats, aggregates) an write (ingestion speed) performance of the system while reducing memory consumption, CPU consumption, and disk size (via compression)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Revamped Metrics Alerter&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;The existing external alerter has limited query capability, the goal is to overhaul the query capability to allow more complex queries and time comparisons&lt;/li&gt;
      &lt;li&gt;Make the external alerter distributed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OpenShift Agent&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Develop the &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent&quot;&gt;agent&lt;/a&gt; as a replacement for Heapster to resolve long standing scalability issues with the current implementation&lt;/li&gt;
      &lt;li&gt;Add support for storing histograms&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Documentation Improvements&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Make available API documentation for each release; this would resolve a long standing issue where the API documentation is not versioned, and only the current release has the documentation published on the Hawkular website&lt;/li&gt;
      &lt;li&gt;Publish performance reports related to disk size, memory consumption, CPU consumption, query throughput, and storage throughput&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HPA Integration&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Provide an endpoint for Hawkular Metrics to be used by the HPA. This will allow any metric stored to be used for autoscaling components in OpenShift/Kubernetess&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any other suggestion or would like to contribute to the project, please contact us; feedback is more than welcomed.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Hawkular APM: Comparing performance of service versions</title>
      <link>http://www.hawkular.org/blog/2017/02/04/hawkular-apm-service-deployments.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Sat, 4 Feb 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/02/04/hawkular-apm-service-deployments.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the release of &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/releases/tag/0.14.0.Final&quot;&gt;0.14.0.Final on Hawkular APM&lt;/a&gt; we have introduced a new feature in support of continuous deployment of microservices.
When a new version of a service is deployed, potentially as part of a deployment strategy (such as Canary, A/B, Blue/Green), it is important
to be able to assess the impact the new version of the service has in comparison to existing/previous versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new &quot;Services&quot; tab in the UI provides just such a feature. When trace data is reported by the Hawkular APM OpenTracing provider (Java
or JavaScript), it identifies the service name and optional version (known as a buildStamp). When the services are deployed within OpenShift
the details are automatically obtained from the environment - however when running services outside of OpenShift, these values can be provided
as environment variables (&lt;em&gt;HAWKULAR_APM_SERVICE_NAME&lt;/em&gt; and &lt;em&gt;HAWKULAR_APM_BUILDSTAMP&lt;/em&gt; respectively).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the top of the new page, you can select the service name and then a particular version (or &lt;em&gt;All&lt;/em&gt;) to see the performance of that service/version
over the defined time span. The number of transactions and faults are also shown. Once the &apos;Add&apos; button is pressed, the details will be displayed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To perform a comparison with either the same service, but different version, or between different services - simply select their details and press
&apos;Add&apos; again. The combined information will be shown in the same charts, allowing direct comparison of their information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows the deployment of three versions of the Account Manager service from the &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples/vertx-opentracing&quot;&gt;OpenTracing vertx example&lt;/a&gt;.
The first version of the service (shown in blue) is being used for a while before the second version (shown in orange) is introduced. After a while of running these versions together the first version is stopped. Then a third version (shown in green) is started and runs along side the second version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The top chart shows that after the initial spikes when the new versions are first introduced, they settle down and perform at approximately the same levels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bottom chart shows the number of transactions, and the subset that resulted in a fault, for each of the three versions. As you can see, when the new versions are introduced, the invocations are split between available versions indicating the services are sharing the load. Using this technique, it would be possible to see whether a newer version is suffering from a greater level of errors than a precedessor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-04-apm-service-deployment.png&quot; alt=&quot;Comparison of service/version information&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need any assistance, feel free to join us via IRC at &lt;code&gt;#hawkular&lt;/code&gt;
on Freenode.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Display custom events in Grafana</title>
      <link>http://www.hawkular.org/blog/2017/02/03/grafana-events.html</link>
      <author>noreply@hawkular.org (Joel Takvorian)</author>
      <pubDate>Fri, 3 Feb 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/02/03/grafana-events.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latest release of the &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource/releases/tag/v1.0.7&quot;&gt;Hawkular Grafana plugin&lt;/a&gt; (1.0.7) introduced a new feature, implementing &lt;a href=&quot;http://docs.grafana.org/reference/annotations/&quot;&gt;Grafana Annotations&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-03-annotations-tooltip-2.png&quot; alt=&quot;Logged error&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;A logged error, associated with a tag&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Grafana, annotations allow to display vertical bars on charts to illustrate an event in time, with a dedicated tooltip containing a custom text and eventually tags. All annotations are shared across graphs in a given dashboard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In hawkular-metrics, events can be stored in &lt;a href=&quot;http://www.hawkular.org/hawkular-metrics/docs/user-guide/#_metric_types&quot;&gt;String metrics&lt;/a&gt;. You can send string datapoints, just like you would send gauge or counter datapoints on other metrics. Simply note that these strings are currently limited to 2 KB length.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sample_application&quot;&gt;Sample application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a concrete example, we will reuse the sample application that I described &lt;a href=&quot;http://www.hawkular.org/blog/2017/01/16/hawkular-metrics-with-dropwizard.html&quot;&gt;in a previous post&lt;/a&gt;, which creates metrics through dropwizard with the pretext of a small benchmarking scenario.
It will be modified to generate some events: scenario steps and error logs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The scenario consisted in running two cache implementations (guava and ehcache), backed by a fake database, on which &lt;em&gt;get&lt;/em&gt; accesses are being monitored. We&amp;#8217;ll introduce random errors in DB access, that will be caught and logged to Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To log events in Hawkular, we create a simple function that posts the event (ie. a timestamp plus a string) to a string metric, named here &lt;em&gt;&quot;cartago.timeline&quot;&lt;/em&gt;. It also sets a tag that refers to the cache implementation that originated the event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For simplicity, most configurable items are hard-coded here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private void logHawkularEvent(String text, String impl) {
        HttpClient client = HttpClientBuilder.create().build();
        HttpPost post = new HttpPost(&quot;http://127.0.0.1:8080/hawkular/metrics/strings/cartago.timeline/raw&quot;);
        post.setHeader(&quot;Hawkular-Tenant&quot;, &quot;com.hawkular.sample&quot;);
        post.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
        post.setEntity(new StringEntity(&quot;[{\&quot;timestamp\&quot;: &quot; + Clock.defaultClock().getTime()
                + &quot;, \&quot;value\&quot;: \&quot;&quot; + text + &quot;\&quot;, \&quot;tags\&quot;: {\&quot;impl\&quot;: \&quot;&quot; + impl
                + &quot;\&quot;}}]&quot;, Charset.defaultCharset()));
        try {
            client.execute(post);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the whole scenario:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    void runScenario(List&amp;lt;String&amp;gt; keys, Backend backend, String name) {
        // Log starting scenario
        logHawkularEvent(&quot;Starting scenario for &quot; + name, name);

        // Init/register metrics
        registry.register(name + &quot;.size&quot;, (Gauge&amp;lt;Long&amp;gt;) backend::count);
        Timer readTimer = registry.timer(name + &quot;.read&quot;);

        // Scenario (which consists in getting values from cache during 5 minutes)
        ThreadLocalRandom rnd = ThreadLocalRandom.current();
        Stopwatch watch = Stopwatch.createStarted();
        while (watch.elapsed(TimeUnit.MINUTES) &amp;lt; 5) {
            try {
                int pos = rnd.nextInt(0, keys.size());
                final Timer.Context ctx = readTimer.time();
                try {
                    backend.get(keys.get(pos));
                } finally {
                    ctx.stop();
                }
            } catch (Exception e) {
                // Log any error to Hawkular
                logHawkularEvent(e.getMessage(), name);
            }
        }

        // Log ending scenario
        logHawkularEvent(&quot;Ending scenario for &quot; + name, name);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s pretty much everything for our sample application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_usage_in_grafana&quot;&gt;Usage in Grafana&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s switch to Grafana. From the &lt;em&gt;manage dashboard&lt;/em&gt; menu you can access the &lt;em&gt;Annotations&lt;/em&gt; settings to add a new one.
From there you can select your Hawkular datasource and provide in &lt;em&gt;query&lt;/em&gt; the name of the &lt;em&gt;String&lt;/em&gt; metric used in the applications:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-03-annotations-setup.png&quot; alt=&quot;Annotations setup&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s it. Events sent to &lt;em&gt;cartago.timeline&lt;/em&gt; will be displayed on all charts of this dashboard:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-03-annotations-charts.png&quot; alt=&quot;Annotations charts&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When passing the cursor over the events, a tooltip is displayed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-02-03-annotations-tooltip-1.png&quot; alt=&quot;Starting scenario&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;Starting the scenario&quot; event, with ehcache tag displayed&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So as you can see, annotations are a very simple way to show valuable information in Grafana.
In this example we send all our events on the same string metric, but of course it&amp;#8217;s possible to dispatch them on several ones, and thus configure several annotation queries in Grafana with different colors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Services 0.30.0.Final</title>
      <link>http://www.hawkular.org/blog/2017/01/31/hawkular-services-0.30-released.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/01/31/hawkular-services-0.30-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular services is a ready to run distribution of Hawkular-Metrics with Alerts, Inventory, the WildFly agent and other components.
The version &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.30.0.Final/hawkular-services-dist-0.30.0.Final.zip&quot;&gt;0.30.0.Final&lt;/a&gt; has just been released and is ready to be tested and integrated with other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_in_this_release&quot;&gt;What&amp;#8217;s in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes those changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The WildFly agent now supports EAP 6(.4). See Subtasks of &lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-1175&quot;&gt;HAWKULAR-1175&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An Event is forwarded to subscribed clients (like ManageIQ) when a new WildFly server connects for the first time. See &lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-1188&quot;&gt;HAWKULAR-1188&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Number of threads created by ActiveMQ are now limited to 30 to prevent start issues by running into file descriptor limits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is released every week on Tuesdays.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started&quot;&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started with Hawkular Services, &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.30.0.Final/hawkular-services-dist-0.30.0.Final.zip&quot;&gt;download the latest release&lt;/a&gt;, unzip it,
add a user and set the Agent to use the credentials for the user just added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be accomplished with the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export HAWKULAR_HOME=&quot;/path/to/hawkular-services&quot;
export HAWKULAR_USERNAME=&quot;jdoe&quot;
export HAWKULAR_PASSWORD=&quot;password&quot;

cd &quot;${HAWKULAR_HOME}&quot;
&quot;${HAWKULAR_HOME}/bin/add-user.sh&quot; \
  -a \
  -u &quot;${HAWKULAR_USERNAME}&quot; \
  -p &quot;${HAWKULAR_PASSWORD}&quot; \
  -g read-write,read-only
&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting the server, you need to have Cassandra 3.0.9 up and running with the RPC port enabled either via
setting the env variable of &lt;code&gt;CASSANDRA_START_RPC&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or by editing &lt;code&gt;cassandra.yml&lt;/code&gt; and setting it there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;# Whether to start the thrift rpc server.
start_rpc: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;ccm&lt;/code&gt; you can use this to update the config: &lt;code&gt;ccm updateconf &apos;start_rpc: true&apos;&lt;/code&gt;.
Another option is via &lt;code&gt;nodetool enablethrift&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_using_postgres&quot;&gt;Using Postgres&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use Postgres as backend you need to pass additional properties to the &lt;code&gt;standalone.sh&lt;/code&gt; command
above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; \
    -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD} \
    -Dhawkular.inventory.sql.jdbc.url=jdbc:postgresql://1.2.3.4:5432/hawkular \
    -Dhawkular.inventory.sql.jdbc.username=jdoe \
    -Dhawkular.inventory.sql.jdbc.password=password&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use a postgres database called &lt;em&gt;hawkular&lt;/em&gt; on host &lt;em&gt;1.2.3.4&lt;/em&gt; owned by a user &lt;em&gt;jdoe&lt;/em&gt; with a
 password of &lt;em&gt;password&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also
&lt;a href=&quot;http://www.hawkular.org/hawkular-services/docs/user-guide/inventory/index.html#configuration-properties&quot; class=&quot;bare&quot;&gt;http://www.hawkular.org/hawkular-services/docs/user-guide/inventory/index.html#configuration-properties&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_build_from_master_and_cassandra&quot;&gt;Build from master and Cassandra&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you build from master, you can pass &lt;code&gt;-Pembeddedc&lt;/code&gt; to get a distribution with embedded Cassandra for local development.
Similarly if you build via &lt;code&gt;-Pdev&lt;/code&gt; a default user of &lt;em&gt;jdoe/password&lt;/em&gt; will be installed and also be used with the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_use_grafana_with_hawkular_services&quot;&gt;Use Grafana with Hawkular-services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do now have a Grafana datasource to make it easier to connect to Hawkular-services from Grafana.
You can download it from &lt;a href=&quot;https://grafana.net/plugins/hawkular-datasource&quot;&gt;Grafana.net&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;website of the datasource tells more&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started_via_inofficial_docker_builds&quot;&gt;Get started via (inofficial) Docker builds&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are inofficial Docker images of the release and also an instrumented WildFly available on
DockerHub at &lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkular-services/&quot;&gt;Hawkular services&lt;/a&gt;
and &lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkfly/&quot;&gt;Instrumented WildFly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both images have been instrumented with the &lt;em&gt;jdoe/password&lt;/em&gt; user for the Hawkular server and the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&quot; class=&quot;bare&quot;&gt;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&lt;/a&gt; on some more
details about using those images.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Getting the status of Hosa</title>
      <link>http://www.hawkular.org/blog/2017/01/27/hosa-status.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/01/27/hosa-status.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_getting_the_status_of_the_hawkular_openshift_agent&quot;&gt;Getting the status of the Hawkular OpenShift Agent&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a previous blog post I talked about the &lt;a href=&quot;http://www.hawkular.org/blog/2017/01/17/obst-hosa.html&quot;&gt;Hawkular OpenShift Agent and how to use it to monitor Microservices&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While setting up the agent and the config maps is not complicated, it is always possible to make a typo. Hosa luckily has a status endpoint that exposes what it is currently doing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/1-hosa-status.png&quot; alt=&quot;Status in browser&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Status display in browser&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The endpoint is secured by basic authentication. We will see below how to set this up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_exposing_the_hosa_status_endpoint&quot;&gt;Exposing the Hosa status endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to expose the agent&amp;#8217;s status endpoint, which is deployed as a pod only, as service and with a route to be able to visit the &lt;code&gt;/status&lt;/code&gt; url of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When you have checked out the agent source code and deployed the agent via &lt;code&gt;make openshift-deploy&lt;/code&gt; you can skip the following, as the make command already did the setup.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will create a Yaml definition for the service and route and also a secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Definition for service and route, &lt;code&gt;hosa-service-route.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;apiVersion: v1
kind: Service
metadata:
  name: hawkular-openshift-agent
  labels:
    metrics-infra: agent
spec:
  ports:
    - protocol: TCP
      port: 8080 &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
  selector:
    name: hawkular-openshift-agent
---
apiVersion: v1
kind: Route
metadata:
  name: hosa
  namespace: openshift-infra
  labels:
    metrics-infra: agent
spec:
  path: /status &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
  to:
    kind: Service
    name: hawkular-openshift-agent
    weight: 100
---
apiVersion: v1
kind: Secret
metadata:
  name: hawkular-openshift-agent-status
    labels:
      metrics-infra: agent
  data:
    username: ZGV2  &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    password: Y2hhbmdlbWU= &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Expose port 8080&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put the status endpoint in the url, so that it opens when clicking in the OpenShift console&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Username &lt;em&gt;dev&lt;/em&gt; as base64&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Password &lt;em&gt;changeme&lt;/em&gt; as base64&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can then deploy this into OpenShift via&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ oc project openshift-infra
$ oc create -f hosa-service-route.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenShift will then expose a route in the format &lt;code&gt;&lt;a href=&quot;http://hosa-openshift-infra.&amp;lt;nodeip&amp;gt;.xip.io/status&quot; class=&quot;bare&quot;&gt;http://hosa-openshift-infra.&amp;lt;nodeip&amp;gt;.xip.io/status&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you navigate to it then you will be prompted for basic authentication. In above example use &lt;em&gt;dev/changeme&lt;/em&gt; for the credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_using_a_different_password_above&quot;&gt;Using a different password above&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you want to use a different password in the above, you have to supply it in Base64-encoding&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Base64 encoding of the password&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ echo -n &quot;test4hawkular&quot; | base64
dGVzdDRoYXdrdWxhcgo== &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Copy this onto the password line of &lt;code&gt;hosa-service-route.yml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_use_a_different_password_later_on&quot;&gt;Use a different password later on&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you have already installed the secret and want to change the password, you need to delete and re-create the secret with the new values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Install the new password&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc project openshift-infra
$ oc delete secret hawkular-openshift-agent-status
$ oc secret new-basicauth hawkular-openshift-agent-status \ &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    --username=dev \
    --password=changeme2 &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Name of the secret&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New password. No Base64 encoding is needed; OpenShift will take care.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately this is not enough as OpenShift does not trigger reloads of pods upon changes of secrets (unlike e.g. for ConfigMaps), so we have to explicitly terminate the running agent to have a new instance pick up the new secret:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Make the agent pick up the new password&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc project openshift-infra
$ oc get pods | grep agent
hawkular-openshift-agent-upubo   1/1       Running     0          2m
$ oc delete pod hawkular-openshift-agent-upubo
pod &quot;hawkular-openshift-agent-upubo&quot; deleted&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_lets_have_a_look_at_the_output&quot;&gt;Lets have a look at the output&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s have a quick look at the output of the status endpoint. I will use the &lt;code&gt;curl&lt;/code&gt; command for this. The output is similar to what is shown in Figure1 above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Get the status&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ curl -u dev:changeme2 http://hawkular-openshift-agent-openshift-infra.172.31.7.9.xip.io/status
name: Hawkular OpenShift Agent
version: 1.0.1.Final-SNAPSHOT &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
commit_hash: 4655b5cb8363b046e80c052c5fe08723770088ea
pods: &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
  172.31.7.9/openshift-infra/hawkular-openshift-agent-omf3r/7d48d137-e2ec-11e6-89b4-00219b3e7e23:
  - openshift-infra/hawkular-openshift-agent-omf3r|http://172.17.0.2:8080/metrics
  172.31.7.9/myproject/obs-demo-3-x9hkg/9ad38a87-e3e5-11e6-a3c6-00219b3e7e23:
  - myproject/obs-demo-3-x9hkg|https://172.17.0.6:8778/jolokia/
endpoints: &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
  openshift-infra/hawkular-openshift-agent-omf3r|http://172.17.0.2:8080/metrics: OK.
    Last collection at [Wed, 25 Jan 2017 13:56:58 +0000] gathered [22] metrics in
    [2.940328ms]
myproject/obs-demo-3-x9hkg|https://172.17.0.6:8778/jolokia/: &apos;Failed to collect
    metrics from [myproject/obs-demo-3-x9hkg|https://172.17.0.6:8778/jolokia/] at
    [Thu, 25 Jan 2017 13:57:06 +0000]. err=Failed to collect metrics from Jolokia
    endpoint [https://172.17.0.6:8778/jolokia/]. err=Post https://172.17.0.6:8778/jolokia/:
    x509: cannot validate certificate for 172.17.0.6 because it doesn&apos;&apos;t contain any
    IP SANs&apos; &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
log: &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
- &apos;Wed, 25 Jan 2017 11:53:29 +0000: STOP collection: openshift-infra/hawkular-openshift-agent-omf3r|http://172.17.0.2:8080/metrics&apos;
- &apos;Wed, 25 Jan 2017 11:53:29 +0000: START collection: openshift-infra/hawkular-openshift-agent-omf3r|http://172.17.0.2:8080/metrics&apos;
[source,java]
[...]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Version of the agent (and the commit hash it was built from)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of pods it is monitoring with the endppoint it talks to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of endpoints it monitors + result of last collection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This one shows an error because the endpoint is on https, but the certificate check fails and we have not disabled this check&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Latest log messages of the agent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When you have the agent source  &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent&quot;&gt;checked out from git&lt;/a&gt;, you can just run &lt;code&gt;make openshift-status&lt;/code&gt; instead of the &lt;code&gt;curl&lt;/code&gt; command shown above.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Microservices on OpenShift with HOSA</title>
      <link>http://www.hawkular.org/blog/2017/01/17/obst-hosa.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/01/17/obst-hosa.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_monitoring_microservices_on_openshift_with_the_hawkular_openshift_agent&quot;&gt;Monitoring Microservices on OpenShift with the Hawkular OpenShift Agent&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Monitoring Microservices on orchestrated platforms like OpenShift is a very different endeavor than the classical monitoring of monoliths on their dedicated servers. The biggest two differences are that the services can just be deployed by the schedule on any available server node and that it is possible to have many instances of a single service run in parallel&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular project is now introducing the Hawkular OpenShift Agent (HOSA), which is deployed in OpenShift as infrastructure level component. Hosa runs on each node to monitor pods for the node and sends the retrieved metrics to Hawkular-Metrics. Hosa may eventually replace Heapster in the longer run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_monitoring_scenario&quot;&gt;The monitoring scenario&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following drawing shows the scenario that I am going to describe below&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/OBST-Monitoring-HOSA.png&quot; alt=&quot;Scenario overview&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The Scenario&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The numbers in the round blue circles will be referenced below as &lt;em&gt;(n)&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As example we are taking Microservices created by the &lt;a href=&quot;https://github.com/obsidian-toaster&quot;&gt;Obsidian Toaster&lt;/a&gt; generators and deploy them with the help of the &lt;a href=&quot;https://github.com/fabric8io/fabric8-maven-plugin&quot;&gt;Fabric8 Maven Plugin&lt;/a&gt; into OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It is not necessary to retrieve the source code from Obsidian Toaster. Any source that can be
deployed to OpenShift via the Fabric8 Maven plugin will do.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After getting the source code from the generator, run the respective
&lt;code&gt;mvn clean package&lt;/code&gt; goals as described in the README of the source &lt;em&gt;(1)&lt;/em&gt;. If that works well, you can then deploy the result into OpenShift via &lt;code&gt;mvn fabric8:deploy -Popenshift&lt;/code&gt; &lt;em&gt;(2)&lt;/em&gt;. This will create a so called Source to Image (S2I) build in OpenShift which takes the provided artifacts and config files, creates images and deploys them in a pod with associated service etc &lt;em&gt;(3)&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latter is driven by some internal settings of the maven plugin, which also merges in files from &lt;code&gt;src/main/fabric8/&lt;/code&gt;. More on that below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For each JVM that the Fabric8 plugin deploys, it also puts a &lt;a href=&quot;https://jolokia.org&quot;&gt;Jolokia&lt;/a&gt; agent in the VM, as you can see in &lt;em&gt;(3)&lt;/em&gt;. This agent exposes internal JMX metrics via the Jolokia-REST protocol, on a pre-defined port with a default user name and a random password. The data of this pod is also exposed via the API-proxy, so that you can click on the &lt;em&gt;Open Java Console&lt;/em&gt; link in the next figure to get to a JMX browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/OBST-Pod.png&quot; alt=&quot;Pod in Openshift&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. A pod in OpenShift&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_hawkular_openshift_agent&quot;&gt;The Hawkular OpenShift Agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/hawkular/hawkular-openshift-agent&quot;&gt;Hawkular OpenShift Agent&lt;/a&gt; (Hosa) runs as part of the OpenShift infrastructure inside the &lt;em&gt;openshift-infra&lt;/em&gt; namespace on a per node basis, monitoring eligible pods on that node. The GitHub page has pretty good information on how to compile and deploy it (there are also pre-created Docker images available).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order for Hosa to know which pods to monitor and what metrics to collect, it looks at pods and checks if they have a &lt;em&gt;ConfigMap&lt;/em&gt; with a name of &lt;code&gt;hawkular-openshift-agent&lt;/code&gt; declared.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Config Map for Hosa, &lt;em&gt;(4)&lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;kind: ConfigMap
apiVersion: v1
metadata:
  name: obs-java-hosa-config.yml  &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
  namespace: myproject
data:
  hawkular-openshift-agent: | &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    endpoints:
    - type: jolokia &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
      collection_interval: 60s &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
      protocol: &quot;https&quot;
      tls:
        skip_certificate_validation: true &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
      port: 8778
      credentials:
        username: jolokia
        password: secret:hosa-secret/password  &lt;b class=&quot;conum&quot;&gt;(6)&lt;/b&gt;
      path: /jolokia/
      tags:
        name: ${POD:label[project]} &lt;b class=&quot;conum&quot;&gt;(7)&lt;/b&gt;
      metrics: &lt;b class=&quot;conum&quot;&gt;(8)&lt;/b&gt;
      - name: java.lang:type=Threading#ThreadCount
        id: the_thread_count
        type: gauge&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Name of the map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration for the agent to monitor matching pods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is a Jolokia-kind of endpoint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collect the metrics every 60s. This is a Golang Duration and is equal to &lt;code&gt;1m&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The agent checks for valid certificates in case of https. We skip this check&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is the password used to talk to Jolokia, which we obtain from a &lt;em&gt;secret&lt;/em&gt;&amp;#8201;&amp;#8212;&amp;#8201;more below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each metric is tagged with a label &lt;code&gt;name=&amp;lt;project name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definition of the metrics to be collected&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can save the above ConfigMap into a file and deploy it into Openshift via &lt;code&gt;oc create -f &amp;lt;configmap.yml&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Hosa can also grab data from Prometheus style endpoints. In the future we may switch to use this protocol, as JMX is a very JavaVM-centric concept and Microservices may also be created in non-JVM environments like Node.js or Ruby.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the question is how do we tell our deployment to use this config map? In Figure 2 you see, that this gets declared as a volume. In order to do so, we need to go back to our local source code and add a new file &lt;code&gt;deployment.yml&lt;/code&gt; into &lt;code&gt;src/main/fabric8/&lt;/code&gt; and re-deploy our source with &lt;code&gt;mvn package fabric8:deploy -Popenshift&lt;/code&gt;. And as we are doing this, we also want to make sure that the password for Jolokia is not hard coded, but will be obtained from an OpenShift &lt;em&gt;secret&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;deployment.yml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;# This gets merged into the main openshift.yml&apos;s deployment config via f8 plugin
spec:
  template:
    spec:
      volumes:
        - name: hawkular-openshift-agent &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
          configMap:
            name: obs-java-hosa-config.yml &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
      containers:
        - env:
          - name: AB_JOLOKIA_PASSWORD_RANDOM &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
            value: &quot;false&quot;
          - name: AB_JOLOKIA_PASSWORD &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
            valueFrom:
              secretKeyRef: &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
                name: hosa-secret
                key: password&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The magic name of the volume so that Hosa can find it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The name of the config map to use. See (1) in &lt;em&gt;Config Map for Hosa&lt;/em&gt; above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tell Jolokia not to create a random password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make OpenShift set the password, which it gets from a &lt;em&gt;secret&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The secret to query is named &lt;em&gt;hosa-secret&lt;/em&gt; and we want the entry with the name &lt;em&gt;password&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hosa is getting noticed once you redeploy the application, and will see the volume and will try to start monitoring the pod. Which leaves us with the OpenShift &lt;em&gt;secret&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
OpenShift will be stuck in state of &quot;Creating Container&quot; until the secret is added, as it can otherwise not inject the secret&amp;#8217;s value into the environment of the container. Unfortunately it does not tell this and just seem to hang.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_creating_the_secret_em_5_em&quot;&gt;Creating the secret, &lt;em&gt;(5)&lt;/em&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a secret that holds our password we need to do two things. First we need to encode the password in base 64 format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Base64 encoding of the password&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ echo -n &quot;test4hawkular&quot; | base64
dGVzdDRoYXdrdWxhcgo==&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then we need to create a yml file for the secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;hosa-secret.yml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;apiVersion: v1
kind: Secret
metadata:
  name: hosa-secret &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
type: Opaque
data:
  password: dGVzdDRoYXdrdWxhcg== &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Name of the secret&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key is &apos;password&apos;, value is password from previous step&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can deploy that secret with &lt;code&gt;oc create -f hosa-secret.yml&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_display_data_with_grafana&quot;&gt;Display data with Grafana&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have the agent collecting data and storing in Hawkular-Metrics we can look at them with the help of Grafana.
Joel Takvorian has &lt;a href=&quot;http://www.hawkular.org/blog/2016/10/24/hawkular-metrics-openshift-and-grafana.html&quot;&gt;described this pretty well&lt;/a&gt;, so I am not going to repeat the setup in detail here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
To get quickly started, you can run &lt;code&gt;$ oc new-app docker.io/hawkular/hawkular-grafana-datasource&lt;/code&gt;. And then when the service is created, click on &lt;em&gt;Add route&lt;/em&gt; in the OpenShift UI to expose Grafana to the outside world.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To configure the datasource in Grafana, we can now use the namespace of the project and a token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Getting host, tenant and token to configure the datasource&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ oc whoami
developer
$ oc project
Using project &quot;myproject&quot; on server &quot;https://pintsize:8443&quot;. &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
$ oc whoami -t
JhrqvcFTnEuP3XRPrLbwAAfpbZV4hYmne3-JMIXv4LQ &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
$ oc login -u system:admin &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
$ oc get svc hawkular-metrics -n openshift-infra &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
NAME               CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
hawkular-metrics   172.30.236.16   &amp;lt;none&amp;gt;        443/TCP   12d &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
# This is an alternative
$ oc get route hawkular-metrics -n openshift-infra &lt;b class=&quot;conum&quot;&gt;(6)&lt;/b&gt;
NAME               HOST/PORT
hawkular-metrics   metrics-openshift-infra.172.31.7.9.xip.io&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&apos;myproject&apos; will be the tenant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The token for authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenShift infrastructure is not visible to the developer account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the Cluster-IP of the Hawkular-Metrics service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cluster-IP is the host part of the https url of the metrics service, which follows the pattern of &lt;code&gt;&lt;a href=&quot;https://&amp;lt;cluster-ip&amp;gt;/hawkular/metrics&quot; class=&quot;bare&quot;&gt;https://&amp;lt;cluster-ip&amp;gt;/hawkular/metrics&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As alternative get the public host from the OpenShift route&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can then use this information to define our datasource in Grafana. If you want you can also make this the default by ticking the respective checkbox. Access mode needs to be proxy, as the service is not visible (under that IP) from outside of OpenShift. Instead of using the OpenShift-internal service we can also use the external IP defined by the hawkular-metrics route.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/OBST-Grafana-Datasource.png&quot; alt=&quot;Grafana datasource setup&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Grafana datasource setup&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using a token works well and is quickly done, but it has the caveat that tokens obtained with &lt;code&gt;oc whoami -t&lt;/code&gt; will expire and thus should only be used to quickly test if the datasource works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A better solution is to use a service account &lt;em&gt;(7)&lt;/em&gt; instead of the token, which I am going to explain next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_create_a_service_account_em_7_em&quot;&gt;Create a service account, &lt;em&gt;(7)&lt;/em&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Creating a Service Account is easy and can be done via &lt;code&gt;oc create sa view-metrics&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you look at it with &lt;code&gt;oc describe sa/view-metrics&lt;/code&gt;, it shows a list of tokens at the end:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ oc describe sa/view-metrics
Name:		view-metrics
Namespace:	myproject
Labels:		&amp;lt;none&amp;gt;

Image pull secrets:	view-metrics-dockercfg-rmnee

Mountable secrets: 	view-metrics-dockercfg-rmnee
                   	view-metrics-token-vowtw

Tokens:            	view-metrics-token-t98qw &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
                   	view-metrics-token-vowtw&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The token to be used in the next step&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those tokens are actually secrets, that were populated by OpenShift. Inspecting one of the tokens then reveals a token string, that we can use inside of Grafana&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Only the Token, which is not the one, that is also listed as mountable secret can be used. The other one will not work and Grafana will report a &quot;Forbidden&quot; message when trying to save the datasource.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ oc describe secret view-metrics-token-t98qw
Name:		view-metrics-token-vowtw
Namespace:	myproject
Annotations:    kubernetes.io/created-by=openshift.io/create-dockercfg-secrets
                kubernetes.io/service-account.name=view-metrics &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
[...]
Data
====
namespace:	9 bytes
service-ca.crt:	2186 bytes
token:		eyJhbGciOiJS... &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This annotation needs to be present for the secret to be usable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long token string&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/OBST-Grafana1.png&quot; alt=&quot;Using the token from the ServiceAccount&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Using the token from the ServiceAccount&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_result&quot;&gt;Result&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So finally we can see the thread count of our Obsidian sample application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/OBST-Grafana-ThreadCount.png&quot; alt=&quot;Thread count&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Thread count in Grafana&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the chart we can now see the thread count of our application. You can see that at around 9am we scaled the app from one to two pods.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Reporting Dropwizard metrics to Hawkular</title>
      <link>http://www.hawkular.org/blog/2017/01/16/hawkular-metrics-with-dropwizard.html</link>
      <author>noreply@hawkular.org (Joel Takvorian)</author>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/01/16/hawkular-metrics-with-dropwizard.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Dropwizard metrics&lt;/em&gt; (aka. Codahale aka. Yammer) is a well known, successful metrics framework that is easy to plug in a Java application.
You just create a metrics registry, create metrics, feed them and voilà.
But Dropwizard metrics doesn&amp;#8217;t store anything by itself, it&amp;#8217;s delegated to the so-called &quot;reporters&quot;.
So we&amp;#8217;ve built the &lt;a href=&quot;https://github.com/hawkular/hawkular-dropwizard-reporter&quot;&gt;&lt;em&gt;hawkular-dropwizard-reporter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article will show you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;how you can create custom metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how you can take advantage of existing middleware that uses Dropwizard metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to fine-tune the Hawkular reporter to make data exploitation easy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, I will use a very simple application to benchmark some data structures (caches) in real time, and output results as metrics.
This is not a serious benchmark and we don&amp;#8217;t really care about the results: our purpose is nothing more than to illustrate how we can work with Hawkular and Dropwizard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-01-16-dropwizard-sample-overview.png&quot; alt=&quot;Overview&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_minimal_setup&quot;&gt;Minimal setup&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You need very few things to start using the Hawkular Dropwizard reporter. Obviously, you must have a running instance of &lt;em&gt;Hawkular Metrics&lt;/em&gt;. If you don&amp;#8217;t have it yet, check out the &lt;a href=&quot;http://www.hawkular.org/hawkular-services/docs/installation-guide/&quot;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, add a &lt;em&gt;maven&lt;/em&gt; dependency to your Java application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.hawkular.metrics&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;hawkular-dropwizard-reporter&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;0.1.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In your Java code, create a &lt;em&gt;MetricRegistry&lt;/em&gt; and pass it to the &lt;em&gt;HawkularReporter&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    MetricRegistry registry = new MetricRegistry();
    HawkularReporter hawkularReporter = HawkularReporter.builder(registry, &quot;sample-tenant&quot;)
            .build();
    hawkularReporter.start(1, TimeUnit.SECONDS);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s it. From now on, all metrics that are added to the registry will be reported to Hawkular Metrics.
The default configuration expects to find the Hawkular server on &lt;em&gt;localhost:8080&lt;/em&gt;, you can change it with the builder&amp;#8217;s &lt;code&gt;uri&lt;/code&gt; method. You can &lt;a href=&quot;https://github.com/hawkular/hawkular-dropwizard-reporter#other-builder-options&quot;&gt;explore the builder options&lt;/a&gt; to configure it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In this example, &quot;sample-tenant&quot; refers to the tenant used in Hawkular. You can set whatever you want instead. &lt;a href=&quot;http://www.hawkular.org/hawkular-metrics/docs/user-guide/#_tenants&quot;&gt;Check Hawkular documentation&lt;/a&gt; to learn more about multi-tenancy.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If, for instance, we want to connect to an Hawkular pod running in OpenShift, we would configure the reporter similar to that one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    HawkularReporter hawkularReporter = HawkularReporter.builder(registry, &quot;sample-tenant&quot;)
            .uri(&quot;https://metrics.192.168.42.63.xip.io/hawkular/metrics&quot;)
            .bearerToken(&quot;ABCDEFGHIJ1234&quot;)
            .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To conclude with the initial setup, note that it is often a good practice to include some host-based disambiguation string in the metric names,
so that if your application is deployed on several hosts and they all communicate to the same Hawkular instance using the same tenant,
they will not conflict and feed the same metrics.
A convenient way to do that is to set a prefix in the reporter configuration, for instance using the host name:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    String hostname;
    try {
        hostname = InetAddress.getLocalHost().getCanonicalHostName();
    } catch (UnknownHostException e) {
        hostname = &quot;?&quot;;
    }
    HawkularReporter hawkularReporter = HawkularReporter.builder(registry, &quot;sample-tenant&quot;)
            .prefixedWith(hostname + &quot;.&quot;)
            .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_dropwizard_hawkular&quot;&gt;Dropwizard &amp;#8594; Hawkular&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As stated before, our sample app will do some (very) basic benchmarking on several caches implementations: we&amp;#8217;ll have a &lt;em&gt;Guava&lt;/em&gt; cache and a local &lt;em&gt;EhCache&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This sample app is on my GitHub: &lt;a href=&quot;https://github.com/jotak/hawkular-dropwizard-sample&quot; class=&quot;bare&quot;&gt;https://github.com/jotak/hawkular-dropwizard-sample&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We create a very simple interface that allows us to get data from cache, count number of elements and know if the latest read was from cache or not:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;interface Backend {
    Object get(String key);
    long count();
    void init(Map&amp;lt;String, Object&amp;gt; presetElements);
    boolean isLastReadFromCache();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/jotak/hawkular-dropwizard-sample/tree/master/src/main/java/com/hawkular/sample&quot;&gt;see on GitHub&lt;/a&gt; the &lt;code&gt;GuavaBackend&lt;/code&gt; and &lt;code&gt;EhcacheBackend&lt;/code&gt; implementations, there&amp;#8217;s nothing fancy here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;EhCache is initialized programmatically:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    CacheManager cacheManager = CacheManager.newInstance();
    Ehcache cache = cacheManager.addCacheIfAbsent(&quot;testCache&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, the &lt;code&gt;Benchmark&lt;/code&gt; class. This is where we create metrics and feed them, with the pretext of a small scenario. Here&amp;#8217;s the &lt;code&gt;run&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private void run() {
        final DatabaseStub fakeDb = new DatabaseStub(); &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
        final BackendMonitoring monitoring = new BackendMonitoring(registry); &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
        Map&amp;lt;String, Object&amp;gt; presetElements = IntStream.range(0, 100000)
                .mapToObj(Integer::new)
                .collect(Collectors.toMap(i -&amp;gt; UUID.randomUUID().toString(), i -&amp;gt; i)); &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;

        &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
        monitoring.runScenario(presetElements, new GuavaBackend(fakeDb), GuavaBackend.NAME);
        monitoring.runScenario(presetElements, new EhcacheBackend(fakeDb, ehcache), EhcacheBackend.NAME);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The class &lt;code&gt;DatabaseStub&lt;/code&gt; is used to simulate a database with latency, using just a &lt;code&gt;HashMap&lt;/code&gt; for storage (&lt;a href=&quot;https://github.com/jotak/hawkular-dropwizard-sample/blob/master/src/main/java/com/hawkular/sample/DatabaseStub.java&quot;&gt;view it on GitHub&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BackendMonitoring&lt;/code&gt; will setup monitoring for a given backend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creates a collection of items to store in cache, and use them in the scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the scenario for each &lt;code&gt;Backend&lt;/code&gt; implementation (described below).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, &lt;code&gt;BackendMonitoring.runScenario&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    void runScenario(Map&amp;lt;String, Object&amp;gt; presetElements, Backend backend, String name) {
        System.out.println(&quot;Starting scenario for &quot; + name);
        registry.register(name + &quot;.size&quot;, (Gauge&amp;lt;Long&amp;gt;) backend::count); &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
        Timer readTimer = registry.timer(name + &quot;.read&quot;); &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
        final Meter readCacheMeter = registry.meter(name + &quot;.cache.read&quot;); &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
        final Meter readDbMeter = registry.meter(name + &quot;.db.read&quot;); &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
        final Counter numberItemsRead = registry.counter(name + &quot;.total.read.count&quot;); &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
        // Setup preset elements
        backend.init(presetElements);
        List&amp;lt;String&amp;gt; keys = new ArrayList&amp;lt;&amp;gt;(presetElements.keySet());
        ThreadLocalRandom rnd = ThreadLocalRandom.current();
        Stopwatch watch = Stopwatch.createStarted();
        while (watch.elapsed(TimeUnit.MINUTES) &amp;lt; 5) {
            int pos = rnd.nextInt(0, keys.size());
            runWithBenchmark(() -&amp;gt; {
                backend.get(keys.get(pos));
                if (backend.isLastReadFromCache()) {
                    readCacheMeter.mark();
                } else {
                    readDbMeter.mark();
                }
                numberItemsRead.inc();
            }, readTimer);
        }
        // Reset size gauge to 0
        backend.init(new HashMap&amp;lt;&amp;gt;());
        System.out.println(&quot;Ending scenario for &quot; + name);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, &lt;code&gt;BackendMonitoring.runWithBenchmark&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private void runWithBenchmark(Runnable r, Timer readTimer) {
        final Timer.Context ctx = readTimer.time();
        try {
            r.run();
        } finally {
            ctx.stop();
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we create several metrics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;Gauge&lt;/em&gt; that will track the number of elements in cache.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;Timer&lt;/em&gt; metric. Each time the &lt;code&gt;runWithBenchmark&lt;/code&gt; method is called, that timer computes the &lt;code&gt;Runnable&lt;/code&gt; execution time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;Meter&lt;/em&gt; that is invoked each time data is read from cache (rather than DB).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The opposite: a &lt;em&gt;Meter&lt;/em&gt; that is invoked each time data is read from db.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;Counter&lt;/em&gt; that tracks the total number of reads. We could actually get rid of it, because its value could be retrieved from readDbMeter.count + readCacheMeter.count (yes, a &lt;em&gt;Meter&lt;/em&gt; includes a &lt;em&gt;Counter&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn more about &lt;em&gt;Dropwizard&lt;/em&gt; metric types &lt;a href=&quot;http://metrics.dropwizard.io/3.1.0/getting-started/&quot;&gt;from its documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember that since we associated the Hawkular reporter with the metrics registry, all metrics are automatically reported into &lt;em&gt;Hawkular Metrics&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s run the benchmark. I&amp;#8217;m using &lt;a href=&quot;http://grafana.org/&quot;&gt;Grafana&lt;/a&gt; with its &lt;a href=&quot;https://grafana.net/plugins/hawkular-datasource&quot;&gt;Hawkular plugin&lt;/a&gt; to display graphs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-01-16-dropwizard-sample-metrics.png&quot; alt=&quot;Custom metrics&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Upper-left: storage size (yellow = Guava, green = EhCache)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Upper-right: read response time (yellow = Guava, green = EhCache)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Bottom-left: read cache vs DB - mean rate (orange = Guava/db, yellow = Guava/cache, blue = EhCache/db, green = EhCache/cache)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Bottom-right: read cache vs DB - count (orange = Guava/db, yellow = Guava/cache, blue = EhCache/db, green = EhCache/cache)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see the Guava cache scenario in the first 5 minutes, followed by the EhCache scenario.
Note how the storage size fells abruptly at about halfway of EhCache scenario: this is probably due to a cache eviction mechanism that is present by default (given we didn&amp;#8217;t configure the cache at all).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can correlate that with the response time with EhCache that is not improving as fast as Guava&amp;#8217;s as long as the cache get filled. However we can suppose it&amp;#8217;s compensated for smaller memory footprint.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_middleware_dropwizard_hawkular&quot;&gt;Middleware &amp;#8594; Dropwizard &amp;#8594; Hawkular&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we know how to create metrics. That&amp;#8217;s perfect to track values that are very specific to an application.
But the best is that a lot of existing Java middleware already provides tons of metrics on Dropwizard, that you can integrate very easily in your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a non exhaustive list in Dropwizard documentation (&lt;a href=&quot;http://metrics.dropwizard.io/3.1.0/manual/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://metrics.dropwizard.io/3.1.0/manual/third-party/&quot;&gt;there&lt;/a&gt;). It includes &lt;em&gt;EhCache&lt;/em&gt;, &lt;em&gt;Apache Http client&lt;/em&gt;, &lt;em&gt;Jetty&lt;/em&gt;, etc.
But they are actually many others. Some frameworks, &lt;a href=&quot;http://vertx.io/docs/vertx-hawkular-metrics/java/&quot;&gt;like Vert.X&lt;/a&gt; may also report metrics directly to Hawkular, so you don&amp;#8217;t even need to go through Dropwizard at all (but still, &lt;a href=&quot;http://vertx.io/docs/vertx-dropwizard-metrics/java/&quot;&gt;you can&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we&amp;#8217;re already using EhCache in our sample app, let&amp;#8217;s try to get EhCache middleware metrics. We need first to add a maven dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.dropwizard.metrics&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;metrics-ehcache&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we initialize EhCache programmatically, we create an &lt;code&gt;InstrumentedEhcache&lt;/code&gt; object, which is its Dropwizard avatar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private Benchmark(MetricRegistry registry, Ehcache cache) {
        this.registry = registry;
        ehcache = InstrumentedEhcache.instrument(registry, cache);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then we use this &lt;code&gt;InstrumentedCache&lt;/code&gt; instead of the initial &lt;code&gt;EhCache&lt;/code&gt; object in the rest of our code. That&amp;#8217;s it. Every time something is done on EhCache, metrics will be feeded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See for instance what we get in Grafana, when the &lt;code&gt;EhcacheBackend&lt;/code&gt; is invoked during our scenario:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-01-16-dropwizard-ehcache.png&quot; alt=&quot;EhCache metrics&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Here we track some metrics such as the gets and puts mean, the number of memory hits and misses. See the &lt;a href=&quot;http://metrics.dropwizard.io/3.1.0/manual/ehcache/&quot;&gt;full list of available metrics&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What else could we do&amp;#8230;&amp;#8203; We&amp;#8217;re on the JVM, right? We could get monitoring data from MX Beans (such as &lt;code&gt;MemoryMXBean&lt;/code&gt;) and create our own metrics in Dropwizard, but there&amp;#8217;s already a module that does the job:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.dropwizard.metrics&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;metrics-jvm&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After creating the &lt;code&gt;MetricRegistry&lt;/code&gt;, you can add some preset JVM metric sets, such as &lt;code&gt;GarbageCollectorMetricSet&lt;/code&gt;, &lt;code&gt;MemoryUsageGaugeSet&lt;/code&gt;, &lt;code&gt;ThreadStatesGaugeSet&lt;/code&gt; etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having them in Hawkular will help you to quickly correlate information, such as an increasing memory heap or non-heap usage related to the use of a cache in our example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/2017-01-16-dropwizard-jvm.png&quot; alt=&quot;JVM metrics&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Heap vs non-heap memory used, plus some counters on threads and GC. See the drop in heap memory, at about third quarter of the timeline? It matches the cache eviction in EhCache.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
An interesting fact is that the &lt;em&gt;Cassandra&lt;/em&gt; database also exposes metrics through Dropwizard. And &lt;em&gt;Hawkular&lt;/em&gt; uses &lt;em&gt;Cassandra&lt;/em&gt; internally for metrics storage. Which means that it can be self-monitored with the Hawkular Dropwizard reporter. If you want to read more on this subject, check out &lt;a href=&quot;https://wiki.apache.org/cassandra/Metrics&quot;&gt;Cassandra metrics&lt;/a&gt; and &lt;a href=&quot;https://github.com/hawkular/hawkular-dropwizard-reporter#usage-as-an-addthis-plugin-in-cassandra&quot;&gt;some instructions here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_fine_tuning_the_reporter&quot;&gt;Fine-tuning the reporter&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_tagging&quot;&gt;Tagging&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some improvements we can bring to our sample app. First of all, we could tag our metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tagging may not seem very important at first sight, but over time when you get more and more metrics, and when you try to exploit them in a dynamic way, tags become crucial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even for this sample app, when building the Grafana dashboard we soon want to make it generic so that it can show any other competing implementation of caches. In order to do it, we will create per-metric tags based on regexp. Just by adding a few lines in the &lt;code&gt;HawkularReporter&lt;/code&gt; builder:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    HawkularReporter hawkularReporter = HawkularReporter.builder(registry, &quot;sample-tenant&quot;)
            .addRegexTag(Pattern.compile(GuavaBackend.NAME + &quot;\\..*&quot;), &quot;impl&quot;, GuavaBackend.NAME)
            .addRegexTag(Pattern.compile(EhcacheBackend.NAME + &quot;\\..*&quot;), &quot;impl&quot;, EhcacheBackend.NAME)
            .addGlobalTag(&quot;hostname&quot;, hostname)
            .prefixedWith(hostname + &quot;.&quot;)
            .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And as you can see I also added a global tag with the hostname.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that configuration, every metrics whose name starts with &lt;em&gt;&quot;guava.&quot;&lt;/em&gt; will be tagged &lt;em&gt;&quot;impl:guava&quot;&lt;/em&gt;, and similarly for ehcache.
Every metric reported through this reporter will be tagged with the hostname.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_filtering&quot;&gt;Filtering&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use Grafana with this sample app, you&amp;#8217;ve probably noticed how annoying it is to find and select the metric you want to display,
because it&amp;#8217;s flooded among tons of other metrics. And obviously, the more you store metrics, the more resources will be consumed. So you can filter out metrics you don&amp;#8217;t want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s two kinds of filters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the usual built-in Dropwizard filters, that you can set using &lt;code&gt;HawkularReporterBuilder.filter&lt;/code&gt; and by implementing &lt;a href=&quot;http://metrics.dropwizard.io/3.1.0/apidocs/com/codahale/metrics/MetricFilter.html&quot;&gt;MetricFilter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;another kind of filter that is very specific to the Hawkular reporter, called &lt;em&gt;MetricComposition&lt;/em&gt; and for which I must provide some details:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As stated before, &lt;em&gt;Dropwizard&lt;/em&gt; has several metric types (gauges, meters, timers etc.), some of them being composed of multiple values. So they don&amp;#8217;t match 1-1 with &lt;em&gt;Hawkular&lt;/em&gt; metric types, which are made of simple values (basically, &lt;em&gt;doubles&lt;/em&gt; for &lt;em&gt;gauges&lt;/em&gt; and &lt;em&gt;longs&lt;/em&gt; for &lt;em&gt;counters&lt;/em&gt;&amp;#8201;&amp;#8212;&amp;#8201;there are other types but unused in the dropwizard reporter).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order not to loose any piece of data, &lt;em&gt;Dropwizard&lt;/em&gt; metrics are &lt;em&gt;exploded&lt;/em&gt; into several metrics in &lt;em&gt;Hawkular&lt;/em&gt;. For instance, a Meter named &lt;em&gt;guava.cache.read&lt;/em&gt; will be translated into 4 gauges (&lt;em&gt;guava.cache.read.1minrt&lt;/em&gt;, &lt;em&gt;guava.cache.read.5minrt&lt;/em&gt;, &lt;em&gt;guava.cache.read.15minrt&lt;/em&gt;, &lt;em&gt;guava.cache.read.meanrt&lt;/em&gt;) and 1 counter (&lt;em&gt;guava.cache.read.count&lt;/em&gt;) in &lt;em&gt;Hawkular&lt;/em&gt;. The full translation table is &lt;a href=&quot;https://github.com/hawkular/hawkular-dropwizard-reporter#how-it-works&quot;&gt;described here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the Dropwizard point of view, there is no metric called &quot;guava.cache.read.1minrt&quot;. So you cannot filter it out with Dropwizard filters. However you can act on the &quot;metric composition&quot; in the Hawkular reporter. Either by providing the full metric name:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    // builder.
      .setMetricComposition(&quot;guava.cache.read&quot;, Lists.newArrayList(&quot;1minrt&quot;, &quot;meanrt&quot;, &quot;count&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or using regexp, as I&amp;#8217;m doing in the sample app:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    HawkularReporter hawkularReporter = HawkularReporter.builder(registry, &quot;sample-tenant&quot;)
            .addRegexTag(Pattern.compile(GuavaBackend.NAME + &quot;\\..*&quot;), &quot;impl&quot;, GuavaBackend.NAME)
            .addRegexTag(Pattern.compile(EhcacheBackend.NAME + &quot;\\..*&quot;), &quot;impl&quot;, EhcacheBackend.NAME)
            .addGlobalTag(&quot;hostname&quot;, hostname)
            .prefixedWith(hostname + &quot;.&quot;)
            .setRegexMetricComposition(Pattern.compile(&quot;net\\.sf\\.ehcache&quot;), Lists.newArrayList(&quot;mean&quot;, &quot;meanrt&quot;, &quot;5minrt&quot;, &quot;98perc&quot;, &quot;count&quot;))
            .setRegexMetricComposition(Pattern.compile(&quot;.*&quot;), Lists.newArrayList(&quot;mean&quot;, &quot;meanrt&quot;, &quot;count&quot;))
            .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, we configure all &lt;em&gt;net.sf.ehcache.*&lt;/em&gt; metrics (EhCache middleware metrics) to provide their &lt;em&gt;mean&lt;/em&gt;, &lt;em&gt;meanrt&lt;/em&gt;, &lt;em&gt;5minrt&lt;/em&gt;, &lt;em&gt;98perc&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; attributes. All other attributes will be discarded.
For all other metrics we only keep &lt;em&gt;mean&lt;/em&gt;, &lt;em&gt;meanrt&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The declaration order matters, since only the first matching pattern will be used for a given metric name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Using plain string rather than regexp for metric composition is more efficient, since they are internally indexed in a &lt;code&gt;HashMap&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That was a quite complete tour of the Hawkular Dropwizard reporter. Some useful links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The sample app used to illustrate this article: &lt;a href=&quot;https://github.com/jotak/hawkular-dropwizard-sample&quot; class=&quot;bare&quot;&gt;https://github.com/jotak/hawkular-dropwizard-sample&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Grafana dashboard I used (exported json): &lt;a href=&quot;https://raw.githubusercontent.com/jotak/hawkular-dropwizard-sample/master/grafana/grafana-dropwizard-sample.json&quot; class=&quot;bare&quot;&gt;https://raw.githubusercontent.com/jotak/hawkular-dropwizard-sample/master/grafana/grafana-dropwizard-sample.json&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The GitHub page of the reporter itself, along with its documentation, is here: &lt;a href=&quot;https://github.com/hawkular/hawkular-dropwizard-reporter&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-dropwizard-reporter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Extending Complex Event Processing in Hawkular Alerting</title>
      <link>http://www.hawkular.org/blog/2017/01/13/events-aggregation-extension.html</link>
      <author>noreply@hawkular.org (Lucas Ponce)</author>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/01/13/events-aggregation-extension.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_stream_processing_versus_polling_processing&quot;&gt;Stream Processing versus Polling Processing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting uses different techniques to detect behaviours by defining rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main implementation is based in a Stream Processing design.
Hawkular Alerting analyzes streams of data and events ordered in a timeline searching for conditions matches.
This technique is also known as Event Processing (or Complex Event Processing) especially when the processing of incoming data might need multiple conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/stream-processing.png&quot; alt=&quot;Stream Processing&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This method is particularity good to identify meaningful happenings on complex scenarios and respond to them as quickly as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting also supports an &lt;em&gt;Alerter&lt;/em&gt; based Polling technique that allows periodic processing of defined queries against a backend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/polling-processing.png&quot; alt=&quot;Polling Processing&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Polling technique is also good in non real time scenarios, for example, to compare historical values in
large range time intervals using statistical operators like averages, medians or percentiles.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sliding_windows_on_complex_event_processing&quot;&gt;Sliding Windows on Complex Event Processing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An interesting aspect in the logic of detection behaviours is the combination of Stream and Polling processing characteristics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Sliding Window is a way to define a scope in the stream of data and events received in the timeline.
This Sliding Window lets us define special rules that apply only on the scoped data and events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2017/sliding-windows.png&quot; alt=&quot;Sliding Windows&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A powerful use case is when we can aggregate the scoped events and define expressions on them.&lt;br&gt;
For example, let&amp;#8217;s examine the high level scenarios&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Marketing&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Detect when a customer buys several items in a short period of time&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fraud&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Alert when a customer buys from several locations in a short period of time&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Customer loyalty&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Detect specific transactions to offer premium discounts to customers&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of these scenarios need some sort of aggregation (i.e. aggregate events by customer/transaction id),
define expressions on aggregated fields and scope these events using a Slide Window.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_events_aggregation_extension&quot;&gt;Events Aggregation Extension&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting has introduced a new &lt;em&gt;Extension&lt;/em&gt; called &lt;em&gt;EventsAggregation&lt;/em&gt;.&lt;br&gt;
&lt;em&gt;Extensions&lt;/em&gt; is a new mechanism to pre-process data or events before they are processed by the core Alerting Engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;EventsAggregation&lt;/em&gt; &lt;em&gt;Extension&lt;/em&gt; allows us to scope Sliding Windows on Events and define expressions on aggregated data.
This new feature can be used on &lt;em&gt;Triggers&lt;/em&gt; with &lt;em&gt;ExternalCondition&lt;/em&gt; and &lt;em&gt;EventsAggregation&lt;/em&gt; alerter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, we can define a &lt;em&gt;Trigger&lt;/em&gt; that represents the &lt;strong&gt;Marketing&lt;/strong&gt; scenario previously described:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;triggers&quot;:[
    {
      &quot;trigger&quot;:{
        &quot;id&quot;: &quot;marketing-scenario&quot;,
        &quot;name&quot;: &quot;Marketing Scenario&quot;,
        &quot;description&quot;: &quot;Detect when a customer buys several items in a short period of time&quot;,
        &quot;severity&quot;: &quot;HIGH&quot;,
        &quot;enabled&quot;: true,
        &quot;actions&quot;:[
          {
            &quot;actionPlugin&quot;: &quot;email&quot;,
            &quot;actionId&quot;: &quot;notify-to-marketing&quot;
          }
        ],
        &quot;tags&quot;:{
            &quot;HawkularExtension&quot;:&quot;EventsAggregation&quot;
        }
      },
      &quot;conditions&quot;:[
        {
          &quot;triggerMode&quot;: &quot;FIRING&quot;,
          &quot;type&quot;: &quot;EXTERNAL&quot;,
          &quot;alerterId&quot;:&quot;EventsAggregation&quot;,
          &quot;dataId&quot;: &quot;marketing&quot;,
          &quot;expression&quot;: &quot;event:groupBy(context.accountId):window(time,10s):having(count &amp;gt; 2)&quot;
        }
      ]
    }
  ],
  &quot;actions&quot;:[
    {
      &quot;actionPlugin&quot;: &quot;email&quot;,
      &quot;actionId&quot;: &quot;notify-to-marketing&quot;,
      &quot;properties&quot;: {
        &quot;to&quot;: &quot;marketing@hawkular.org&quot;
      }
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The expression used can be described as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;groupBy(context.accountId)      Group window events by context &quot;accountId&quot; field
window(time,10s)                Define a sliding time window of 10 seconds
having(count &amp;gt; 2)               Define an expression on the grouped events&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In other words, this condition will be true, each time that there are more than two events with the same &lt;em&gt;accountId&lt;/em&gt; for a 10 seconds window.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a similar way, we can describe the &lt;strong&gt;Fraud&lt;/strong&gt; scenario previously described with the expression:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;event:groupBy(tags.accountId):window(time,10s):having(count &amp;gt; 1, count.tags.location &amp;gt; 1)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;groupBy(context.accountId)                    Group window events by context &quot;accountId&quot; field
window(time,10s)                              Define a sliding time window of 10 seconds
having(count &amp;gt; 1, count.tags.location &amp;gt; 1)    Define an expression on the grouped events&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This condition will be true when there are more than 1 events with more than one &lt;em&gt;location&lt;/em&gt; tag, so detecting when
events for the same &lt;em&gt;accountId&lt;/em&gt; happens from different places.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two previous expressions groups all events of the timing window.
We might have scenarios where only specific events should be grouped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For these cases we can add filters into the expressions like in the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;event:groupBy(tags.traceId):filter((category == \&quot;Credit Check\&quot; &amp;amp;&amp;amp; text == \&quot;Exceptionally Good\&quot;) || (category == \&quot;Stock Check\&quot; &amp;amp;&amp;amp; text == \&quot;Out of Stock\&quot;)):having(count &amp;gt; 1, count.tags.accountId == 1)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This expression will group events filtered by a expression&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;filter(
    (category == \&quot;Credit Check\&quot; &amp;amp;&amp;amp; text == \&quot;Exceptionally Good\&quot;) ||
    (category == \&quot;Stock Check\&quot; &amp;amp;&amp;amp; text == \&quot;Out of Stock\&quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that this expression doesn&amp;#8217;t define an explicit sliding time window, so it will use a default expiration window.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_use_cases&quot;&gt;Use cases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stream Processing and Polling Processing might be used for similar scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The EventsAggregation Extension groups Events in memory so it is designed for real time scenarios with relatively short sliding windows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;EventsAggregation Extension is a useful addition to Hawkular Alerting that will extend the scenarios and type of behaviours that can be detected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our future work we will enhance this extension covering more use cases (potential aggregation of data).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope this short introduction helps to show how the EventsAggregation Extension provides powerful new CEP capabilities for Hawkular Alerting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comments and questions are welcome, here or in &lt;a href=&quot;http://webchat.freenode.net/?channels=hawkular&quot;&gt;#hawkular&lt;/a&gt; room on freenode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;EventsAggregation Expression syntax:&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine-extensions/hawkular-alerts-events-aggregation/src/main/java/org/hawkular/alerts/extensions/Expression.java&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine-extensions/hawkular-alerts-events-aggregation/src/main/java/org/hawkular/alerts/extensions/Expression.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;EventsAggregation examples:&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine-extensions/hawkular-alerts-events-aggregation/src/test/java/org/hawkular/alerts/extensions/ExpressionTest.java&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine-extensions/hawkular-alerts-events-aggregation/src/test/java/org/hawkular/alerts/extensions/ExpressionTest.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-rest-tests/src/test/groovy/org/hawkular/alerts/rest/EventsAggregationExtensionITest.groovy&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-rest-tests/src/test/groovy/org/hawkular/alerts/rest/EventsAggregationExtensionITest.groovy&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.23.0 - Release</title>
      <link>http://www.hawkular.org/blog/2017/01/04/hawkular-metrics-0.23.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Wed, 4 Jan 2017 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2017/01/04/hawkular-metrics-0.23.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.23.0 of Hawkular Metrics. This release is anchored by performance and stability improvements.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Prevent BusyPoolException under heavy load due no available connection and queue reaching max size of 256 (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-542&quot;&gt;HWKMETRICS-542&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Gatling load tests have a new option (&lt;code&gt;loops&lt;/code&gt;) to specify the number of requests per client (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-559&quot;&gt;HWKMETRICS-559&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Resolved an issue with resource-env-ref in component war (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-541&quot;&gt;HWKMETRICS-541&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Updated packaging to support deployments on WildFly 10.1.0 (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-558&quot;&gt;HWKMETRICS-558&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;REST API&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Updated CORS validation to be applied prior to processing the request; this solves an issue where some content is still returned even though a bad request status is returned (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-554&quot;&gt;HWKMETRICS-554&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal Monitoring&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Hostname is now part of the metric id when creating and storing internal metrics (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-555&quot;&gt;HWKMETRICS-555&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hawkular Alerting - Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Added support for newer condition types to the email plugin (&lt;a href=&quot;https://issues.jboss.org/browse/HWKALERTS-208&quot;&gt;HWKALERTS-208&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Allow ExternalCondition to be fired on Event submission; external conditions can now be matched via Event and Data submissions (&lt;a href=&quot;https://issues.jboss.org/browse/HWKALERTS-207&quot;&gt;HWKALERTS-207&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Added new NelsonCondition for native Nelson Rule detection; a brand new condition type to perform automatic Nelson Rule detection of misbehaving metrics. (&lt;a href=&quot;https://issues.jboss.org/browse/HWKALERTS-209&quot;&gt;HWKALERTS-209&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Alerting - Included&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/projects/HWKALERTS/versions/12332918&quot;&gt;1.5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Examples&lt;/a&gt;, &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.23.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.23.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS/versions/12332805&quot;&gt;https://issues.jboss.org/projects/HWKMETRICS/versions/12332805&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Hawkinit</title>
      <link>http://www.hawkular.org/blog/2016/12/22/hawkular-hawkinit-cli-tool.html</link>
      <author>noreply@hawkular.org (Jirka Kremser)</author>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/12/22/hawkular-hawkinit-cli-tool.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introducing_hawkinit&quot;&gt;Introducing Hawkinit&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This simple CLI tool written in NodeJS will help you to set up the running instance of &lt;a href=&quot;http://localhost:8080/hawkular-services/docs/quickstart-guide/&quot;&gt;Hawkular Services&lt;/a&gt;, multiple instances of Cassandra,
and also the instances of WildFly servers that have the Hawkular agent installed and configured to report the metrics to the Hawkular Services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;User can select if he wants the WildFly server running in the standalone mode or as a managed domain. She can also choose how many instances it should spawn.
If the domain mode is selected, there are some prepared &lt;a href=&quot;https://github.com/Jiri-Kremser/hawkfly-domain-dockerfiles#scenarios&quot;&gt;scenarios&lt;/a&gt; with different profiles and different amount of servers and server groups per host controller.
Instead of standalone mode, one can also spawn domain with multiple host controllers simulating the complex real world scenario in couple of seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Under the hood, the application dynamically creates a &lt;code&gt;docker-compose.yml&lt;/code&gt; file in the temp directory with the parameters obtained as the answers and run the services
as a linked containers that communicate among themselves. No rocket science, but it can be handy when trying to set up something quickly or when trying the Hawkular ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_usage&quot;&gt;Usage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The usage is really simple, assuming the &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt; are installed and the current user belongs to the docker group;
 all is needed is running the &lt;code&gt;hawkinit&lt;/code&gt; and interactively answer all the questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ npm install hawkinit -g
$ hawkinit&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_example&quot;&gt;Example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is an example of spinning up two standalone WF servers reporting to Hawkular Services with one Cassandra node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-12-22-demo.gif&quot; alt=&quot;usage demo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_contributions&quot;&gt;Contributions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The github repository is &lt;a href=&quot;https://github.com/Jiri-Kremser/hawkinit&quot;&gt;here&lt;/a&gt; and contributions are more than welcome.
In case of any issue, do not hesitate and report it &lt;a href=&quot;https://github.com/Jiri-Kremser/hawkinit/issues&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular APM improvements for OpenShift</title>
      <link>http://www.hawkular.org/blog/2016/12/16/hawkular-apm-vertx-opentracing-openshift.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/12/16/hawkular-apm-vertx-opentracing-openshift.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our last release, we added a few improvements for applications deployed in
OpenShift, such as an automatic way to recognize the name of the service. The
name consists of the OpenShift&amp;#8217;s build name for the application,
prepended with the namespace to avoid clashes. For instance, if you have
the &quot;Order Manager&quot; application deployed in OpenShift under the build name
&lt;code&gt;order-manager-1&lt;/code&gt;, under a project (namespace) called &lt;code&gt;my-project&lt;/code&gt;, the service
name that is visible on Hawkular APM is &lt;code&gt;my-project.order-manager&lt;/code&gt;. In addition,
we are recording also the build stamp, such as &lt;code&gt;my-project.order-manager-1&lt;/code&gt; for
the first build of the service &lt;code&gt;my-project.order-manager&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-12-16-service-name.png&quot; alt=&quot;Service name from environment&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also improved our Vert.x OpenTracing, promoting it to the &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples&quot;&gt;examples&lt;/a&gt;
directory on the main Hawkular APM source code repository. We refactored it and
prepared an Ansible playbook, so that it can be deployed in just a few minutes,
preparing the whole OpenShift infrastructure as needed. Do give it a try!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a Fedora 25 with Docker, OpenShift Origin Clients and Ansible, all that
it&amp;#8217;s required is this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ansible-playbook vertx-opentracing.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the playbook finishes running, you&amp;#8217;ll have an OpenShift cluster running
with Hawkular APM on it and our Eclipse Vert.x example &quot;Order Manager&quot;,
instrumented using OpenTracing APIs. Refer to the &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples/vertx-opentracing#opentracing---microservices-with-vertx&quot;&gt;README&lt;/a&gt;
file on the example&amp;#8217;s source code directory for more info on how to access the
OpenShift console and Hawkular APM UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a completely fresh install on Fedora 25, the whole environment can be
created with the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo dnf install -y docker origin-clients ansible maven
sudo sh -c &quot;echo \&quot;INSECURE_REGISTRY=&apos;--insecure-registry 172.30.0.0/16&apos;\&quot; &amp;gt;&amp;gt; /etc/sysconfig/docker&quot;
sudo systemctl start docker
mkdir -p /opt/hawkular-apm/ ; cd /opt/hawkular-apm/
git clone https://github.com/hawkular/hawkular-apm.git .
mvn clean install -Dcheckstyle.skip=true -Dlicense.skip=true -Dxml.skip=true -DskipTests -Dnoui
cd examples/vertx-opentracing
ansible-playbook vertx-opentracing.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need any assistance, feel free to join us via IRC at &lt;code&gt;#hawkular&lt;/code&gt;
on Freenode.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.22.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/12/06/hawkular-metrics-0.22.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 6 Dec 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/12/06/hawkular-metrics-0.22.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.22.0 of Hawkular Metrics.This release is anchored by performance and compression enhancements.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Compression&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Prevent OutOfMemoryError on Cassandra when compression job runs (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-520&quot;&gt;HWKMETRICS-520&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Avoid compression job executing in a loop when execution falls behind (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-536&quot;&gt;HWKMETRICS-536&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Avoid future executions of compression job from not running if Cassandra is shutdown abruptly (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-518&quot;&gt;HWKMETRICS-518&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Added a flag to disable the compression job; the data will be persisted and retrieved without compression (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-524&quot;&gt;HWKMETRICS-524&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;The block size for compression is now configurable (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-545&quot;&gt;HWKMETRICS-545&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;The compression job can now be triggered manually (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-502&quot;&gt;HWKMETRICS-502&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Server Clustering&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The external alerter is now cluster-aware and will not process the same request on multiple nodes (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-515&quot;&gt;HWKMETRICS-515&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Schema updates are correctly applied when multiple servers are started at the same time (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-514&quot;&gt;HWKMETRICS-514&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Added Cassandra connection information to the status page and created an admin version with detailed Cassandra cluster information (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-526&quot;&gt;HWKMETRICS-526&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Internal system metrics are now persisted under &lt;code&gt;admin&lt;/code&gt; tenant; this gives a good overview of the current system load (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-550&quot;&gt;HWKMETRICS-550&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;REST API&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Added endpoint to allow fetching of available tag names (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-532&quot;&gt;HWKMETRICS-532&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue where the API would report an internal server error on invalid query (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-543&quot;&gt;HWKMETRICS-543&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hawkular Alerting - Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;End to end performance enhancements&lt;/li&gt;
      &lt;li&gt;Major improvements to &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API documentation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;New cross-tenant endpoints for for fetching alerts&lt;/li&gt;
      &lt;li&gt;Email and webhook action plugins are now packaged in the main distribution (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-552&quot;&gt;HWKMETRICS-552&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Alerting - included&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/projects/HWKALERTS/versions/12331986&quot;&gt;1.4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API Documentation&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Examples&lt;/a&gt;,&lt;br/&gt;&lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.22.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.22.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS/versions/12332012&quot;&gt;https://issues.jboss.org/projects/HWKMETRICS/versions/12332012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Using Hawkular APM on OpenShift</title>
      <link>http://www.hawkular.org/blog/2016/11/25/hawkular-apm-on-openshift.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/11/25/hawkular-apm-on-openshift.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the past few weeks, we&amp;#8217;ve been improving how Hawkular APM can be used in OpenShift, making it easier after each iteration. At the
moment, it&amp;#8217;s possible to get a complete Hawkular APM server instance with a single command, if you already have a running OpenShift instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two files available at the moment that can be used in conjunction with OpenShift:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jboss-dockerfiles/hawkular-apm/blob/master/openshift-templates/hawkular-apm-server-deployment.yml&quot;&gt;hawkular-apm-server-deployment.yml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jboss-dockerfiles/hawkular-apm/blob/master/openshift-templates/hawkular-apm-server.yml&quot;&gt;hawkular-apm-server.yml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first creates a complete deployment of Hawkular APM, including the required services and routes, as well as a
default user (&lt;code&gt;admin&lt;/code&gt;/&lt;code&gt;password&lt;/code&gt;).
The second creates a &quot;template&quot;, which can be used to create new services, and it&amp;#8217;s commonly known as &quot;instant app&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you just want to give Hawkular APM a shot, the first file is your best option.
If you are a service provider and want to let your users deploy APM on demand, on their own namespaces and possibly
customizing the deployment, then the second should be used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_deploying_a_hawkular_apm_instance_into_openshift&quot;&gt;Deploying a Hawkular APM instance into OpenShift&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In short, if you already have a working OpenShift installation, this is all that should be required to get a Hawkular APM server running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;oc create -f https://raw.githubusercontent.com/jboss-dockerfiles/hawkular-apm/master/openshift-templates/hawkular-apm-server-deployment.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Fedora 24 or newer, you can get a complete OpenShift environment ready by running the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine create -d virtualbox --virtualbox-memory 8192 --virtualbox-cpu-count 4 --engine-insecure-registry 172.30.0.0/16 openshift
oc cluster up --docker-machine=openshift&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few seconds, you should see a new service on your OpenShift project, like the one on the following image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-11-25-apm-deployed-openshift.png&quot; alt=&quot;APM Deployed on OpenShift&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can open the Hawkular APM web UI by clicking on the link, shown as &quot;https://hawkular-apm-myproject.192.168.178.26.xip.io&quot; on
the image above. The username is &lt;code&gt;admin&lt;/code&gt;, and the password is &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_deploying_a_hawkular_apm_template_into_openshift&quot;&gt;Deploying a Hawkular APM template into OpenShift&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We &lt;a href=&quot;https://www.youtube.com/watch?v=GwnmX_NkyeA&quot;&gt;recorded&lt;/a&gt; a demo with this option, showing also a bit of one of our
OpenTracing examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might also choose to deploy a template into your OpenShift infrastructure. This would allow your users to deploy
their own instances of Hawkular APM, within their own namespaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do that, the following command can be used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;oc login -u system:admin
oc create -n openshift -f https://raw.githubusercontent.com/jboss-dockerfiles/hawkular-apm/master/openshift-templates/hawkular-apm-server.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the command above installs the template into the &lt;code&gt;openshift&lt;/code&gt; namespace, meaning that it&amp;#8217;s available to every user
on your OpenShift cluster. If you want to restrict this template to a single project, remove the &lt;code&gt;-n openshift&lt;/code&gt; option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-11-25-apm-template.png&quot; alt=&quot;APM template on OpenShift&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first option on the image shows our Hawkular APM as an instant app. Click on it, and the following screen is shown,
allowing the customization of the Hawkular APM instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-11-25-apm-template-customization.png&quot; alt=&quot;APM template on OpenShift&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, your Hawkular APM server is ready to start processing data from applications instrumented with OpenTracing providers,
Hawkular APM agent or even ZipKin clients. Check out our &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples&quot;&gt;examples&lt;/a&gt;
and use them as reference to integrate in your own projects, or browse our &lt;a href=&quot;https://hawkular.gitbooks.io/hawkular-apm-user-guide/content/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to check out what our UI can offer, the easiest way is to run our
&lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/tests/app/vertx-opentracing&quot;&gt;vertx OpenTracing example&lt;/a&gt;, the same we used in our
&lt;a href=&quot;https://www.youtube.com/watch?v=GwnmX_NkyeA&quot;&gt;recorded demo&lt;/a&gt;. Refer to the example&amp;#8217;s documentation on how to run it and generate data on the server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular APM OpenTracing JavaScript</title>
      <link>http://www.hawkular.org/blog/2016/11/16/hawkular-apm-opentracing-js.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/11/16/hawkular-apm-opentracing-js.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the latest &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/releases/tag/0.12.0.Final&quot;&gt;release&lt;/a&gt;
of Hawkular APM we have added a new OpenTracing implementation. This
time we decided to add a JavaScript provider, therefore, it is now possible to get timing metrics
from a polyglot environment instrumented with our Java and JavaScript OpenTracing implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_library&quot;&gt;Library&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Library is implemented against the latest version (0.13.0) of OpenTracing JavaScript API.
Data is reported to APM via HTTP. For debugging purposes it is possible to use a console recorder.
From the sampling perspective it allows developers to add their own sampling mechanism.
In the future releases we will add more built-in samplers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following code snippet shows how to initialize and create spans in JavaScript code. It works for
a web browser and Node.js application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tracer initialization.&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const opentracing = require(&apos;opentracing&apos;);
const hawkularAPM = require(&apos;hawkular-apm-opentracing&apos;);

const tracer = new hawkularAPM.APMTracer({
    recorder: new hawkularAPM.ConsoleRecorder(),
    sampler: new hawkularAPM.AlwaysSampledSampler()
});

opentracing.initGlobalTracer(tracer);

const span = opentracing.globalTracer().startSpan(&apos;name&apos;);
span.finish();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the initialization tracer instance can be obtained via &lt;code&gt;opentracing.globalTracer()&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_want_to_try_it&quot;&gt;Want To Try It?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our &lt;a href=&quot;https://github.com/hawkular/hawkular-apm-opentracing-javascript/tree/master/examples&quot;&gt;Github&lt;/a&gt; repository contains
two example applications. One of which is tracing requests from a web browser across Node.js
backed services. Examples contain detailed instructions on how to run them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following code snippet shows tracing server requests in Node.js express framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tracing requests on the server.&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const app = express();

app.get(&apos;/api&apos;, function(req, res) {
    const serverSpan = opentracing.globalTracer().startSpan(&apos;api&apos;, {
        childOf: tracer.extract(opentracing.FORMAT_TEXT_MAP, req.headers),
        tags: {
            &apos;http.method&apos;: &apos;GET&apos;,
            &apos;http.url&apos;: `http://${req.headers.host}${req.url}`,
        }
    });

    /**
     * Business logic
     */

    res.writeHead(200);
    res.end(&apos;/api&apos;);
    serverSpan.setTag(&apos;http.status_code&apos;, 200);
    serverSpan.finish();
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hawkular APM: &lt;a href=&quot;https://github.com/hawkular/hawkular-apm&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-apm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular APM OpenTracing JavaScript: &lt;a href=&quot;https://github.com/hawkular/hawkular-apm-opentracing-javascript&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-apm-opentracing-javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NPM Hawkular APM OpenTracing JavaScript: &lt;a href=&quot;https://www.npmjs.com/package/hawkular-apm-opentracing&quot; class=&quot;bare&quot;&gt;https://www.npmjs.com/package/hawkular-apm-opentracing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Services 0.20.0.Final</title>
      <link>http://www.hawkular.org/blog/2016/11/09/hawkular-services-0.20.0.Final.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Wed, 9 Nov 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/11/09/hawkular-services-0.20.0.Final.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular services is a ready to run distribution of Hawkular-Metrics with Alerts, Inventory, the WildFly agent and other components
The version &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.20.0.Final/hawkular-services-dist-0.20.0.Final.zip&quot;&gt;0.20.0.Final&lt;/a&gt; has just been released and is ready to be tested and integrated with other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_on_the_release_number&quot;&gt;On the release number&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular-services is long out of the 0.0.&lt;em&gt;z&lt;/em&gt; numbers, even if the previous releases only looked at the &lt;em&gt;z&lt;/em&gt;.
To cater for this we have made a big jump to 0.&lt;em&gt;20&lt;/em&gt;.0.Final. There was a 0.19 yesterday, but we had
 to update the included release of Hawkular-metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_in_this_release&quot;&gt;What&amp;#8217;s in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes components&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inventory is now at v 1.1.0, which features a new api. This brings support for internal H2
database (taken by default if you don&amp;#8217;t specify and additional flags) and Postgres as storage backend&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular-Metrics is at v 0.21.5 and includes alerting 1.3.2 (we call this HAM now :-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular-agent has been bumped to v 0.24.1 to make use of the new Inventory api.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is released every week on Tuesdays.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started&quot;&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started with Hawkular Services, &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.20.0.Final/hawkular-services-dist-0.20.0.Final.zip&quot;&gt;download the latest release&lt;/a&gt;, unzip it,
add a user and set the Agent to use the credentials for the user just added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be accomplished with the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export HAWKULAR_HOME=&quot;/path/to/hawkular-services&quot;
export HAWKULAR_USERNAME=&quot;jdoe&quot;
export HAWKULAR_PASSWORD=&quot;password&quot;

cd &quot;${HAWKULAR_HOME}&quot;
&quot;${HAWKULAR_HOME}/bin/add-user.sh&quot; \
  -a \
  -u &quot;${HAWKULAR_USERNAME}&quot; \
  -p &quot;${HAWKULAR_PASSWORD}&quot; \
  -g read-write,read-only
&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting the server, you need to have Cassandra 3.0.9 up and running with the RPC port enabled either via
setting the env variable of &lt;code&gt;CASSANDRA_START_RPC&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or by editing &lt;code&gt;cassandra.yml&lt;/code&gt; and setting it there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;# Whether to start the thrift rpc server.
start_rpc: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;ccm&lt;/code&gt; you can use this to update the config: &lt;code&gt;ccm updateconf &apos;start_rpc: true&apos;&lt;/code&gt;.
Another option is via &lt;code&gt;nodetool enablethrift&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_using_postgres&quot;&gt;Using Postgres&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use Postgres as backend you need to pass additional properties to the &lt;code&gt;standalone.sh&lt;/code&gt; command
above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; \
    -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD} \
    -Dhawkular.inventory.sql.jdbc.url=jdbc:postgresql://1.2.3.4:5432/hawkular \
    -Dhawkular.inventory.sql.jdbc.username=jdoe \
    -Dhawkular.inventory.sql.jdbc.password=password&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use a postgres database called &lt;em&gt;hawkular&lt;/em&gt; on host &lt;em&gt;1.2.3.4&lt;/em&gt; owned by a user &lt;em&gt;jdoe&lt;/em&gt; with a
 password of &lt;em&gt;password&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also
&lt;a href=&quot;http://www.hawkular.org/hawkular-services/docs/user-guide/inventory/index.html#configuration-properties&quot; class=&quot;bare&quot;&gt;http://www.hawkular.org/hawkular-services/docs/user-guide/inventory/index.html#configuration-properties&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_build_from_master_and_cassandra&quot;&gt;Build from master and Cassandra&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you build from master, you can pass &lt;code&gt;-Pembeddedc&lt;/code&gt; to get a distribution with embedded Cassandra for local development.
Similarly if you build via &lt;code&gt;-Pdev&lt;/code&gt; a default user of &lt;em&gt;jdoe/password&lt;/em&gt; will be installed and also be used with the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_use_grafana_with_hawkular_services&quot;&gt;Use Grafana with Hawkular-services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do now have a Grafana datasource to make it easier to connect to Hawkular-services from Grafana.
You can download it from &lt;a href=&quot;https://grafana.net/plugins/hawkular-datasource&quot;&gt;Grafana.net&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;website of the datasource tells more&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started_via_inofficial_docker_builds&quot;&gt;Get started via (inofficial) Docker builds&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are inofficial Docker images of the release and also an instrumented WildFly available on
DockerHub at &lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkular-services/&quot;&gt;Hawkular services&lt;/a&gt;
and &lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkfly/&quot;&gt;Instrumented WildFly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both images have been instrumented with the &lt;em&gt;jdoe/password&lt;/em&gt; user for the Hawkular server and the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&quot; class=&quot;bare&quot;&gt;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&lt;/a&gt; on some more
details about using those images.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.21.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/10/25/hawkular-metrics-0.21.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/10/25/hawkular-metrics-0.21.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.21.0 of Hawkular Metrics.This release is anchored by performance enhancements and general fixes.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cassandra&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Cassandra 3.0.9 is now the supported version of Cassandra.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Note: this is a rollback from previously supported version of 3.7 due to Cassandra community recommendations for stability and production deployment. Cassandra 3.7 or 3.9 are still compatible but development and testing now use 3.0.9 release.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compression&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Fixed an issue that allowed duplicate instances of the compression job to get scheduled on server restart (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-492&quot;&gt;HWKMETRICS-492&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Improved the fault tolerance of the compression job (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-494&quot;&gt;HWKMETRICS-494&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Improved the performance of the merge process for reading compressed data (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-488&quot;&gt;HWKMETRICS-488&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed wrong ordering when fetching compressed and uncompressed data (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-506&quot;&gt;HWKMETRICS-506&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Compression job provides back pressure (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-500&quot;&gt;HWKMETRICS-500&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;The job scheduler now handles failure scenarios (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-505&quot;&gt;HWKMETRICS-505&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cassandra Schema&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Fixed an issue where the server can fail to start due to Cassalog being in inconsistent state (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-495&quot;&gt;HWKMETRICS-495&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;gc_grace_second&lt;/code&gt; is set to zero for single node clusters (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-381&quot;&gt;HWKMETRICS-381&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;API Updates&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Inserting data points has server side retries to increase the fault tolerance for simple error scenarios (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-510&quot;&gt;HWKMETRICS-510&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;fromEarliest&lt;/code&gt; parameter is now supported in all query endpoints (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-445&quot;&gt;HWKMETRICS-445&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Non-existant tag queries are now supported via &lt;code&gt;!tag:*&lt;/code&gt; format; example: &lt;code&gt;!partition:*&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-480&quot;&gt;HWKMETRICS-480&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configuration&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;The configuration options did not have a consistent naming scheme. &lt;code&gt;hawkular-metrics&lt;/code&gt;, &lt;code&gt;hawkular.metrics&lt;/code&gt;, and &lt;code&gt;hawkular&lt;/code&gt; prefixes were used along no prefixes at all.&lt;/li&gt;
      &lt;li&gt;In this release the naming schema has been standardized to &lt;code&gt;hawkular.metrics.*&lt;/code&gt; for metrics specific configuration and &lt;code&gt;hawkular.*&lt;/code&gt; for general configuration.&lt;/li&gt;
      &lt;li&gt;Here is list of all configuration options currently available: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/blob/release/0.21.0/api/metrics-api-util/src/main/java/org/hawkular/metrics/api/jaxrs/config/ConfigurationKey.java#L29&quot;&gt;ConfigurationKey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-508&quot;&gt;HWKMETRICS-508&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Alerting - included&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/projects/HWKALERTS/versions/12331985&quot;&gt;1.3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;REST API Documentation&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Examples&lt;/a&gt;,&lt;br/&gt;&lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.21.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.21.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS/versions/12331718&quot;&gt;https://issues.jboss.org/projects/HWKMETRICS/versions/12331718&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Define Alert Triggers via HawkFX</title>
      <link>http://www.hawkular.org/blog/2016/10/24/hawkfx-alerts.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/10/24/hawkfx-alerts.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HawkFX is an explorer for Hawkular. It is a pet project of mine and &lt;a href=&quot;https://github.com/pilhuhn/hawkfx&quot;&gt;hosted on
Github&lt;/a&gt;. It now has the ability to define alerting triggers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular-services and now also Hawkular-Metrics standalone have the ability to fire alerts when certain conditions
are met. To define those conditions, one creates a &lt;em&gt;trigger&lt;/em&gt; via
the &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;Hawkular-Alerts api&lt;/a&gt;. The alerting team has also written a
&lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;developer guide&lt;/a&gt; that explains the concepts and
terms behind Hawkular-Alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HawkFX now has the ability to directly insert new triggers. For this purpose I have created a
&lt;a href=&quot;http://pilhuhn.blogspot.de/2016/10/a-dsl-for-alert-trigger-definitions-in.html&quot;&gt;DSL&lt;/a&gt; to allow to define triggers
in a more &apos;natural language&apos;. More on this below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawkfx-trigger-menu.png&quot; alt=&quot;HawkFX trigger context menu&quot; width=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Context menu&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you right-click on a metric in the HawkFX list of metrics, there is now a new context menu item &apos;New trigger&apos;,
that leads you to the insert screen, where you can insert the definition. This will contain a canned definition
to start with.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawkfx-trigger-insert-box.png&quot; alt=&quot;HawkFX trigger insert&quot; width=&quot;600&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Alert trigger insert screen&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you are done writing the definition, you can click on the &lt;em&gt;parse&lt;/em&gt; button at the bottom to check the definition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_examples&quot;&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Simple threshold trigger for gauges&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;define trigger &quot;MyTrigger&quot;
 ( threshold &quot;myvalue&quot; &amp;gt; 3 )&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;and for counters&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;define trigger &quot;MyTrigger&quot;
( threshold counter &quot;myvalue&quot; &amp;gt; 3 )&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see from the previous two examples that gauges are the default for &lt;em&gt;threshold&lt;/em&gt; triggers, so you can omit that
 keyword.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Trigger for availability, with high severity that is initially disabled&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;define trigger &quot;MyTrigger&quot;
  disabled
  severity HIGH
  ( availability &quot;mymetric&quot; is DOWN )&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Trigger that fires when two conditions are true&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;define trigger &quot;MyTrigger&quot;
  AND(
    ( threshold counter &quot;mycount&quot; &amp;lt; 5 )
    ( string &quot;mymetric&quot; CO &quot;ERROR&quot; )
  )&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Trigger that disables itself after firing&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;define trigger &quot;MyTrigger&quot;
 ( threshold &quot;myvalue&quot; &amp;gt; 3 )
 auto-disable&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_state_of_the_dsl&quot;&gt;State of the DSL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DSL is in flux and will be augmented and refined. So far it only contains a basic set of instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DSL tries to make life easy by trying to set sensible defaults (e.g. a trigger is enabled by default - you have
to provide the &lt;em&gt;disable&lt;/em&gt; command explicitly).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested in the grammar behind the DSL, visit the
&lt;a href=&quot;https://github.com/pilhuhn/hawkfx/blob/master/lib/alert_trigger.treetop&quot;&gt;definition file&lt;/a&gt;.
For examples about supported usage, you can have a look at
the &lt;a href=&quot;https://github.com/pilhuhn/hawkfx/blob/master/spec/alert_trigger_parser_spec.rb&quot;&gt;spec&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope to be able to extend the DSL going forward and get it into a state where it is useful for people.
At least it makes it easy for me to get triggers defined when working on Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Going forward it could also be possible to offer DSLs that mimic if-this-then-that or Zabbix rules, so that users of
those systems can (re-)use their existing rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As &lt;a href=&quot;http://hawkular.org/blog/2016/07/13/hawkfx.html&quot;&gt;written before&lt;/a&gt;, HawkFX is a Pet project of mine and comes with no
support.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Microservices with OpenShift, Hawkular Metrics and Grafana</title>
      <link>http://www.hawkular.org/blog/2016/10/24/hawkular-metrics-openshift-and-grafana.html</link>
      <author>noreply@hawkular.org (Joel Takvorian)</author>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/10/24/hawkular-metrics-openshift-and-grafana.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenShift, Hawkular Metrics and Grafana are three great tools that we can combine to build a powerful monitoring system for microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grafana is the visualization layer that enables building custom and dynamic dashboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Metrics is the robust and flexible layer that is used for metrics storage and querying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And OpenShift 3 is the new container platform from Red Hat built on top of Docker and Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how to make them work together and visualize our microservices metrics in Grafana.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_preparing_openshift&quot;&gt;Preparing OpenShift&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I assume you already have access to a running OpenShift Origin (1.0.8 or later), but if you don&amp;#8217;t, you can &lt;a href=&quot;https://github.com/openshift/origin&quot;&gt;follow the installation steps&lt;/a&gt;. Or if you&amp;#8217;re a lazy boy/girl like me, you can use &lt;a href=&quot;https://github.com/jimmidyson/minishift&quot;&gt;MiniShift&lt;/a&gt; to get it running very quickly. Just make sure you assign enough memory and CPU resources to the VM; I could get everything running fine with 2 cores and 4GB, of course that will depend on your hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then follow the &lt;a href=&quot;https://github.com/openshift/origin-metrics&quot;&gt;origin-metrics installation steps&lt;/a&gt; to deploy Hawkular Metrics in OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that Grafana will not work on an insecure SSL connection to Hawkular. So you will have to provide your own certificates when creating the secret:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc secrets new metrics-deployer hawkular-metrics.pem=/path/to/hm.pem \
hawkular-metrics-ca.cert=/path/to/hm-ca.cert -n openshift-infra&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploying_a_microservice&quot;&gt;Deploying a Microservice&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will need to deploy some application in OpenShift. For this article I&amp;#8217;ll use some parts of the &lt;a href=&quot;https://htmlpreview.github.io/?https://github.com/redhat-helloworld-msa/helloworld-msa/blob/master/readme.html#_deploy_aloha_vert_x_microservice&quot;&gt;Red Hat Helloworld MSA&lt;/a&gt; to deploy &quot;Aloha&quot;, and later &quot;Bonjour&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc login -u ... -p ...
# The project name you choose here matters, because it will be the tenant ID in Hawkular
$ oc new-project test
$ git clone https://github.com/redhat-helloworld-msa/aloha
$ cd aloha/
$ oc new-build --binary --name=aloha -l app=aloha
$ mvn package; oc start-build aloha --from-dir=. --follow
$ oc new-app aloha -l app=aloha,hystrix.enabled=true
$ oc expose service aloha&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can open the OpenShift web console to see when Aloha is correctly deployed. And scale it up to 2 pods. The web console should show something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-aloha-openshift.png&quot; alt=&quot;Aloha in OpenShift&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_setup_hawkular_datasource_in_grafana&quot;&gt;Setup Hawkular Datasource in Grafana&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So now, let&amp;#8217;s have a look at Grafana. For this article I&amp;#8217;ve installed a recent version (3.1.1) and the &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;Hawkular Datasource plugin&lt;/a&gt; (1.0.3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Grafana, to configure the Hawkular Datasource, set the URL of the Metrics service in OpenShift, ending with &lt;em&gt;/hawkular/metrics&lt;/em&gt;. You should have something similar to &lt;em&gt;&lt;a href=&quot;https://metrics.192.168.42.63.xip.io/hawkular/metrics&quot; class=&quot;bare&quot;&gt;https://metrics.192.168.42.63.xip.io/hawkular/metrics&lt;/a&gt;&lt;/em&gt;. Access mode must be &lt;em&gt;Proxy&lt;/em&gt;. The tenant must be the name of the project in OpenShift where we&amp;#8217;ve created our sample application; so for my example here, it&amp;#8217;s just &quot;test&quot;. And finally, put the bearer token for the OpenShift API access. To quickly generate a short-lived token, you can navigate to &lt;em&gt;/oauth/token/request&lt;/em&gt; from your OpenShift base path (something like &lt;em&gt;&lt;a href=&quot;https://192.168.42.63:8443/oauth/token/request&quot; class=&quot;bare&quot;&gt;https://192.168.42.63:8443/oauth/token/request&lt;/a&gt;&lt;/em&gt;). For long-term usage you should rather &lt;a href=&quot;https://docs.openshift.com/container-platform/3.3/rest_api/index.html#rest-api-serviceaccount-tokens&quot;&gt;setup a service account&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-hawkular-datasource.png&quot; alt=&quot;Hawkular Datasource configuration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_create_the_dashboard&quot;&gt;Create the Dashboard&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can create a new dashboard. And a template variable, which will be the cornerstone of our dynamic dashboards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-templating.png&quot; alt=&quot;Open templating&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Open dashboard templating screen&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a variable named &lt;em&gt;app&lt;/em&gt;, select your Hawkular datasource and type in query: &lt;em&gt;tags/container_name:*&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can guess, it will search all known values of the tag &lt;em&gt;container_name&lt;/em&gt;. Once you&amp;#8217;ve typed the query, you should see your application names displayed at the bottom of the page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ticking &lt;em&gt;Multi-value&lt;/em&gt; and &lt;em&gt;Include All option&lt;/em&gt; is recommended as it will enable better filtering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-edit-variable.png&quot; alt=&quot;Editing variables&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this single variable, you will already be able to build a nice dynamic dashboard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you want to see the list of available tags created in OpenShift, you can fetch the metrics definitions with the following command: &lt;code&gt;&lt;code&gt;curl -X GET &lt;a href=&quot;https://yourserver/hawkular/metrics/metrics&quot; class=&quot;bare&quot;&gt;https://yourserver/hawkular/metrics/metrics&lt;/a&gt; -H &quot;Content-Type: application/json&quot; -H &quot;Hawkular-Tenant: your-tenant&quot; -H &quot;Authorization: Bearer your-bearer-token&quot;&lt;/code&gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, time to see nice charts! In the first row, we create a new panel of type Graph. In General tab, set &quot;Memory usage&quot; as the graph title. In Metrics tab, select your Hawkular datasource. Create a series of type Gauge, searching by tag, and give the following tags:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;container_name&lt;/em&gt;: &lt;em&gt;$app&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;descriptor_name&lt;/em&gt;: &lt;em&gt;memory/usage&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These tagged metrics are provided to Hawkular by OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-memory-usage.png&quot; alt=&quot;Memory usage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From now on, you can see the memory usage by pod instance and for all your applications. There are 2 series because we scaled the service to 2 pods earlier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can edit the Graph Axes to set Y-Unit &quot;Data &amp;gt; Bytes&quot; and Y-min 0. Note that you can also show stacked values from the Display tab. This is useful when you want to see the total amount of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we will show some aggregated stats. But before that, go back editing the Graph panel and, in the General tab, set span to 6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the Row menu create a new &lt;em&gt;Singlestat&lt;/em&gt; panel. Name it &lt;em&gt;&quot;Average, all pods&quot;&lt;/em&gt;, span 2, height 100px. In the Metrics tab, select your Hawkular datasource. &lt;em&gt;Search by tags&lt;/em&gt; using the same tags as before: &lt;em&gt;container_name&lt;/em&gt;: &lt;em&gt;$app&lt;/em&gt;, &lt;em&gt;descriptor_name&lt;/em&gt;: &lt;em&gt;memory/usage&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, there&amp;#8217;s some new options when querying from a Singlestat panel: Multiple series aggregation and Time aggregation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-singlestat.png&quot; alt=&quot;Singletat query&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a standard query by tag is submitted to Hawkular Metrics, the response may contain several series of data points, depending on the matching tags. Since we want here to get a single number, we will ask the plugin to perform a two-steps aggregation: a &quot;vertical&quot; aggregation that merges all series into a single one, and an &quot;horizontal&quot; aggregation that extracts a single stat from a time-series.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, when the &lt;em&gt;Multiple series aggregation&lt;/em&gt; is left to &lt;em&gt;None&lt;/em&gt;, Grafana reports a &lt;em&gt;Multiple Series Error&lt;/em&gt;. This is because the Singlestat panel doesn&amp;#8217;t know how to merge multiple series, so let&amp;#8217;s ask the Hawkular plugin to do it. Select &lt;em&gt;Sum&lt;/em&gt; instead of &lt;em&gt;None&lt;/em&gt;, and keep &lt;em&gt;Average&lt;/em&gt; for the time aggregation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now switch to the Options tab and change Unit to &quot;Data &amp;gt; bytes&quot;. Here, you can define thresholds to highlight high memory levels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Usually, Grafana&amp;#8217;s Singlestat panel performs time aggregation by itself, through the &lt;em&gt;value&lt;/em&gt; field on the &lt;em&gt;Big value&lt;/em&gt; row. But since the Hawkular plugin does it on its own, setting whatever value in this field won&amp;#8217;t have any effect.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-one-singlestat.png&quot; alt=&quot;A singlestat&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To finalize this dashboard setup for an application, click on the Singlestat panel title and duplicate 5 times. Edit each of the duplicates with the following names and queries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;Max, all pods&quot;: set &lt;em&gt;Time aggregation&lt;/em&gt; to &lt;em&gt;Max&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Live, all pods&quot;: set &lt;em&gt;Time aggregation&lt;/em&gt; to &lt;em&gt;Live&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Average per pod&quot;: set &lt;em&gt;Multiple series aggregation&lt;/em&gt; to &lt;em&gt;Average&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Max per pod&quot;: set &lt;em&gt;Multiple series aggregation&lt;/em&gt; to &lt;em&gt;Average&lt;/em&gt; and &lt;em&gt;Time aggregation&lt;/em&gt; to &lt;em&gt;Max&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Live per pod&quot;: set &lt;em&gt;Multiple series aggregation&lt;/em&gt; to &lt;em&gt;Average&lt;/em&gt; and &lt;em&gt;Time aggregation&lt;/em&gt; to &lt;em&gt;Live&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-6-singlestats.png&quot; alt=&quot;6 singlestats&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_adding_another_application&quot;&gt;Adding Another Application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we have a pretty nice dashboard for tracking memory usage on an application. Let&amp;#8217;s see what happens if we add a new application in OpenShift, under the same project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time I&amp;#8217;ll use &lt;em&gt;&lt;a href=&quot;https://htmlpreview.github.io/?https://github.com/redhat-helloworld-msa/helloworld-msa/blob/master/readme.html#_deploy_bonjour_nodejs_microservice&quot;&gt;Bonjour from Helloworld MSA&lt;/a&gt;&lt;/em&gt;, which is a Node.js microservice. After adding it to OpenShift, and again scaling it to 2 pods, see how it looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-apps-merged.png&quot; alt=&quot;Merged applications&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hmm, interesting. Our panels show new series: two for the &lt;em&gt;Bonjour&lt;/em&gt; microservice and one &lt;em&gt;docker-build&lt;/em&gt;. The later is caused by the build I triggered when I created &lt;em&gt;Bonjour&lt;/em&gt;. The sequence of the events is quite obvious when looking at the graphs. We don&amp;#8217;t necessarily want to monitor that, but it&amp;#8217;s nice to see how far we can go with Hawkular and OpenShift. Anyway, we can filter it out using the top combo box &lt;em&gt;Application&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But still, this is probably not what we would expect. What happens here is that the &lt;em&gt;$app&lt;/em&gt; variable we set up in queries is resolved into as many &lt;em&gt;container_name&lt;/em&gt; as there are, and result in the same number of series in a single graph. We can change that behaviour very easily thanks to a nice feature of Grafana: on the existing row, to the left, open the Row editor and in &lt;em&gt;Templating options&lt;/em&gt; activate duplication from variable &lt;em&gt;app&lt;/em&gt;. Save and refresh the browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-apps-rows.png&quot; alt=&quot;Applications per row&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s better! By turning on row duplication based on our variable, Grafana has created 3 rows, and for each one it provides to the Hawkular plugin just one value of &lt;em&gt;$app&lt;/em&gt; at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can monitor our microservices quite easily! If we don&amp;#8217;t want to see the &lt;em&gt;docker-build&lt;/em&gt; instance, just filter it out with the top combo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will just add a little enhancement to the dashboard, to make easier to understand which row is for which app. On the first row, add a new &lt;em&gt;Text&lt;/em&gt; panel, set its title empty, span 2, height 100px, mode HTML and content:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;&amp;lt;center&amp;gt;&amp;lt;p style=&apos;font-size: 40pt&apos;&amp;gt;$app&amp;lt;/p&amp;gt;&amp;lt;/center&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will display the microservice name. After some layout arrangement, here is the final result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-grafana-apps-rows-2.png&quot; alt=&quot;Applications per row bis&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can play around with OpenShift. Scale some pods up and down, and you&amp;#8217;ll get the metrics updated in Grafana. Just note that on downscaling, you&amp;#8217;ll have to wait a little bit (5 minutes) before seeing the &lt;em&gt;Live&lt;/em&gt; metrics on the &lt;em&gt;Singlestat&lt;/em&gt; panel being updated. This is because we&amp;#8217;re not sure if the absence of data is due to a pod being shut down, or a simple delay between measurements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_it_s_just_a_beginning&quot;&gt;It&amp;#8217;s Just a Beginning&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to the metrics provided in OpenShift, you can build more elaborate dashboards. Just change the &lt;em&gt;desciptor_name&lt;/em&gt; tag and see what&amp;#8217;s interesting for you, there are metrics on memory, CPU, network and filesystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But that&amp;#8217;s just the starting kit! &lt;a href=&quot;http://www.hawkular.org/hawkular-clients/&quot;&gt;The Hawkular Metrics ecosystem&lt;/a&gt; is rich and keeps growing, including a Wildfly agent, a Vert.x plugin, a DropWizard reporter, etc. And if that&amp;#8217;s not enough for you, it&amp;#8217;s very easy to integrate your own metrics: either through the client libraries or by directly calling the &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-metrics.html&quot;&gt;Metrics REST API&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good practice, when you define your own metrics, is to tag them with some pod-discriminant values. It can be through the environment variables set by Kubernetes/OpenShift, but it could also be the hostname since it&amp;#8217;s generated specifically for a pod. With that in mind, you will be able to monitor every part of your microservices architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can download this dashboard &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource/blob/master/dashboards/openshift-memory-example.json&quot;&gt;here on GitHub&lt;/a&gt; and import it in Grafana.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular APM supports OpenTracing and Alerts</title>
      <link>http://www.hawkular.org/blog/2016/10/17/hawkular-apm-opentracing-and-alerts.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/10/17/hawkular-apm-opentracing-and-alerts.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/releases/tag/0.11.0.Final&quot;&gt;latest Hawkular APM release&lt;/a&gt; includes two new features, a Java based &lt;a href=&quot;http://opentracing.io/&quot;&gt;OpenTracing&lt;/a&gt; provider and integration with &lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Hawkular Alerts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A video demonstrating these new features can also be viewed &lt;a href=&quot;https://youtu.be/HSWSiww07RE&quot;&gt;here&lt;/a&gt;. The video starts with an explanation of how a vertx application is instrumented using OpenTracing. If you want to skip that explanation, then start &lt;a href=&quot;https://youtu.be/HSWSiww07RE?t=7m47s&quot;&gt;here for an explanation of the alert trigger&lt;/a&gt; or start &lt;a href=&quot;https://youtu.be/HSWSiww07RE?t=9m20s&quot;&gt;here for the actual demo&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_an_example_vertx_application_instrumented_using_opentracing&quot;&gt;An Example Vertx Application instrumented using OpenTracing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As explained on the &lt;a href=&quot;http://opentracing.io/&quot;&gt;OpenTracing Website&lt;/a&gt;, it is &lt;em&gt;&quot;A vendor-neutral open standard for distributed tracing&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The project has been established to provide a consistent API, across multiple languages, to enable applications to be independent of any particular tracing solution. The currently supported languages are Java, Javascript, Go, Python, Objective-C and C++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of the most recent &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/releases/tag/0.11.0.Final&quot;&gt;Hawkular APM release (version 0.11)&lt;/a&gt; we have implemented a Java based OpenTracing provider. To help demonstrate its use, we have instrumented an example &lt;a href=&quot;http://vertx.io/&quot;&gt;Vert.x&lt;/a&gt; application that uses an asynchronous programming style with different interaction patterns (request/response and publish/subscribe). The code for the example can be found on &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/0.11.0.Final/examples/vertx-opentracing&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding OpentTracing instrumentation to an application essentially involves creating a set of spans to demarcate significant points in your application that you wish to monitor. When a service receives a request from a client, it should first attempt to extract any existing state information from the client request before creating the top level span for the service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;        SpanContext spanCtx = tracer.extract(Format.Builtin.TEXT_MAP,
                new HttpHeadersExtractAdapter(routingContext.request().headers()));

        Span ordersConsumerSpan = tracer.buildSpan(&quot;POST&quot;)
                .asChildOf(spanCtx)
                .withTag(&quot;http.url&quot;, &quot;/orders&quot;)
                .withTag(&quot;service&quot;, &quot;OrderManager&quot;)
                .withTag(&quot;transaction&quot;, &quot;Place Order&quot;)
                .start();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So in this case, we are receiving a request to place an order via a RESTful endpoint (i.e. POST /orders). The first statement extracts any trace state from the HTTP headers and stores them in a &lt;em&gt;SpanContext&lt;/em&gt; which is then used when creating a &lt;em&gt;childOf&lt;/em&gt; relationship for the top level span.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The additional tags we have specified are for information purposes. The &lt;code&gt;http.url&lt;/code&gt; is used to identify two things, that the endpoint type is HTTP, and secondly the URL is &lt;em&gt;/orders&lt;/em&gt;. The &lt;code&gt;service&lt;/code&gt; tag is used to add information on the dependency graph, and finally the &lt;code&gt;transaction&lt;/code&gt; enables the trace instance to be classified as belonging to this business transaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As this service is then making calls out to other services, we want to create a span to encapsulate the service invocation, and identify it as being a child span of the previously created span (i.e. to make it clear that this service invocation is being performed in the scope of the existing trace instance). The follow span represents the call out to the &lt;em&gt;AccountManager&lt;/em&gt; to get account information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;        Span getAccountSpan = tracer.buildSpan(&quot;GetAccount&quot;)
                .asChildOf(ordersConsumerSpan)
                .start();

        tracer.inject(getAccountSpan.context(), Format.Builtin.TEXT_MAP,
                new VertxMessageInjectAdapter(order));

        eb.send(&quot;AccountManager.getAccount&quot;, order, acctresp -&amp;gt; {
            getAccountSpan.finish();
            ....&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After creating the span, the second statement is used to &lt;em&gt;inject&lt;/em&gt; the trace state into the message being sent to the &lt;em&gt;AccountManager&lt;/em&gt;. This is necessary to ensure that the activities that occur within the account manager are linked to the same trace instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;        response.putHeader(&quot;content-type&quot;, &quot;application/json&quot;)
                .setStatusCode(202).end(order.encodePrettily());

        ordersConsumerSpan.setTag(&quot;orderId&quot;, order.getString(&quot;id&quot;));
        ordersConsumerSpan.setTag(&quot;itemId&quot;, order.getString(&quot;itemId&quot;));
        ordersConsumerSpan.setTag(&quot;accountId&quot;, order.getString(&quot;accountId&quot;));

        ordersConsumerSpan.finish();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, once the order has been confirmed, we associate some additional information with the top level span, before calling the &lt;code&gt;finish()&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This gives a brief insight into how an application can be instrumented to use the OpenTracing API. The &lt;em&gt;OrderManager&lt;/em&gt; example is slightly more complex, in that it also instruments a subsequent publish of the order confirmation on the event bus, and relates the instrumentation back to the original trace using the &lt;em&gt;FOLLOWS_FROM&lt;/em&gt; reference type. For more information please see the &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/0.11.0.Final/examples/vertx-opentracing&quot;&gt;code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_analysing_the_captured_information&quot;&gt;Analysing the Captured Information&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When starting the Hawkular APM console, the first page that is displayed shows details for the spans associated with the tracing information that has been captured from the application. The spans can represent &lt;em&gt;Consumers&lt;/em&gt; that receive service requests, &lt;em&gt;Producers&lt;/em&gt; that make service requests, or internal &lt;em&gt;Components&lt;/em&gt; (e.g. databases).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the values in the &lt;em&gt;Operation&lt;/em&gt; column have the same values that were used when building the spans in the vertx application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-apm-vertx-components.png&quot; alt=&quot;Application component details&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the &lt;strong&gt;Distributed Tracing&lt;/strong&gt; page, we can view the dependencies between the services that were involved in placing the order (i.e. we have selected the &lt;em&gt;Place Order&lt;/em&gt; business transaction). We could also filter based on individual properties to further refine the trace instances that are aggregated into this view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-apm-vertx-dt.png&quot; alt=&quot;Service dependencies&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we then select the &lt;strong&gt;Show &apos;n&apos; instance details&lt;/strong&gt; button, and select an instance from the table, you can view the flow of the individual trace instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-apm-vertx-instance.png&quot; alt=&quot;Trace instance for placing an order&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this diagram, you can see how the order is first passed to the &lt;em&gt;AccountManager&lt;/em&gt; to check the account id is known, followed by the &lt;em&gt;InventoryManager&lt;/em&gt; to check the stock level. At this point the order confirmation is created and returned to the client application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However this is not the end of the trace, as the Vertx application then publishes the order confirmation on the event bus, which is consumed by two services (&lt;em&gt;OrderLog&lt;/em&gt; and &lt;em&gt;InventoryManager&lt;/em&gt;) - which demonstrates tracing a publish/subscribe interaction. This behaviour is represented by a dotted line, as it is being performed concurrently, outside the scope of the main request/response interaction with the client application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following screenshot is the &lt;strong&gt;Business Transaction&lt;/strong&gt; page, which shows a summary of the business transactions being managed by the server. In previous releases, the business transactions were configured on the server, based on information captured using the non-intrusive agent based approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the explicit instrumentation of applications using the OpenTracing API, we have added the ability for the application to directly specify the name of the business transaction, which is then propagated with the trace state between interacting services. This means that business transactions don&amp;#8217;t need to be configured on the server when specified via the OpenTracing API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-apm-vertx-btxnsummary.png&quot; alt=&quot;Summary of business transactions&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a business transaction is selected from the summary page, it shows the detailed information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-10-17-apm-vertx-btxn-placeorder.png&quot; alt=&quot;Place order business transaction information&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This screenshot shows how information specified via tags on the OpenTracing spans can be used to show faults and properties for the business transaction. Selecting the segments in the fault and properties pie charts can be used to further filter the information displayed on this page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_summary&quot;&gt;Summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog and accompanying video we have shown how Hawkular APM can be used with an application instrumented using the standard OpenTracing API. The video also shows how trace information captured and reported to the Hawkular APM server can be used to trigger alerts defined using Hawkular Alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular APM Distributed Tracing of Polyglot Application using Zipkin Instrumentations</title>
      <link>http://www.hawkular.org/blog/2016/10/14/hawkular-apm-polyglot-zipkin.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/10/14/hawkular-apm-polyglot-zipkin.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latest focus of Hawkular APM has been in building a compatibility layer
for Zipkin instrumented applications. This enables Hawkular APM to leverage
Zipkin &lt;a href=&quot;http://zipkin.io/pages/existing_instrumentations.html&quot;&gt;instrumentation libraries&lt;/a&gt;
and instrument polyglot applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post we will look how to use Zipkin instrumentation libraries to instrument
polyglot environment and how the reported data looks in Hawkular APM and Zipkin server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_polyglot_application&quot;&gt;Polyglot Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A typical polyglot application consists of multiple services written in different programming
languages. These services interact together to fulfill some business needs or tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows the architecture of our polyglot application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-zipkin-polyglot-arch.png&quot; alt=&quot;apm zipkin polyglot arch&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Architecture of polyglot application&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are five applications written in 4 languages: Java, JavaScript, Python and Ruby.
It uses two databases MySQL and Apache Cassandra. Applications expose various REST endpoints
which simulate some behaviour. For example creating a user in a database or an asynchronous task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each application lives in a separate docker container. The whole environment can be deployed
using one line docker-compose command. Overall there are seven containers including Apache Kafka
to collect span data. The complete source code with instructions how to run it can be found on
&lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples/polyglot-zipkin&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_instrumentation_libraries&quot;&gt;Instrumentation Libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several &lt;a href=&quot;http://zipkin.io/pages/existing_instrumentations.html&quot;&gt;zipkin instrumentation libraries&lt;/a&gt;.
Developers have to choose the relevant libraries for their target language (and framework).
If there is no instrumentation for a specific framework they have to report spans to the
server explicitly, thus having an instrumentation library for a popular web framework is a big
advantage (not limited to web).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a typical microservice environment it is also necessary to add instrumentation for outgoing
requests so one application may use two or more Zipkin compliant instrumentation libraries.
These two implementations have to share trace context, and therefore proper initialization
is required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our applications are instrumented with following instrumentations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java (JAX-RS): &lt;a href=&quot;https://github.com/openzipkin/brave&quot;&gt;brave&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Dropwizard (JAX-RS): &lt;a href=&quot;https://github.com/smoketurner/dropwizard-zipkin&quot;&gt;dropwizard-zipkin&lt;/a&gt; uses brave&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache Cassandra: &lt;a href=&quot;https://github.com/thelastpickle/cassandra-zipkin-tracing&quot;&gt;cassandra-zipkin-tracing&lt;/a&gt; uses brave&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript (express, cujoJS): &lt;a href=&quot;https://github.com/openzipkin/zipkin-js&quot;&gt;zipkin-js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby (rack): &lt;a href=&quot;https://github.com/openzipkin/zipkin-ruby&quot;&gt;zipkin-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python (Pyramid): &lt;a href=&quot;https://github.com/Yelp/pyramid_zipkin&quot;&gt;pyramid_zipkin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python (Bravado): &lt;a href=&quot;https://github.com/Yelp/swagger_zipkin&quot;&gt;swagger_zipkin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These libraries are typically developed by a community and therefore reported data may differ. For
example a key of binary annotation representing HTTP URL can be &lt;code&gt;http.url&lt;/code&gt; or &lt;code&gt;http.uri&lt;/code&gt; or even
&lt;code&gt;http.path&lt;/code&gt;. Some of the libraries do not report HTTP status code. Name of a span often represents
HTTP method but some instrumentations put there URL or even other data (cassandra-zipkin-tracing).
It is not an invalid behaviour, just keep in mind when querying data or exporting to external systems for
an analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also a couple of
&lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples/polyglot-zipkin#known-issues&quot;&gt;issues&lt;/a&gt;
which can lead to an incorrect data presentation in Hawkular APM. Issues were also reported to the Zipkin project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_run_the_polyglot_application&quot;&gt;Run the Polyglot Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the instructions on
&lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples/polyglot-zipkin&quot;&gt;Github&lt;/a&gt;
to run the environment and start Hawkular APM server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Execute following requests which we will analyze in the following sections.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;requests&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example HTTP requests&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;1. curl -ivX GET &apos;http://localhost:3001/nodejs/hello&apos;
2. curl -ivX GET &apos;http://localhost:3000/dropwizard/A
3. curl -ivX GET &apos;http://localhost:3000/dropwizard/asyncTwoOutgoingCalls&apos;
4. curl -ivX POST -H &apos;Content-Type: application/json&apos; &apos;http://localhost:3001/nodejs/createUser&apos; -d &apos;{&quot;name&quot;: &quot;jdoe&quot;}&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server_comparisons&quot;&gt;Server Comparisons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section compares user interfaces of Hawkular APM and Zipkin server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_apm_server&quot;&gt;Hawkular APM Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Hawkular APM user interface we are going to look at distributed tracing tab. If you run previous
commands there should be some data to analyze.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following figure shows aggregated service interactions for selected initial endpoint (fourth request).
Nodes represent endpoint with URL and edges invocation flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nodes holds statistics information like average, minimum and maximum duration,
total number of executions, service name and invoked URL.
Edges contain timing information of a network latency. This screen only shows nodes with a URL.
Databases and other components are shown in trace detail view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For query capabilities we can specify time span, business transaction
(currently available only for java agent instrumentation and OpenTracing provider) and properties.
Properties represent binary annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-distributed-tracing-createUser.png&quot; alt=&quot;apm distributed tracing createUser&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Hawkular APM Distributed Tracing&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next screen shows instance details. In other words a list of traces for the selected initial endpoint.
Table contains basic information as collected properties, start time, principal (for java agent instrumentation)
and overall trace duration. Details button opens a detailed graph.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-instance-details.png&quot; alt=&quot;apm instance details&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Hawkular APM Instance Details&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the detailed view users can see different types of nodes: producers (client span),
consumers (server span) and components (databases, EJBs). Tooltip is showing recorded binary annotations.
In this case it is a CQL query for storing an user into Apache Cassandra.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This concrete graph starts with a consumer (REST handler) and produces two producers (outgoing requests). These
requests are consumed by dropwizard and wildfly-swarm application and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-instance-details-createUser.png&quot; alt=&quot;apm instance details createUser&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Hawkular APM Instance Details&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_zipkin_server&quot;&gt;Zipkin Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s compare this now how the native Zipkin server shows stuff. Please start Zipkin server and
execute requests from &lt;a href=&quot;#requests&quot;&gt;Example HTTP requests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing we are going to look at is a query capability. The user interface
offers to specify service name and names of recorded spans of a given service.
It is possible to specify span&amp;#8217;s start time, end time and duration range.
For a more specific query it is possible to query on binary annotations,
which is helpful if we are looking for specific spans, for example HTTP URL of invoked service.
In the following figure it can be seen that we specified URL and HTTP status code
of invoked service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The result of the query shows one trace which consist of 23 spans.
There is also a trace duration time and information which services were invoked within
that trace (also with a duration if possible to calculate).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-zipkin-createUser-query.png&quot; alt=&quot;apm zipkin createUser query&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Zipkin Query&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next screen is a trace instance view. It shows a timeline with timing data relative
to the trace start time. In the following figure there is a trace view for the third call.
It can be seen that it represent an asynchronous call. The first call ended before its
descendants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-zipkin-async.png&quot; alt=&quot;apm zipkin async&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Zipkin Trace Detail&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you click on a specific span it shows a span detail view with events recorded within
the span. There are also recorded binary annotations which denotes information like HTTP URL
or HTTP status code. Instrumented application can add custom binary annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-zipkin-async-span-detail.png&quot; alt=&quot;apm zipkin async span detail&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. Zipkin Span Detail&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last Zipkin screen is showing dependencies between services. When you click on a specific
service it shows how many calls were triggered from a service to a service. The more calls to
the service the wider arrow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/apm-zipkin-dependencies.png&quot; alt=&quot;apm zipkin dependencies&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. Zipkin Service Dependencies&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have seen a brief comparison of Hawkular APM and Zipkin server. Both of these projects
display data differently. Hawkular APM is doing more high level aggregations based on user
specific filter with calculation of statistics. On the other side Zipkin displays spans in
&quot;RAW&quot; fashion. There are definitely advantages and disadvantages for both of these approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are always interested to hear feedback from users on how the information presentation may be
improved to provide a powerful tool to analyze timing data of distributed applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Polyglot example: &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/tree/master/examples/polyglot-zipkin&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-apm/tree/master/examples/polyglot-zipkin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zipkin instrumentations: &lt;a href=&quot;http://zipkin.io/pages/existing_instrumentations.html&quot; class=&quot;bare&quot;&gt;http://zipkin.io/pages/existing_instrumentations.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular APM: &lt;a href=&quot;https://github.com/hawkular/hawkular-apm&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-apm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zipkin: &lt;a href=&quot;https://github.com/openzipkin/zipkin&quot; class=&quot;bare&quot;&gt;https://github.com/openzipkin/zipkin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.20.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/10/06/hawkular-metrics-0.20.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Thu, 6 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/10/06/hawkular-metrics-0.20.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.20.0 of Hawkular Metrics.This is a major release anchored by the inclusion of &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Hawkular Alerting&lt;/a&gt; in the distribution, a brand new compression algorithm, and numerous API enhancements and fixes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics + Alerting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hawkular Metrics now includes Hawkular Alerting out of the box; it&apos;s no longer necessary to install and manage two separate components. Hawkular Metrics delivers a single EAR file containing components from both projects. Incoming metric data is efficiently filtered and evaluated, generating alerts and events for defined triggers. The combined EAR artifact is the primary binary distribution of Hawkular Metrics going forward. For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-491&quot;&gt;HWKMETRICS-491&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hawkular Alerting Details&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version &lt;a href=&quot;https://issues.jboss.org/browse/HWKALERTS/fixforversion/12331699/&quot;&gt;1.2.1&lt;/a&gt; is included in this release&lt;/li&gt;
  &lt;li&gt;Project details and repository: &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts&quot;&gt;Hawkular Alerting - Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documentation: &lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-alerts.html&quot;&gt;Hawkular Alerting REST API Documentation&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/tree/master/examples&quot;&gt;Hawkular Alerting Examples&lt;/a&gt;,&lt;br/&gt;&lt;a href=&quot;http://www.hawkular.org/community/docs/developer-guide/alerts.html&quot;&gt;Hawkular Alerting Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Deployment Notes&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Deployment Naming
    &lt;ul&gt;
      &lt;li&gt;The new EAR should be deployed as &apos;hawkular-metrics.ear&apos; in WildFly. This naming is required to allow for proper dependencies to be established by the EAR components.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;standalone.xml&lt;/code&gt; Configuration
    &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;The following snippet must be added to &lt;code&gt;standalone.xml&lt;/code&gt; to support the Hawkular Alerting component. Add this additional cache-container entry after the existing cache-container entries:&lt;/p&gt;
      &lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;cache-container name=&amp;quot;hawkular-alerts&amp;quot; module=&amp;quot;org.jboss.as.clustering.infinispan&amp;quot;&amp;gt;
&amp;lt;local-cache name=&amp;quot;partition&amp;quot;/&amp;gt;
&amp;lt;local-cache name=&amp;quot;triggers&amp;quot;/&amp;gt;
&amp;lt;local-cache name=&amp;quot;data&amp;quot;/&amp;gt;
&amp;lt;local-cache name=&amp;quot;publish&amp;quot;/&amp;gt;
&amp;lt;local-cache name=&amp;quot;schema&amp;quot;/&amp;gt;
&amp;lt;/cache-container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usage Notes&lt;/p&gt;
&lt;p&gt;To use Hawkular Alerting with Hawkular Metrics there is a naming convention when defining trigger conditions. For a metric with name &apos;X&apos;, the alerting DataId to reference it will be &apos;&lt;prefix&gt;_X&apos;, where the &lt;prefix&gt; depends on the metric&apos;s type. For example, let&apos;s consider a metric with name &apos;HeapUsed&apos; and type &apos;gauge&apos;. This example defines a trigger condition to test if the used heap exceeded 80%: &lt;code&gt;hm_g_HeapUsed &amp;gt; .8&lt;/code&gt;. The &apos;hm_g_&apos; prefix indicates that HeapUsed is a gauge.&lt;/p&gt;
&lt;p&gt;Because Hawkular Metrics allows the same metric name for different types, the prefix is needed to make clear the target metric. The prefixes are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;hm_a: availability&lt;/li&gt;
  &lt;li&gt;hm_c: counter&lt;/li&gt;
  &lt;li&gt;hm_cr: counter rate&lt;/li&gt;
  &lt;li&gt;hm_g: gauge&lt;/li&gt;
  &lt;li&gt;hm_gr: gauge rate&lt;/li&gt;
  &lt;li&gt;hm_s: string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Compression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hawkular Metrics will now compress all the data with a compression scheme based on Facebook&apos;s Gorilla paper. A job will be run every two hours that compresses data received during the 2 hour block since last compression (there&apos;s one hour time for out-of-order writes to be written to the Cassandra). These data points are then written to a new storage format that&apos;s designed after the Gorilla compression and also compressed with the LZ4 algorithm to give even better compression ratio. Benefits include a faster reading time of larger block of datapoints and very large disk space savings. For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-464&quot;&gt;HWKMETRICS-464&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other major changes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;REST API - Query Improvements&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Querying raw &amp;amp; rate data by tags is now also possible via POST &lt;code&gt;{metric_type}/query&lt;/code&gt; endpoints for all types of metrics (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-466&quot;&gt;HWKMETRICS-466&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Added new POST endpoints for stats &lt;code&gt;gauges/stats/query&lt;/code&gt; and &lt;code&gt;counters/stats/query&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-465&quot;&gt;HWKMETRICS-465&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;It is now possible to fetch metric definitions filtered by a list of ids not just tags (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-461&quot;&gt;HWKMETRICS-461&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cassandra Driver Configuration&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Driver configuration options are now exposed for connection and request timeouts&lt;/li&gt;
      &lt;li&gt;Connection timeout can be configured via &lt;code&gt;CASSANDRA_CONNECTION_TIMEOUT&lt;/code&gt; environment variable, or &lt;code&gt;hawkular-metrics.cassandra.connection.timeout&lt;/code&gt; system property; value is specified in milliseconds and defaults to 5 seconds.&lt;/li&gt;
      &lt;li&gt;Request timeout can be configured via &lt;code&gt;CASSANDRA_REQUEST_TIMEOUT&lt;/code&gt; environment variable, or &lt;code&gt;hawkular-metrics.cassandra.request.timeout&lt;/code&gt; system property; value is specified in milliseconds and defaults to 12 seconds.&lt;/li&gt;
      &lt;li&gt;For more details: (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-490&quot;&gt;HWKMETRICS-490&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Job Scheduler&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Duplicate instances of jobs were wrongly scheduled on server restart because the job scheduler was not checking if the job was already scheduled (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-461&quot;&gt;HWKMETRICS-461&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Triggers now have a delay to properly schedule jobs in the future (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-224&quot;&gt;HWKMETRICS-224&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Resolved an issue where long running job can miss future executions because the current execution takes longer than the repeat interval (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-477&quot;&gt;HWKMETRICS-477&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Prevent execution of a job multiple times for the same execution time (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-486&quot;&gt;HWKMETRICS-486&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;RepeatingTrigger now allows specifying trigger start time (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-476&quot;&gt;HWKMETRICS-476&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Admin Endpoints&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Admin related endpoints are going to be protected via an admin token, to be sent for admin related REST endpoints via Hawkular-Admin-Token request header&lt;/li&gt;
      &lt;li&gt;The first endpoint to be protected by this mechanism is &lt;code&gt;/tenants&lt;/code&gt; since its functionality is cross tenant&lt;/li&gt;
      &lt;li&gt;The admin token can be set via command line arguments or environment variable at container startup; by default it is not set which means no access to protected endpoints&lt;/li&gt;
      &lt;li&gt;This is the foundation for adding more admin related functionality in upcoming releases (such as Cassandra cluster metrics, system telemetry, or admin operations)&lt;/li&gt;
      &lt;li&gt;The details:
        &lt;ul&gt;
          &lt;li&gt;system property key: hawkular.metrics.admin-token&lt;/li&gt;
          &lt;li&gt;environment variable: ADMIN_TOKEN&lt;/li&gt;
          &lt;li&gt;default value: null (admin endpoints are not accessible until set)&lt;/li&gt;
          &lt;li&gt;header name: Hawkular-Admin-Token&lt;/li&gt;
          &lt;li&gt;stored on the system config using one way hashing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-478&quot;&gt;HWKMETRICS-478&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Metrics Clients&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.20.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.20.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12331360&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12331360&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Matt Wringe, Michael Burman, Joel Takvorian, Jay Shaughnessy, Lucas Ponce, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Using Hawkular APM on Red Hat&apos;s Microservices Reference Architecture example</title>
      <link>http://www.hawkular.org/blog/2016/09/19/hawkular-apm-on-msa.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/09/19/hawkular-apm-on-msa.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The focus of the &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/releases/tag/0.10.0.Final&quot;&gt;latest Hawkular APM release&lt;/a&gt;
has been in building a compatibility layer for ZipKin-aware applications. In this blog post, we&amp;#8217;ll show how Hawkular APM can
be used as a drop-in replacement for ZipKin server and UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A video demonstrating this approach can also be viewed &lt;a href=&quot;https://www.youtube.com/watch?v=USyGYVYlDIM&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end of this blog post, we should see data flowing from the target applications to Hawkular APM, without any code changes
to the application themselves:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-19-screenshot3.png&quot; alt=&quot;Hawkular APM Dashboard&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Red Hat offers a &lt;a href=&quot;http://developers.redhat.com/products/cdk/overview/&quot;&gt;Container Developer Toolkit&lt;/a&gt;, or CDK, for its customers,
allowing for a quick start on developing applications following the best practices on the microservices architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Along with the CDK, Red Hat publishes also a &lt;a href=&quot;https://github.com/redhat-helloworld-msa&quot;&gt;&quot;MSA - Hello World Microservices Architecture&quot;&lt;/a&gt;,
which demonstrates how applications might benefit from this architecture. It can also be used as seed for your own
projects, as it shows how activities can be accomplished by using several technology stacks, from &lt;code&gt;nodejs/express&lt;/code&gt; to &lt;code&gt;Wildfly Swarm&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Hawkular APM, this offers a great way to test our APIs on different stacks, specially our ZipKin compatibility layer. Ideally,
one would simply point the ZipKin URL setting to a Hawkular APM server and everything would just work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s what we are going to do in this post!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_getting_started_with_cdk_and_msa&quot;&gt;Getting started with CDK and MSA&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_cdk_and_msa&quot;&gt;CDK and MSA&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To setup CDK and MSA, we suggest that you follow the &lt;a href=&quot;http://bit.ly/msainstructions&quot;&gt;official instructions&lt;/a&gt;. At the end of the process,
you should have all the services running. Open the &quot;frontend&quot; service, and click around a bit. For instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Click on the &quot;Browser as client&quot; menu item, which will make the browser make Ajax calls directly to the API endpoints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &quot;API Gateway&quot; menu item: on this case, the browser makes a single call to the API Gateway, which in turn makes single API calls
to each of the services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &quot;Service chaining&quot; menu item: on this case, each service calls the &quot;next&quot;, adding the results to its own payload.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It could be interesting to make a note about the hostnames, to later make sure that you have &quot;new&quot; Docker containers running.
The default output for each of the services include the hostname. Concretely, the output &lt;code&gt;ola-7-9wa31&lt;/code&gt; means that the service &lt;code&gt;ola&lt;/code&gt; is
running on the container with hostname &lt;code&gt;9wa31&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open the ZipKin interface, and make sure that data is arriving there. Check also the different visualizations for the different operations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_apm&quot;&gt;Hawkular APM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll use the &lt;a href=&quot;http://www.hawkular.org/blog/2016/07/14/hawkular-apm-openshift.html&quot;&gt;previous post on running Hawkular APM on OpenShift&lt;/a&gt;
as base to install our Hawkular APM alongside the other MSA examples. For this blog post, we&amp;#8217;ll prepare our own image based on the official
Dockerfile for Hawkular APM. For that, fork and clone &lt;a href=&quot;https://github.com/jboss-dockerfiles/hawkular&quot;&gt;our repository&lt;/a&gt; and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd hawkular-apm-server
oc new-app jboss/hawkular-apm-server
oc new-build --binary --name=hawkular-apm-server -l app=hawkular-apm-server
oc start-build hawkular-apm-server --from-dir=. --follow
oc expose service hawkular-apm-server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, the image from Docker Hub can be used, although it&amp;#8217;s possible that networking issues might occur. If you use this option and
the build takes more than, say, 10 minutes to finish, do a &lt;code&gt;vagrant ssh&lt;/code&gt; to enter the box, and check the logs via &lt;code&gt;journalctl -f&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc new-app jboss/hawkular-apm-server
oc expose service hawkular-apm-server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should create a new image stream, build, deployment and application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before anything else, make note of the admin and password credentials. Those can be seen on the build logs:
Browse → Deployments → hawkular-apm-server → Click on the latest deployment → Logs.
A sample output is as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;------------------------------------
ATTENTION ATTENTION ATTENTION ATTENTION
We automatically created an admin user for you to access the Hawkular APM web interface:
Username: adminQqyEF7i
Password: KS3mmZbkdhRZ5y7oF
------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once this is done, there should be a new service available on OpenShift&amp;#8217;s dashboard, with an URL like &lt;code&gt;&lt;a href=&quot;http://hawkular-apm-server-helloworld-msa.rhel-cdk.10.1.2.2.xip.io&quot; class=&quot;bare&quot;&gt;http://hawkular-apm-server-helloworld-msa.rhel-cdk.10.1.2.2.xip.io&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that everything is in place and working as expected, it&amp;#8217;s time to switch from ZipKin to Hawkular APM!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_making_the_switch&quot;&gt;Making the switch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each one of the MSA modules has a &lt;code&gt;Dockerfile&lt;/code&gt;, specifying a &lt;code&gt;ENV ZIPKIN_SERVER_URL &lt;a href=&quot;http://zipkin-query:9411&quot; class=&quot;bare&quot;&gt;http://zipkin-query:9411&lt;/a&gt;&lt;/code&gt;.
From there, we have some options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Change each &lt;code&gt;Dockerfile&lt;/code&gt; to make the env var point to &lt;code&gt;&lt;a href=&quot;http://hawkular-apm-server:8080&quot; class=&quot;bare&quot;&gt;http://hawkular-apm-server:8080&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify the &lt;code&gt;-e&lt;/code&gt; option to Docker, to override the &lt;code&gt;ZIPKIN_SERVER_URL&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set an Environment Variable in the OpenShift deployment&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll choose the last option, as we consider that as the less invasive one, inline with the Microservice idea that configuration should not
be a concern for the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;oc env dc/aloha       ZIPKIN_SERVER_URL=&quot;http://hawkular-apm-server:8080&quot;
oc env dc/api-gateway ZIPKIN_SERVER_URL=&quot;http://hawkular-apm-server:8080&quot;
oc env dc/bonjour     ZIPKIN_SERVER_URL=&quot;http://hawkular-apm-server:8080&quot;
oc env dc/hola        ZIPKIN_SERVER_URL=&quot;http://hawkular-apm-server:8080&quot;
oc env dc/ola         ZIPKIN_SERVER_URL=&quot;http://hawkular-apm-server:8080&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wait a bit until OpenShift finishes deploying the new containers, and hit &quot;Refresh Results&quot; on the frontend. Note that the hostnames will change, indicating
that a new container is running. At around the same time, you should see the first data flowing to Hawkular APM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Spoiler alert&lt;/strong&gt;: after the first two screenshots that we added for orientation, we also included some screenshots with the final result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_overriding_the_environment_variable_on_an_openshift_deployment&quot;&gt;Overriding the environment variable on an OpenShift deployment:&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-19-screenshot7.png&quot; alt=&quot;Environment variable in OpenShift deployment&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_apm_deployment_logs_on_openshift&quot;&gt;Hawkular APM Deployment logs on OpenShift:&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-19-screenshot6.png&quot; alt=&quot;Deployment log&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sample_of_the_aggregated_visualization_for_the_service_chaining_technique&quot;&gt;Sample of the aggregated visualization for the &quot;Service chaining&quot; technique:&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-19-screenshot1.png&quot; alt=&quot;Service chaining&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_details_about_a_single_instance_of_the_service_chaining_technique&quot;&gt;Details about a single instance of the &quot;Service chaining&quot; technique:&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-19-screenshot5.png&quot; alt=&quot;Screenshot 5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sample_of_the_aggregated_visualization_for_the_api_gateway_technique&quot;&gt;Sample of the aggregated visualization for the &quot;API Gateway&quot; technique:&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-19-screenshot2.png&quot; alt=&quot;API Gateway&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_details_about_a_single_instance_of_the_api_gateway_technique&quot;&gt;Details about a single instance of the &quot;API Gateway&quot; technique:&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-19-screenshot4.png&quot; alt=&quot;Screenshot 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Consuming Hawkular API over SSL with self signed certificates</title>
      <link>http://www.hawkular.org/blog/2016/09/14/consuming-hawkular-api-over-ssl.html</link>
      <author>noreply@hawkular.org (Josejulio Martínez)</author>
      <pubDate>Wed, 14 Sep 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/09/14/consuming-hawkular-api-over-ssl.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I&amp;#8217;ll show you how to trust self-signed certificates for use with Ruby client, used on projects such as ManageIQ and HawkFX.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you haven&amp;#8217;t already, follow this guide for
&lt;a href=&quot;http://www.hawkular.org/hawkular-services/docs/installation-guide/secure-comm.html&quot;&gt;securing communications&lt;/a&gt; on your Hawkular server, because we&amp;#8217;ll make use of the files generated by that guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As today, there are Hawkular clients for the following programming languages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;Java&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;Go&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/hawkular/hawkular-client-ruby&quot;&gt;Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular Ruby client lets you connect using a secure connection. Buying a certificate from a trusted SSL vendor to host your own development server can be cost-prohibitive or just complicated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are going to self-sign your own development certificates for use outside of Java, you will need to do some additional steps to tell your consumer environment to trust them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this you will need to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;c_rehash&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify where OpenSSL reads certificates and keys from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hand over your certificate to OpenSSL in PEM format and rehash.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_install_c_rehash&quot;&gt;Install c_rehash&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;c_rehash&lt;/code&gt; is an OpenSSL utility to create symbolic links to files by their hash values.
This format is used by OpenSSL to find certificates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can install it on fedora by executing&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo dnf install openssl-perl&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_identify_where_openssl_reads_certificates_and_keys_from&quot;&gt;Identify where OpenSSL reads certificates and keys from.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenSSL reads certificates and keys from a specific path, you will need to copy your self-signed certificates there.
You can find this path by running the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ openssl version -d
OPENSSLDIR: &quot;/etc/pki/tls&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, OpenSSL files are located in &lt;code&gt;/etc/pki/tls&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The above output is from Fedora 24, it should be similar on other operative systems.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It seems that if you are using RVM to manage your Ruby versions, you should ignore this
and use: $rvm_path/usr/ssl
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hand_over_your_certificate_to_openssl_in_pem_format_and_rehash&quot;&gt;Hand over your certificate to OpenSSL in PEM format and rehash.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;c_rehash&lt;/code&gt; specs the certificates in PEM format, so before proceeding we need make sure is in PEM format. The &lt;a href=&quot;http://www.hawkular.org/hawkular-services/docs/installation-guide/secure-comm.html&quot;&gt;guide&lt;/a&gt; for securing communications on Hawkular produces the certificate in DER format it needs to be converted to PEM format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenSSL can be used as follow to convert &lt;code&gt;hawkular.cert&lt;/code&gt; from DER to PEM format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ openssl x509 -inform der -in hawkular.cert -out hawkular.pem&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once created, copy your PEM certificate to &lt;code&gt;OPENSSLDIR/certs&lt;/code&gt; (you will need root permissions) and run c_rehash on that dir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo cp hawkular.pem OPENSSLDIR/certs
$ sudo c_rehash OPENSSLDIR/certs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using any application that relies on JRuby (such as HawkFX) you will probably need to use old-style hashes. To do that run c_rehash a second time with flags to use the old-style hash and to keep existing hashes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo c_rehash -old -n OPENSSLDIR/certs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That should be enough to let Ruby client or any application that uses it (e.g. HawkFX) to communicate with Hawkular Server over SSL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use on HawkFX simply put the address with https and the secure port.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-09-14-hawkfx-over-https.png&quot; alt=&quot;HawkFX over https&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.19.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/09/05/hawkular-metrics-0.19.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Mon, 5 Sep 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/09/05/hawkular-metrics-0.19.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.19.0 of Hawkular Metrics. This release is anchored by performance enhancements and a lot of REST API enhancements.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;REST API - Query Improvements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;It is now possible to use relative timestamps when querying for data via &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; added to timestamp parameters. When used, the timestamp is relative to the local system timestamp (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-358&quot;&gt;HWKMETRICS-358&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-457&quot;&gt;HWKMETRICS-457&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Querying for data from earliest available data point has been expanded to raw data queries for gauges and counters (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-435&quot;&gt;HWKMETRICS-435&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;DELETE tenants/{id}&lt;/code&gt; has been added to allow the deletion of an entire tenant (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-446&quot;&gt;HWKMETRICS-446&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;AvailabilityType is serialized as simple string in bucket data points (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-436&quot;&gt;HWKMETRICS-436&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance Enhancements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The write performance has been increased by 10% across the board after reorganizing the meta-data internal indexes. (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-422&quot;&gt;HWKMETRICS-422&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;GZIP replaced LZ4 as the compression algorithm for the data table. This produces anywhere between 60% to 70% disk usage savings over LZ4. (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-454&quot;&gt;HWKMETRICS-454&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Job Scheduler - Improvements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The newly introduced internal job scheduler received several improvements and fixes; the main focus was to enhance the scalability and fault tolerance.&lt;/li&gt;
      &lt;li&gt;The job scheduler will be used only for internal tasks.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-221&quot;&gt;HWKMETRICS-221&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-451&quot;&gt;HWKMETRICS-451&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-453&quot;&gt;HWKMETRICS-453&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-94&quot;&gt;HWKMETRICS-94&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Hawkular Metrics Clients&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.19.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.19.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12331192&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12331192&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Joel Takvorian, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Metric Data Analysis using the Apache Spark</title>
      <link>http://www.hawkular.org/blog/2016/08/31/spark-metric-analysis.html</link>
      <author>noreply@hawkular.org (Jiri Kremser)</author>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/08/31/spark-metric-analysis.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal of this blog post is to show how to easily connect &lt;a href=&quot;https://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt; to the
Cassandra with the metric data; perform simple transformation on the data as well as some examples of calculating correlation
between the two time series data streams. Last but not least we will show how to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;k-means&lt;/a&gt; clustering model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-08-31-spark-logo.png&quot; alt=&quot;Spark logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The situation is visualized on the figure bellow. After the WildFly Agent was collecting the data for some time period and
reporting them to Hawkular Metrics. Hawkular Metrics stores them into Cassandra to which we will be connecting with Spark.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-08-31-spark.png&quot; alt=&quot;Components interaction&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_initialization&quot;&gt;Initialization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we need to create a spark context with the &lt;code&gt;spark.cassandra.connection.host&lt;/code&gt; property correctly set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val conf = new SparkConf()
  .setAppName(&quot;HelloHawkular&quot;)
  .setMaster(&quot;local&quot;)
  .set(&quot;spark.cassandra.connection.host&quot;, &quot;127.0.0.1&quot;)
val sc = new SparkContext(conf)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is very simple, the only assumption here is that the &lt;code&gt;spark-cassandra-connector&lt;/code&gt; jar is on the class path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Apache Spark is completely written in Scala so also the examples are written in Scala.
Although, it provides also Java and Python APIs, using the language it has been written in is the best choice,
because one can track down the calls in the (native) source code.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_reading_the_data_from_cassandra&quot;&gt;Reading the data from Cassandra&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a &quot;Resilient Distributed Dataset&quot; (RDD) from Cassandra table called &quot;data&quot; in &quot;hawkular_metrics&quot; keyspace.
Resilient Distributed Datasets have &lt;a href=&quot;https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.rdd.RDD&quot;&gt;plenty&lt;/a&gt;
of useful operations defined. RDD is a leitmotif in Spark, all the data manipulation
is represented by chaining the operations on RDDs. It is an immutable structure that inherently supports parallelization.
Generally speaking, RDDs can be created as a result of calling a method on another RDD(s)
or by calling a method the &lt;code&gt;SparkContext&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val rdd: RDD[CassandraRow] = sc.cassandraTable(&quot;hawkular_metrics&quot;, &quot;data&quot;)
println(rdd.count)
println(rdd.first)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This prints the number of rows (in my case 245609) and the very first row, just to have an idea how it looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;CassandraRow{tenant_id: hawkular, type: 0, metric: MI~R~[e69a19f7-76e7-4fd2-8ed5-864d1570f3ff/Local~/deployment=hawkular-alerts-rest.war/subsystem=ejb3/singleton-bean=PartitionManagerImpl]~MT~Singleton EJB Metrics~Execution Time, dpart: 0, time: baef5a00-6e31-11e6-96d2-5f826fbc8eb1, aggregates: {}, availability: null, data_retention: null, l_value: null, n_value: 0.0, s_value: null, tags: {}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The data table contains all the metrics so we need to filter only what we are interested in.
RDD provides a &lt;code&gt;groupBy&lt;/code&gt; method that takes a function that is applied on all the data in the RDD and returns the key by
which the grouping should be done. We can group by the &lt;code&gt;metric&lt;/code&gt;. This can be useful when working with more
metrics. But for our purposes, let&amp;#8217;s just do simple filter method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val feedId = &quot;e69a19f7-76e7-4fd2-8ed5-864d1570f3ff&quot;
val metric1 = &quot;Total Memory&quot;
val metric2 = &quot;Available Memory&quot;
val total: RDD[Double] = rdd.filter(x =&amp;gt; {
    val metricId = x.getString(&quot;metric&quot;)
    metricId.contains(feedId) &amp;amp;&amp;amp; metricId.contains(metric1)
  })
  .map(_.getDouble(&quot;n_value&quot;))
  .repartition(8)

val free: RDD[Double] = rdd.filter(x =&amp;gt; {
    val metricId = x.getString(&quot;metric&quot;)
    metricId.contains(feedId) &amp;amp;&amp;amp; metricId.contains(metric2)
  })
  .map(_.getDouble(&quot;n_value&quot;))
  .repartition(8)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;repartition()&lt;/code&gt; method needs to be called because methods like &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt; and similar have impact on the
number of elements in each partition. We need those two RDDs to have the same amount of partitions and the same amount
of elements in each partition in order to be able to apply some statistical methods on them. Method called &lt;code&gt;coalesce&lt;/code&gt;
is an alternative option to use here. Perhaps even better because it does not shuffle the data over the network in case
of multi node environment. However, the data model of Hawkular metrics ensures that data from one metric are always on
the same node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we have two RDDs. The &lt;code&gt;total&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; that represent the amounts of memory that was &quot;free&quot; on the platform and the total value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_doing_something_fancy&quot;&gt;Doing something fancy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us create a derived RDD that will represent the used memory on the platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val used: RDD[Double] = total.zip(free).map(e =&amp;gt; e._1 - e._2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we have done here is that we have created a new RDD, representing a metric data that were calculated using two
other metric streams. The transformation was trivial, but RDD provides also methods for aggregation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s calculate the correlation between the used and free memory. There should be some correlation, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val correlation: Double = Statistics.corr(used, free, &quot;pearson&quot;)
println(s&quot;Correlation is: $correlation&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will print &lt;code&gt;Correlation is: -0.9999999999999781&lt;/code&gt;. That means there is total negative
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient&quot;&gt;correlation&lt;/a&gt; between the two
(the higher the first one, the lower the second one).
This example was artificial, but in general, one can calculate the correlation between any two metric streams. Of course,
correlation doesn&amp;#8217;t imply causation, so we can&amp;#8217;t extract any higher level information like business rules here.
But we obtain some information that metrics are somehow related together and with further analysis we can for example detect, that
change in one metric stream always precedes the change in the second metric stream. Again, it&amp;#8217;s not causation, but something stronger than
correlation. &lt;a href=&quot;https://en.wikipedia.org/wiki/Granger_causality&quot;&gt;Granger causality test&lt;/a&gt; is possible method,
nonetheless, this is out of the scope of this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last thing, I wanted to show is the k-means clustering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val usedMemoryVector = used.map(x =&amp;gt; Vectors.dense(x))
val numClusters = 3
val numIterations = 20
val clusters: KMeansModel = KMeans.train(usedMemoryVector, numClusters, numIterations)
println(&quot;Cluster centers:&quot;)
clusters.clusterCenters.foreach(println)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code above will print the three cluster representatives. It is also possible to test the new data point by
calling &lt;code&gt;clusters.predics(point)&lt;/code&gt; that will return the expected cluster the point is attracted to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is &lt;a href=&quot;https://spark.apache.org/docs/latest/mllib-guide.html&quot;&gt;much more&lt;/a&gt; in the MLlib. One can find outliers,
common patterns, do a classification, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
All the code examples can be &lt;a href=&quot;https://github.com/Jiri-Kremser/spark-hawkular-demo&quot;&gt;downloaded&lt;/a&gt; and run against the Cassandra with the metric data.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By using the &lt;code&gt;spark-cassandra-connector&lt;/code&gt;, we were able to get the data from C* as RDD, call the simple operations on RDDs
and some smart functions from the MLlib package, but we entirely neglected the temporal aspect of the data. The only
reason it worked reasonably well is because the data is sorted in the table by the timestamp. There is a Spark library for
time series data out there called &lt;a href=&quot;https://github.com/sryza/spark-timeseries&quot;&gt;spark-ts&lt;/a&gt;. Nice improvement would
be connecting the &lt;code&gt;spark-cassandra-connector&lt;/code&gt; and &lt;code&gt;spark-ts&lt;/code&gt; to provide convenient way of working with time series data
on top of Cassandra.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also worth mentioning that Spark does not offer only data processing on the data that was obtained by some &quot;data pump&quot;.
Spark is so popular because it allows running the algorithms close to the data. In our case we had only single headed Cassandra,
but in general it can be run on a cluster consisting of multiple nodes. This, of course, requires the wisely chosen
partition keys in the schema respecting it when working with RDDs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Vert.x agent inventory implementation</title>
      <link>http://www.hawkular.org/blog/2016/08/11/vertx-agent-inventory-impl.html</link>
      <author>noreply@hawkular.org (Austin Kuo)</author>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/08/11/vertx-agent-inventory-impl.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hi all,
This is Austin, who is responsible for the gsoc project &lt;a href=&quot;https://developer.jboss.org/wiki/JBossCommunityGoogleSummerOfCode2016Ideas#jive_content_id_Hawkularagent_for_vertx&quot;&gt;Hawkular-agent for vert.x&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I do is to implement the functionality to report the running vertx instances to the hawkular inventory service.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_reported_entities&quot;&gt;Reported Entities&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_feed_and_root_resource&quot;&gt;Feed and Root resource&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A feed represents the vertx instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A root resource which is the parent of all other subresources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_subresources&quot;&gt;Subresources&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;1 eventbus resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 http client resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 net client resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 datagram socket resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0&amp;#8230;&amp;#8203;N http server resources depends on how many http servers are running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0&amp;#8230;&amp;#8203;N net server resources depends on how many net servers are running.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkfx_snapshot&quot;&gt;Hawkfx Snapshot&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You now can view the inventory structure from the &lt;a href=&quot;https://github.com/pilhuhn/hawkfx&quot;&gt;hawkfx client&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-08-11-vertx-agent-inventory-snapshot.png&quot; alt=&quot;Hawkfx snapshot&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_use_it&quot;&gt;How to use it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation is now at the brach &lt;a href=&quot;https://github.com/vert-x3/vertx-hawkular-metrics/tree/inventory-reporter&quot;&gt;inventory-reporter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just follow the instruction in the repository but&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You have to enable inventory and provide the feed id and root resource id in &lt;strong&gt;VertxHawkularOptions&lt;/strong&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;VertxHawkularOptions vertxHawkularOptions = new VertxHawkularOptions();
vertxHawkularOptions.setEnabled(true); // By default Vert.x Metrics is disabled

VertxOptions vertxOptions = new VertxOptions();
vertxOptions.setMetricsOptions(vertxHawkularOptions);
vertxOptions.setInventoryEnabled(true);
vertxOptions.setFeedId(&quot;vertx-feed-id&quot;);
vertxOptions.setVertxRootResourceId(&quot;root-resource-id&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.18.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/08/01/hawkular-metrics-0.18.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Mon, 1 Aug 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/08/01/hawkular-metrics-0.18.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.18.0 of Hawkular Metrics. This release is anchored by performance enhancements and a new internal job scheduler.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;InfluxDB API - REMOVED&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The InfluxDB API has been removed from the code base.&lt;/li&gt;
      &lt;li&gt;This was an addition to make project integrations easier. As the REST interface matured, the role of the InfluxDB compatibility interface was reduced only serve as the Grafana interface. With the release of the native Grafana plugin, this was no longer needed.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-431&quot;&gt;HWKMETRICS-431&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fetching Stats Data - Multiple Metrics - Experimental&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Prior to this release, it was possible to only fetch stats for a single type metric. This release added &lt;code&gt;POST /metrics/stats/query&lt;/code&gt; endpoint that allows querying for mixed stats for multiple metrics.&lt;/li&gt;
      &lt;li&gt;The endpoint accepts a list of metrics ids and allows filtering by providing start time, end time, sort order and limit, as well as the typical stats options such as bucket duration, number of buckets, or percentiles.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-424&quot;&gt;HWKMETRICS-424&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance Enhancements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;All the JAX-RS handlers are now singletons. This reduces the GC pressure and was relatively simple change since the code was completely stateless. This lead to a significant performance increase. For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-437&quot;&gt;HWKMETRICS-437&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Job Scheduler - New Implementation - Experimental&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The new internal job scheduler is by far the biggest contribution in this release.&lt;/li&gt;
      &lt;li&gt;This is the foundation for a number of features that will make their way into upcoming releases; a few examples are metric aggregates, adjustable data retention, or complex data purges.&lt;/li&gt;
      &lt;li&gt;The implementation keeps the Hawkular Metrics server stateless so scaling will be just as easy going forward, with zero additional configuration.&lt;/li&gt;
      &lt;li&gt;The job scheduler will be used only for internal tasks.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-360&quot;&gt;HWKMETRICS-360&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-375&quot;&gt;HWKMETRICS-375&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Hawkular Metrics Clients&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.18.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.18.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12330870&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12330870&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>What is new in Android Client</title>
      <link>http://www.hawkular.org/blog/2016/07/19/android-client-progess.html</link>
      <author>noreply@hawkular.org (Anuj Garg)</author>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/19/android-client-progess.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello to all. My last post was on March 2016 and after that a lot of things have changed. Well here is progress report of Android client.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_stepwise_short_points&quot;&gt;Stepwise short points&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are the steps taken till now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Tokens are removed as Hawkular no longer use keycloak for authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filter to allow and hide acknowledged alerts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Separate activity for detailed alert.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reading and posting comment on alert.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inventory explorer is added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add and remove favourite metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jump to associated metric from explorer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_detailed_alert_screen&quot;&gt;Detailed Alert Screen&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Detailed screen for alert get a detailed information about alert, associated resource, trigger that caused it and state of alert etc. Now you can also add comment/note to alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-19-android-alert_detail.png&quot; alt=&quot;Detailed Alert Screen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_inventory_explorer_list_view&quot;&gt;Inventory Explorer (List view)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inventory explorer let the user move across the the feeds, resources and metrics. User can long press to metric to add a metric from explorer view to favourite metrics, Which is then available to home screen. If a single press is made then you are directed to chart view of metric.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-19-android-explorer.png&quot; alt=&quot;Inventory Explorer&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit the recording here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/SF_3ZiUqcAY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Application Performance within Openshift</title>
      <link>http://www.hawkular.org/blog/2016/07/14/hawkular-apm-openshift.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/14/hawkular-apm-openshift.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post will show how to use the Hawkular APM project, previously known as Hawkular BTM, to monitor an application running within Openshift. To achieve this both the Hawkular APM server, and the application (a vert.x Javascript example), will be deployed as Docker images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will use the Openshift CLI, and therefore will need to login. For example, to login into the Openshift CDK environment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;oc login 10.1.2.2:8443 -u openshift-dev -p devel&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploy_hawkular_apm_server&quot;&gt;Deploy Hawkular APM Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is to deploy the Hawkular APM server. There are two ways that this can be achieved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_image_from_docker_hub&quot;&gt;Image from Docker Hub&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular APM server has a docker image registered at &lt;a href=&quot;https://hub.docker.com/r/jboss/hawkular-apm-server&quot;&gt;Docker Hub&lt;/a&gt;. This can be deployed to Openshift using the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;oc new-app jboss/hawkular-apm-server
oc expose service hawkular-apm-server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;new-app&lt;/em&gt; command deploys the image as a service, and the &lt;em&gt;expose&lt;/em&gt; command makes it available via a stable URI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If the deploy fails with an &quot;unknown manifest&quot; error in the openshift events log, this is due to a &lt;a href=&quot;http://lists.openshift.redhat.com/openshift-archives/users/2016-June/msg00054.html&quot;&gt;known docker issue related to a change between version 1.9 and 1.10&lt;/a&gt;. In this case, use the local deploy approach described below.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_local_image&quot;&gt;Local Image&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To deploy the APM server from a local build, it will be necessary to get the &lt;a href=&quot;https://github.com/jboss-dockerfiles/hawkular/blob/8ffb752b68c0f49a2150fe345e660c53c32fb954/hawkular-apm-server/Dockerfile&quot;&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;/a&gt;. Place this file in a suitable folder and from that location run the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;oc new-build --binary --name=hawkular-apm-server
oc start-build hawkular-apm-server --from-dir=. --follow
oc new-app hawkular-apm-server
oc expose service hawkular-apm-server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_apm_server_in_the_openshift_console&quot;&gt;Hawkular APM Server in the Openshift Console&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once either of these options has been used to deploy the Hawkular APM Server, it can be seen within the Openshift console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-osapmserver.png&quot; alt=&quot;Hawkular APM Server&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Hawkular APM Server deployed in Openshift&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploy_example_vert_x_javascript_application&quot;&gt;Deploy Example Vert.x Javascript Application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application that we will monitor is a Vert.x Javascript example application. Either clone the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples&quot;&gt;github repository&lt;/a&gt; or simply copy the two relevant files from the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/docker-examples/vertx-docker-javascript&quot;&gt;vertx-examples/docker-examples/vertx-docker-javascript&lt;/a&gt; folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable the application to be instrumented by Hawkular APM, it will be necessary to add the following lines in the &lt;em&gt;Dockerfile&lt;/em&gt;, before the &lt;em&gt;EXPOSE 8080&lt;/em&gt; line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;ENV HAWKULAR_APM_VERSION 0.9.0.Final

ADD https://github.com/hawkular/hawkular-apm/releases/download/$HAWKULAR_APM_VERSION/hawkular-apm-agent.jar hawkular-apm-agent.jar

ENV JAVA_OPTS -javaagent:/hawkular-apm-agent.jar&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, from the same folder in which these files are located, run the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;oc new-build --binary --name=vertx-javascript
oc start-build vertx-javascript --from-dir=. --follow
oc new-app -e HAWKULAR_APM_URI=http://hawkular-apm-server-sample-project.rhel-cdk.10.1.2.2.xip.io -e HAWKULAR_APM_USERNAME=jdoe -e HAWKULAR_APM_PASSWORD=password vertx-javascript

oc expose service vertx-javascript&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The &lt;em&gt;HAWKULAR_APM_URI&lt;/em&gt; must use the URI exposed by the Hawkular APM server, as shown in the console image above.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_example_vert_x_javascript_application_in_the_openshift_console&quot;&gt;Example Vert.x Javascript Application in the Openshift Console&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once these commands have been performed, the Openshift console should also now include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-osvertx.png&quot; alt=&quot;Vert.x Javascript example&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Vert.x Javascript example deployed in Openshift&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_running_the_example_application&quot;&gt;Running the Example Application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To access the example Vert.x Javascript application, simply open a browser window at the URL displayed in the console entry for the application (or just select the link which will cause a new tab to be opened). This will cause the simple Javascript application to return a response and show the message &quot;Wild world&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-osvertxapp.png&quot; alt=&quot;Vert.x Javascript example&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Vert.x Javascript example running within a browser&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now if we access the URL associated with the Hawkular APM server, by simply selecting the link in the Openshift console, we will be presented with a login window. Enter the username &lt;em&gt;jdoe&lt;/em&gt; and password &lt;em&gt;password&lt;/em&gt;, and then you will see some basic information showing the result of executing the Vert.x Javascript application - in this case the application was run multiple times by refreshing the browser page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-osapm.png&quot; alt=&quot;APM info&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Application Performance Management information captured from the example application&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To summarise, this blog has shown:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to monitor an existing application &lt;strong&gt;without requiring any code changes&lt;/strong&gt; simply by adding a few lines to the docker configuration file. Even if it is not possible to modify the application&amp;#8217;s &lt;em&gt;Dockerfile&lt;/em&gt; (i.e. because it is obtained from Docker Hub), it is still possible to achieve the same result by deriving a new &lt;em&gt;Dockerfile&lt;/em&gt; from the image of interest, that contains the additional lines shown in this blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to deploy the Hawkular APM Server, along with the monitored application, as &lt;em&gt;Docker&lt;/em&gt; images that can be run within Openshift.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to visualise the response time associated with a REST call to a Vert.x Javascript application. In this particular example, a single URL was invoked multiple times - hence only a single entry. However for more complex examples, detailed component information (such as EJBs, Databases, etc) and the dependencies between remotely invoked services, may be shown.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions please &lt;a href=&quot;http://www.hawkular.org/community/index.html&quot;&gt;contact us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Getting started with ManageIQ and Hawkular</title>
      <link>http://www.hawkular.org/blog/2016/07/14/hawkular-miq.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/14/hawkular-miq.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post describes the first steps to get started with ManageIQ master and Hawkular-services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_setup_of_manageiq&quot;&gt;Setup of ManageIQ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The functionality to support the Hawkular-Middleware provider is not in the Darga-Release.
You will need to build ManageIQ from their master branch.
There is a good &lt;a href=&quot;http://manageiq.org/documentation/development/developer_setup/&quot;&gt;guide on developer setup&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have completed the instructions, you should have ManageIQ available at&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;http://localhost:3000&quot; class=&quot;bare&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_setup_of_hawkular_services&quot;&gt;Setup of Hawkular-services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run Hawkular-services with some WildFly servers connected. While it is possible to only run Hawkular-services with the built-in agent enabled, you will get more interesting results if you point other instrumented WildFly servers at Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_docker&quot;&gt;Docker&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Docker user, you can &lt;a href=&quot;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&quot;&gt;follow this route&lt;/a&gt;. This uses Docker-compose to stand up Cassandra 3.7, Hawkular-services and a connected WildFly10 server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_classical_route&quot;&gt;Classical route&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;NOTE You need to have Cassandra set up&lt;/div&gt;
&lt;p&gt;The release notes for Hawkular-Services 0.0.5 have a &lt;a href=&quot;http://www.hawkular.org/blog/2016/07/05/hawkular-services-0.0.5.Final.html#_get_started&quot;&gt;Getting started&lt;/a&gt; section that describes how to locally set up Hawkular-services along with the needed Cassandra settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start the hawkular server you should also pass option &lt;code&gt;-Dhawkular.agent.enabled=true&lt;/code&gt; to enable the embedded agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Start Hawkular server&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD} -Dhawkular.agent.enabled=true&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_endpoint&quot;&gt;The endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Going forward we assume that Hawkular-services listens on &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt; and has a user/password of &lt;em&gt;jdoe/password&lt;/em&gt; defined.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_adding_hawkular_as_provider_in_manageiq&quot;&gt;Adding Hawkular as provider in ManageIQ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Log into ManageIQ at &lt;code&gt;&lt;a href=&quot;http://localhost:3000&quot; class=&quot;bare&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/code&gt; with &lt;em&gt;admin/smartvm&lt;/em&gt; as user/password.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then select &lt;em&gt;Middleware&lt;/em&gt; from the menu bar on the left and then &lt;em&gt;Providers&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-miq-hawk-menu.png&quot; alt=&quot;Menu in ManageIQ&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Menu in ManageIQ with Middleware section&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On that page click on &lt;em&gt;Configuration&lt;/em&gt; and choose &lt;em&gt;Add new provider&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-miq-hawk-add.png&quot; alt=&quot;Add provider button&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Add provider menu entry&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next thing you see is the settings page.
Here you need to choose Hawkular from the type dropdown and fill in the host and port and also the credentials.
When you are done you need to &lt;em&gt;validate&lt;/em&gt; the credentials. If that went well, you can click on &lt;em&gt;add&lt;/em&gt; to add the Hawkular provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-miq-hawk-settings.png&quot; alt=&quot;Settings for the provider&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Settings to add a new Hawkular provider&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should take a short while and you should then see a screen with a nice Hawkular logo :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-miq-hawk-providers.png&quot; alt=&quot;Overview of Middleware providers&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Overview over middleware providers&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clicking on the provider name below the icon then leads you to the so called summary page of the provider where you can see an overivew and have links to managed servers etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-07-14-miq-hawk-provider.png&quot; alt=&quot;Hawkular provider summary&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Hawkular provider summary&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Introducing HawkFX</title>
      <link>http://www.hawkular.org/blog/2016/07/13/hawkfx.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/13/hawkfx.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HawkFX is an explorer for Hawkular. It is a pet project of mine and &lt;a href=&quot;https://github.com/pilhuhn/hawkfx&quot;&gt;hosted on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-main&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawkfx-main.png&quot; alt=&quot;HawkFX main screen&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Main screen with availability popup&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_it&quot;&gt;What is it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As the Hawkular-services distribution only contains the server and not UI on purpose, I had the need to explore the content of the inventory and metrics. Of course this is easily doable via &lt;code&gt;curl&lt;/code&gt; commands, but ever so often I mistyped or did not correctly escape the forbidden characters in a URL.
At around the same time I intensivated my work on the Hawkular Ruby client, so I started creating some tool in Ruby. I was looking first at some other Ruby UI toolkit, but that did not really please me. After a bit of investigation I came around JRubyFX, which is cool, as it combines Ruby with JavaFX.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_running&quot;&gt;Running&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The explorer requires JRuby in version 9+ and Java8&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using &lt;code&gt;rvm&lt;/code&gt; you can select JRuby9 via&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;rvm use jruby-9.0.5.0&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no distribution yet. So you need to clone the git-repository and use it from source&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git clone https://github.com/pilhuhn/hawkfx.git
cd hawkfx&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;install and use &lt;code&gt;bundler&lt;/code&gt; to install the required gems:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;gem install bundler
bundle install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;then run&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;bundle exec jruby hawkfx.rb&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_more&quot;&gt;More&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In an earlier stage of HawkFX I wrote a &lt;a href=&quot;http://pilhuhn.blogspot.de/2016/05/introducing-hawkfx.html&quot;&gt;blog post on it on my personal blog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again: this is a pet project of mine with no support.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular and JMX/Jolokia</title>
      <link>http://www.hawkular.org/blog/2016/07/12/hawkular-and-jmx-jolokia.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/12/hawkular-and-jmx-jolokia.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since this is a relatively unknown feature, I decided to write a blog about it to get the word out. Hawkular
has the ability to pull inventory and metric data from JMX via Jolokia and push that data to a Hawkular Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See: &lt;a href=&quot;http://management-platform.blogspot.com/2016/07/collecting-jmx-data-and-storing-in.html&quot; class=&quot;bare&quot;&gt;http://management-platform.blogspot.com/2016/07/collecting-jmx-data-and-storing-in.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular and Prometheus</title>
      <link>http://www.hawkular.org/blog/2016/07/12/hawkular-and-prometheus.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/12/hawkular-and-prometheus.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since this is a relatively unknown feature, I decided to write a blog about it to get the word out. Hawkular
has the ability to pull metric data from a Prometheus endpoint and push that data to a Hawkular Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See: &lt;a href=&quot;http://management-platform.blogspot.com/2016/07/collecting-prometheus-data-and-storing.html&quot; class=&quot;bare&quot;&gt;http://management-platform.blogspot.com/2016/07/collecting-prometheus-data-and-storing.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.17.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/07/06/hawkular-metrics-0.17.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Wed, 6 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/06/hawkular-metrics-0.17.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.17.0 of Hawkular Metrics. This release is anchored by performance enhancements and new Grafana Datasource Plugin.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Grafana Datasource Plugin - Experimental&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A new Grafana 3 datasource plugin is now available for Hawkular Metrics. This plugin integrates natively via the REST API.&lt;/li&gt;
      &lt;li&gt;For downloads and installation instructions please visit &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;Hawkular Datasource for Grafana&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;The plugin is developed as an independent project and contributions are welcomed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;InfluxDB API - DEPRECATED&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The InfluxDB API has been deprecated and will be removed in the upcoming release.&lt;/li&gt;
      &lt;li&gt;This was an addition to make project integrations easier. As the REST interface matured, the role of the InfluxDB compatibility interface was reduced only serve as the Grafana interface. With the release of the native Grafana plugin, this is no longer needed.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-411&quot;&gt;HWKMETRICS-411&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fetching Raw Data - Multiple Metrics - Experimental&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Prior to this release, it was possible to only fetch raw data points for a single metric. This release added &lt;code&gt;POST */query&lt;/code&gt; endpoint that allows querying for raw data points for multiple metrics.&lt;/li&gt;
      &lt;li&gt;The endpoints are:&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;POST /hawkular/metrics/gauges/raw/query&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;POST /hawkular/metrics/counters/raw/query&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;POST /hawkular/metrics/counters/rates/query&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;POST /hawkular/metrics/strings/raw/query&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;POST /hawkular/metrics/availability/raw/query&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;POST /hawkular/metrics/metrics/raw/query&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;The endpoint accepts a list of metrics ids and allows filtering by providing start time, end time, sort order and limit.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-393&quot;&gt;HWKMETRICS-393&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance Enhancements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Two Cassandra driver settings (maxConnectionsPerHost and maxRequestsPerConnection) are now user configurable. Part of the update, the default values have been increased from the driver defaults. The new defaults had a significant performance boost for a simple test deployment. The settings are configurable to allow users to optimize driver behavior for larger Hawkular Metrics deployments. (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-430&quot;&gt;HWKMETRICS-430&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;On Linux deployments, the Cassandra driver uses Netty native epoll (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-418&quot;&gt;HWKMETRICS-418&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cassandra&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Fixed an issue with schema upgrades present in Hawkular Metrics 0.15.0 and 0.16.0. We recommend upgrading from previous versions directly to 0.17.0. For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-425&quot;&gt;HWKMETRICS-425&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Cassandra 3.7 is now the supported version of Cassandra. Support has been deprecated for Cassandra 3.5.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Hawkular Metrics Clients&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.17.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.17.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12330692&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12330692&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Services 0.0.5.Final</title>
      <link>http://www.hawkular.org/blog/2016/07/05/hawkular-services-0.0.5.Final.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Tue, 5 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/05/hawkular-services-0.0.5.Final.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is a new base line distribution including only the basic Hawkular components, such as Alerts, Inventory and Metrics.
The version &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.0.5.Final/hawkular-services-dist-0.0.5.Final.zip&quot;&gt;0.0.5.Final&lt;/a&gt; has just been released and is ready to be tested and integrated with other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_in_this_release&quot;&gt;What&amp;#8217;s in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release has updated components:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inventory is now at v 0.17.2, which features a new api. The old api endpoint has been moved to &lt;code&gt;/deprecated&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular-Metrics is at v 0.17.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular-agent has been bumped to v 0.20.0 to make use of the new Inventory api. Please note that some inventory objects now have a different name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_ruby_client&quot;&gt;Hawkular Ruby Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While not included in these release zips above, we have upgraded the &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;Hawkular-Ruby-Gem&lt;/a&gt; to &lt;a href=&quot;https://rubygems.org/gems/hawkular-client/versions/2.2.0&quot;&gt;v2.2.0&lt;/a&gt; to cater
for the change in the Inventory api. All changes can be seen in the &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby/blob/master/CHANGES.rdoc&quot;&gt;Changes file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_differences_to_hawkular_main&quot;&gt;Differences to Hawkular-main&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable differences between the main Hawkular distribution and Hawkular Services are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Services does not ship with a User Interface. Interaction with the backend is exclusively done via REST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication is accomplished via JAAS, configured directly via Wildfly. Please refer to the Wildfly documentation on how to accomplish scenarios like LDAP user database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to the changes in the authentication, Keycloak is not part of the distribution, although it can still be used via JAAS. Please refer to the Keycloak documentation on how to protect deployments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to the removal of Keycloak, multi tenancy is also simplified. The backend endpoints expect to receive a &lt;code&gt;Hawkular-Tenant&lt;/code&gt;, so, multi tenancy is now handled on the consumer side.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information on the details of this new distribution as well as the background, see the blog post &lt;a href=&quot;http://www.hawkular.org/blog/2016/04/28/new-packaging.html&quot;&gt;New Hawkular packaging&lt;/a&gt;. Note that
&lt;code&gt;hawkular-core-services&lt;/code&gt; on that post is what we now know as &lt;code&gt;hawkular-services&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is released every week on Tuesdays.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started&quot;&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started with Hawkular Services, &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.0.5.Final/hawkular-services-dist-0.0.5.Final.zip&quot;&gt;download the latest release&lt;/a&gt;, unzip it,
add a user and set the Agent to use the credentials for the user just added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be accomplished with the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export HAWKULAR_HOME=&quot;/path/to/hawkular-services&quot;
export HAWKULAR_USERNAME=&quot;jdoe&quot;
export HAWKULAR_PASSWORD=&quot;password&quot;

cd &quot;${HAWKULAR_HOME}&quot;
&quot;${HAWKULAR_HOME}/bin/add-user.sh&quot; \
  -a \
  -u &quot;${HAWKULAR_USERNAME}&quot; \
  -p &quot;${HAWKULAR_PASSWORD}&quot; \
  -g read-write,read-only
&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting the server, you need to have Cassandra 3.7 up and running with the RPC port enabled either via
setting the env variable of &lt;code&gt;CASSANDRA_START_RPC&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or by editing &lt;code&gt;cassandra.yml&lt;/code&gt; and setting it there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;# Whether to start the thrift rpc server.
start_rpc: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;ccm&lt;/code&gt; you can use this to update the config: &lt;code&gt;ccm updateconf &apos;start_rpc: true&apos;&lt;/code&gt;.
Another option is via &lt;code&gt;nodetool enablethrift&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_build_from_master_and_cassandra&quot;&gt;Build from master and Cassandra&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you build from master, you can pass &lt;code&gt;-Pembeddedc&lt;/code&gt; to get a distribution with embedded Cassandra for local development.
Similarly if you build via &lt;code&gt;-Pdev&lt;/code&gt; a default user of &lt;em&gt;jdoe/password&lt;/em&gt; will be installed and also be used with the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_use_grafana_with_hawkular_services&quot;&gt;Use Grafana with Hawkular-services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do now have a Grafana datasource to make it easier to connect to Hawkular-services from Grafana.
The &lt;a href=&quot;https://github.com/hawkular/hawkular-grafana-datasource&quot;&gt;website of the datasource tells more&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started_via_inofficial_docker_builds&quot;&gt;Get started via (inofficial) Docker builds&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are inofficial Docker images of the release and also an instrumented WildFly available on
DockerHub at &lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkular-services/&quot;&gt;Hawkular services&lt;/a&gt;
and &lt;a href=&quot;https://hub.docker.com/r/pilhuhn/hawkfly/&quot;&gt;Instrumented WildFly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both images have been instrumented with the &lt;em&gt;jdoe/password&lt;/em&gt; user for the Hawkular server and the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&quot; class=&quot;bare&quot;&gt;http://pilhuhn.blogspot.de/2016/06/using-hawkular-services-via-docker.html&lt;/a&gt; on some more
details about using those images.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Scaling stateful services: an example in Hawkular Alerting</title>
      <link>http://www.hawkular.org/blog/2016/07/05/scaling-hawkular-alerting.html</link>
      <author>noreply@hawkular.org (Lucas Ponce)</author>
      <pubDate>Tue, 5 Jul 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/07/05/scaling-hawkular-alerting.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today stateless service architectures have the benefit to simplify the design of distributed scenarios.
With no state in the logic and a common backend, scaling could be implemented with simple additions of new nodes in the topology and distributing incoming requests with load balancer solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But a stateless design can not be applied to every scenario, there are computational problems that have a stateful behaviour by nature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Scaling distributed systems with stateful scenario is both a complex but thrilling task for a software engineer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we are going to expose some highlights of the design included in Hawkular Alerting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_alerting&quot;&gt;Hawkular Alerting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting is the component responsible for detecting behaviours within hawkular system by defining rules.
These rules can generate events or alerts that can also be used in additional rules to detect complex scenarios and to respond with customized actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This highlevel process is stateful by nature in the sense that rules might depend on the past and future data received.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_scaling_fault_tolerance_vs_distributed_computation&quot;&gt;Scaling: fault tolerance vs distributed computation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A first (non trivial) question is what is meant by &apos;scaling&apos; in our problem domain.
For example, &apos;scaling&apos; in some traditional databases scenarios could mean to add more resources in a big backend machine, on the contrary scaling in a network means to have more nodes to distribute load and increase the computational power.
Also another preliminary point is that we add more nodes to increase the fault tolerance of our system, meaning that we add more nodes to replicate our load, but not necessary to increase the capacity of the system.
For example, some networks should be able to support more than one concurrent failure of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our specific Hawkular Alerting domain scaling means to have more computational capacity but also offering a minimal fault tolerance capacity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_partitionmanager_interface&quot;&gt;PartitionManager interface&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerting implements its main logic in the engine service, the engine is responsible for managing the rules definitions and matching the data and events within the rules to update its internal state.
The engine is the main actor to use the scaling services and in this context the scaling/clustering services have been designed from an abstract interface API called PartitionManager.
Main benefit of this abstraction layer is that we can improve in the future the implementation of the distributed scenarios without bringing technical debt into the main logic of Hawkular Alerting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main strategy of the design is to partition and distribute the rules across all the nodes of the topology following a consistent hashing algorithm.
This means that when topology changes the PartitionManager minimizes the tasks needed to reconfigure the state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, at a high level, the PartitionManager interface is responsible for the following clustering services:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Notify when a new rule (called Trigger in Hawkular Alerting context) has been added, modified or removed in order to update the engine state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detect changes to the topology to re-calculate and re-distribute the triggers in a transparent way when a node is added/removed from the cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notify when a new data/event has been received in order to route it to the engine node responsible for its processing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_some_implementation_details&quot;&gt;Some implementation details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal of a scaling design is efficiency, it should distribute the rules in a way that minimize the changes and cost of re-distribution when cluster changes.
In our PartitionManagerImpl we have used the hashing functions provided by the &lt;strong&gt;guava&lt;/strong&gt; library to implement a shared topology as it is shown in the next example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    /**
     * Distribute triggers on nodes using a consistent hashing strategy.
     * This strategy allows to scale and minimize changes and re-distribution when cluster changes.
     *
     * @param entries a list of entries to distribute
     * @param buckets a table of nodes
     * @return a map of entries distributed across nodes
     */
    public Map&amp;lt;PartitionEntry, Integer&amp;gt; calculatePartition(List&amp;lt;PartitionEntry&amp;gt; entries,
                                                           Map&amp;lt;Integer, Integer&amp;gt; buckets) {
        if (entries == null) {
            throw new IllegalArgumentException(&quot;entries must be not null&quot;);
        }
        if (buckets == null || buckets.isEmpty()) {
            throw new IllegalArgumentException(&quot;entries must be not null&quot;);
        }
        HashFunction md5 = Hashing.md5();
        int numBuckets = buckets.size();
        Map&amp;lt;PartitionEntry, Integer&amp;gt; newPartition = new HashMap&amp;lt;&amp;gt;();
        for (PartitionEntry entry : entries) {
            newPartition.put(entry, buckets.get(Hashing.consistentHash(md5.hashInt(entry.hashCode()), numBuckets)));
        }
        return newPartition;
    }
[source,java]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The backbone of the PartitionManagerImpl is based on &lt;strong&gt;Infinispan&lt;/strong&gt; services and its eventing architecture.
Infinispan let us define small caches used to share minimal topology information about the rules distribution.
The infinispan eventing architecture let us add our own listeners implementations to provide a high level API that the Hawkular Alerting engine can consume.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further details can be found under the following examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Consistent hashing algorithm tests applied to topology&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/test/java/org/hawkular/alerts/engine/impl/BucketsTest.java&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/test/java/org/hawkular/alerts/engine/impl/BucketsTest.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Consistent hashing algorithm tests applied to rules distribution&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/test/java/org/hawkular/alerts/engine/impl/DistributionTest.java&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/test/java/org/hawkular/alerts/engine/impl/DistributionTest.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;PartitionManager high level interface&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/main/java/org/hawkular/alerts/engine/service/PartitionManager.java&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/main/java/org/hawkular/alerts/engine/service/PartitionManager.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Implementation of PartitionManager interface&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/main/java/org/hawkular/alerts/engine/impl/PartitionManagerImpl.java&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-alerts/blob/master/hawkular-alerts-engine/src/main/java/org/hawkular/alerts/engine/impl/PartitionManagerImpl.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion_and_future_work&quot;&gt;Conclusion and future work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we have a clustering profile in Hawkular Alerting project where we can test and run these distributed scenarios.
In our future work we will increase the coverage of distributed scenario and refine our design accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope this small intro could help to share the main decisions points to build our distributed design for Hawkular Alerting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comments and questions are welcome, here or in &lt;a href=&quot;http://webchat.freenode.net/?channels=hawkular&quot;&gt;#hawkular&lt;/a&gt; room on freenode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular APM 0.9.0.Final Released</title>
      <link>http://www.hawkular.org/blog/2016/06/27/hawkular-apm-0.9-released.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/06/27/hawkular-apm-0.9-released.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned in a blog post at the beginning of the month, the Hawkular BTM (Business Transaction Management) project has been renamed Hawkular APM (Application Performance Management), to reflect the wider scope of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first release under the new project name, and consequently there are a number of naming related changes (e.g. REST endpoints, Java package/class names, model, etc) that mean this release is &lt;strong&gt;not&lt;/strong&gt; backward compatible with the previous release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The details of the release can be found &lt;a href=&quot;https://github.com/hawkular/hawkular-apm/releases/tag/0.9.0.Final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of this release, we have also moved the documentation for the project to &lt;a href=&quot;https://hawkular.gitbooks.io/hawkular-apm-user-guide/content/&quot;&gt;gitbook&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions regarding the change of name, or anything else related to the project, please &lt;a href=&quot;http://www.hawkular.org/community/index.html&quot;&gt;contact us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Services 0.0.2.Final</title>
      <link>http://www.hawkular.org/blog/2016/06/14/hawkular-services-0.0.2.Final.html</link>
      <author>noreply@hawkular.org (Juraci Paixão Kröhling)</author>
      <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/06/14/hawkular-services-0.0.2.Final.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is a new base line distribution including only the basic Hawkular components, such as Alerts, Inventory and Metrics.
The version &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.0.2.Final/hawkular-services-dist-0.0.2.Final.zip&quot;&gt;0.0.2.Final&lt;/a&gt; has just been released and is ready to be tested and integrated with other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable differences between the main Hawkular distribution and Hawkular Services are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Services does not ship with a User Interface. Interaction with the backend is exclusively done via REST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication is accomplished via JAAS, configured directly via Wildfly. Please refer to the Wildfly documentation on how to accomplish scenarios like LDAP user database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to the changes in the authentication, Keycloak is not part of the distribution, although it can still be used via JAAS. Please refer to the Keycloak documentation on how to protect deployments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to the removal of Keycloak, multi tenancy is also simplified. The backend endpoints expect to receive a &lt;code&gt;Hawkular-Tenant&lt;/code&gt;, so, multi tenancy is now handled on the consumer side.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information on the details of this new distribution as well as the background, see the blog post &lt;a href=&quot;http://www.hawkular.org/blog/2016/04/28/new-packaging.html&quot;&gt;New Hawkular packaging&lt;/a&gt;. Note that
&lt;code&gt;hawkular-core-services&lt;/code&gt; on that post is what we now know as &lt;code&gt;hawkular-services&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Services is released every week on Tuesdays.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started with Hawkular Services, &lt;a href=&quot;https://repository.jboss.org/nexus/content/groups/public/org/hawkular/services/hawkular-services-dist/0.0.2.Final/hawkular-services-dist-0.0.2.Final.zip&quot;&gt;download the latest release&lt;/a&gt;, unzip it, add a user and set the Agent to use the credentials for the user just added.
It can be accomplished with the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;export HAWKULAR_HOME=&quot;/path/to/hawkular-services&quot;
export HAWKULAR_USERNAME=&quot;jdoe&quot;
export HAWKULAR_PASSWORD=&quot;password&quot;

cd &quot;${HAWKULAR_HOME}&quot;
&quot;${HAWKULAR_HOME}/bin/add-user.sh&quot; \
  -a \
  -u &quot;${HAWKULAR_USERNAME}&quot; \
  -p &quot;${HAWKULAR_PASSWORD}&quot; \
  -g read-write,read-only
&quot;${HAWKULAR_HOME}/bin/standalone.sh&quot; -Dhawkular.rest.user=&quot;${HAWKULAR_USERNAME}&quot; -Dhawkular.rest.password=&quot;${HAWKULAR_PASSWORD}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular BTM component rename</title>
      <link>http://www.hawkular.org/blog/2016/06/01/hawkular-btm-to-apm.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Wed, 1 Jun 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/06/01/hawkular-btm-to-apm.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the Hawkular BTM component project was started in April 2015 the vision was to provide a Business Transaction Management solution - hence the name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as demonstrated in the recent posts, the scope of the project has now expanded to include Application Performance Management, which as discussed in the APM Conceptual Framework on &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_performance_management&quot;&gt;Wikipedia&lt;/a&gt;, subsumes the area of Business Transaction Management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, to avoid confusion and prior to the project reaching a stable 1.0 version, we have decided to rename the component from Hawkular BTM to Hawkular APM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This change will be implemented within the next couple of weeks, and will consist of renaming the github repository, the jira issue tracking system, the Java maven artifacts (and packages) and the REST endpoints. Therefore the next release will not be backward compatible with version 0.8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions regarding this change, please &lt;a href=&quot;http://www.hawkular.org/community/index.html&quot;&gt;contact us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.16.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/06/01/hawkular-metrics-0.16.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Wed, 1 Jun 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/06/01/hawkular-metrics-0.16.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.16.0 of Hawkular Metrics. This release is anchored by overall enhancements in the API and updates to String metric type.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;String Metric Type - Enhancements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;/strings&lt;/code&gt; endpoint was enhanced with querying capabilities similar to other metric types, including tag related features (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-402&quot;&gt;HWKMETRICS-402&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;The endpoints under &lt;code&gt;/strings&lt;/code&gt; are still experimental, so changes which break backwards compatibility could be introduced in future releases. The experimental tag allows time for feedback to better determine what the API should be.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;*/stats&lt;/code&gt; &amp;amp; &lt;code&gt;*/raw&lt;/code&gt; Replace &lt;code&gt;*/data&lt;/code&gt;&lt;/strong&gt; - &lt;strong&gt;second deprecation warning!&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;*/data&lt;/code&gt; has been &lt;strong&gt;deprecated&lt;/strong&gt; and functionality split into two single purpose endpoints, this is applicable for all metric types (gauge, counter, availability, and string)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;*/stats&lt;/code&gt; endpoints return bucketed, statistical or query-time aggregated data&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;*/raw&lt;/code&gt; endpoints accept and return raw data for a metric&lt;/li&gt;
      &lt;li&gt;Please update your code to use the new endpoints and follow the release notes for more details regarding removal.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-24&quot;&gt;HWKMETRICS-24&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-57&quot;&gt;HWKMETRICS-57&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;REST API Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Empty buckets are now reported with default values and no samples (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-345&quot;&gt;HWKMETRICS-345&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Rate of change stats can be retrieved for Gauge metrics. This feature was exclusive for Counter metrics but was expanded to Gauge metrics. The rates are computed at query time based on stored data (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-365&quot;&gt;HWKMETRICS-365&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Min and max timestamps of stored datapoints are now returned when querying for metric definitions (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-383&quot;&gt;HWKMETRICS-383&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;The endpoint for fetching rates now supports standard query parameters and sort behavior (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-390&quot;&gt;HWKMETRICS-390&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hawkular Metrics - Hawkular Services distribution&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Hawkular Metrics distribution build for inclusion in Hawkular Services is now independent of Hawkular Accounts.&lt;/li&gt;
      &lt;li&gt;Only for this distribution, the authentication is done at container level and tenant id header becomes required.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-399&quot;&gt;HWKMETRICS-399&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-401&quot;&gt;HWKMETRICS-401&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Hawkular Metrics Clients&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.16.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.16.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12330316&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12330316&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Microservices for Application Performance, Distributed Tracing and Business Transactions</title>
      <link>http://www.hawkular.org/blog/2016/05/26/hawkular-btm-booker-demo.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/05/26/hawkular-btm-booker-demo.html</guid>
      	<description>
	&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;http://www.hawkular.org/https://player.vimeo.com/video/167714637&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although distributed systems and the concept of services have been around for a long time, the current trend towards microservices has added some new dimensions to the management problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The architectural approach leads to business applications comprised of a larger number of simple interacting services, each focused on specific business capabilities, and being responsible for their own data management. This has the benefit of allowing each service to be independently deployable, generally using automated continuous delivery. When used in a cloud environment, it facilitates dynamic scaling of individual services as required, and enables parts of the business application to be upgraded independently with minimal impact, allowing faster turnaround for fixing bugs and adding new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downside of this dynamic, scalable and flexible architecture is being able to understand how your business application is operating, and when necessary tracing the execution path of a particular invocation through the multitude of services potentially geographically distributed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From a management perspective we need to understand:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Application Performance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How is a particular service performing, understanding the internal components and how the implementation can be improved. This is of interest to the development team responsible for the service, but also for business and IT managers who need to understand how use of particular services is impacting a business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Distributed Tracing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Isolating the path of execution across communicating services - identifying which service instances were actually interacting, what was the latency between service invocations, were particular regions impacted by problems, etc. This information can be used during development and testing, to identify performance issues, but also in production to understand what runtime issues may have impacted an individual or set of invocations of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Business Transactions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How different business transaction types, that may span across multiple shared services, are impacted when service failures/performance issues occur. We also want to extract business metrics from the information being exchanged between services, to help business analysts gain insight into how their systems are being used and therefore improve how their business operates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;The demo&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo shows how &lt;em&gt;Hawkular BTM&lt;/em&gt; can present these three different views of information captured (in a non-intrusive manner) from a microservices example. &lt;em&gt;Hawkular BTM&lt;/em&gt; requires no changes to the services (or frameworks) being monitored, to allow the information to be captured, as it uses a &lt;a href=&quot;http://byteman.jboss.org&quot;&gt;Byteman&lt;/a&gt; based javaagent to instrument the services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The architecture of the microservices example being monitored is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-05-26-btm-swarm-booker.png&quot; alt=&quot;Swarm Booker Example&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. &lt;a href=&quot;https://github.com/wildfly-swarm/booker&quot;&gt;Swarm booker example&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example includes the following services:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keycloak - Provides authentication and authorization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web client - Provides the web UI for the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Library - Tracks which items are bought by a user, communicating with the &lt;em&gt;Store&lt;/em&gt; service to associate details with a given book ID.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Store - Provides a book inventory, and uses the &lt;em&gt;Pricing&lt;/em&gt; service to obtain a price for each the item in the store.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pricing - Simple pricing service that indicates everything is $10 if you&amp;#8217;re browsing anonymously, or $9 if you&amp;#8217;re logged in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the demo, two business tranactions are configured to represent business relevant activities that may be performed by, or on behalf of, a customer. These are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add Book - This business transaction is triggered by an invocation on the &lt;strong&gt;&lt;em&gt;Library&lt;/em&gt; POST /items&lt;/strong&gt; endpoint, and only involves the &lt;em&gt;Library&lt;/em&gt; service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get Books - This business transaction is triggered by an invocation on the &lt;strong&gt;&lt;em&gt;Library&lt;/em&gt; GET /items&lt;/strong&gt; endpoint, and results in a call to the &lt;em&gt;Store&lt;/em&gt; service to obtain information about the books contained in the user&amp;#8217;s library, which in turn calls the &lt;em&gt;Pricing&lt;/em&gt; service to obtain the price of each of the books.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Categorizing the activities that the user may perform on your business applications in this way enables business analysts to understand patterns, and where appropriate, extract additional business metrics from those interactions for further more detailed analysis.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Obtaining business metrics without the need to instrument your application</title>
      <link>http://www.hawkular.org/blog/2016/05/24/hawkular-btm-ticketmonster-demo.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/05/24/hawkular-btm-ticketmonster-demo.html</guid>
      	<description>
	&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_why&quot;&gt;Why?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many solutions available to allow a business to instrument its applications to report relevant business metrics. However most (if not all) of these solutions require the application to be modified to extract the information and report it to the chosen management solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What happens if you need the flexibility to begin recording and analysing new business metrics immediately? Even with the current trend towards continuous delivery, there is still a delay while the business analyst creates a feature request, and the development team understands the requirement, makes the modifications and pushes the changes through the pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Would it not be better for business analysts to be able to react immediately to emerging requirements, which may also be temporary (i.e. short lived), to collect and analyse the required business metrics?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_the_demo&quot;&gt;The demo&lt;/h4&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;http://www.hawkular.org/https://player.vimeo.com/video/167739840&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;em&gt;Hawkular BTM&lt;/em&gt; demo shows how to capture business metrics from an executing business application without having to introduce changes to the application or any frameworks being used. The business metrics can be presented in the form of charts, and also used within filters to help a user to focus in on the important information required to analyse how a business is functioning. The business metrics are organised based on the concept of a &lt;em&gt;&quot;Business Transaction&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_what_is_a_business_transaction&quot;&gt;What is a Business Transaction?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The term &lt;em&gt;&quot;Business Transaction&quot;&lt;/em&gt; is generally used to signify activities performed within a business that result in some form of accounting event (i.e. buying some goods). The &lt;em&gt;Hawkular BTM&lt;/em&gt; project uses the term in a more general way, referring to activities performed within a business, potentially initiated on behalf of a consumer (e.g. customer), that result in some direct or indirect value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ticket monster example application used in the demo is configured with two business transactions. The first is for retrieving information about an event (e.g. a concert), and the second for booking tickets. Although the first business transaction does not have any financial (accounting) consequence for the business, retrieving information about the events is a precursor to a customer being able to purchase the tickets, so it is a necessary but separate activity provided by the business to help meet the needs of its customers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_how_is_the_business_transaction_concept_used_within_hawkular_btm&quot;&gt;How is the Business Transaction concept used within Hawkular BTM?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Hawkular BTM&lt;/em&gt; uses the concept of a &lt;em&gt;&quot;Business Transaction&quot;&lt;/em&gt; to associate the invocation of a particular endpoint(s) with a logical business transaction configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This configuration can include the definition of &apos;processors&apos; (represented by a series of actions), that define how the data passed through a business application can be processed to extract business metrics (e.g. number of tickets purchased).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A business application can be a single service, as in the case of the ticket monster example, or comprised of multiple interacting (micro) services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.15.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/05/02/hawkular-metrics-0.15.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Mon, 2 May 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/05/02/hawkular-metrics-0.15.0.Final-released.html</guid>
      	<description>
	&lt;p&gt;I am happy to announce release 0.15.0 of Hawkular Metrics. This is one of the largest ever Hawkular Metrics releases with a lot of new features and changes.&lt;/p&gt;
&lt;p&gt;Here is a list of major changes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Cassandra 3.5 Support&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Cassandra 3.5 is now the supported version of Cassandra&lt;/li&gt;
      &lt;li&gt;Cassandra 2.2.x support is deprecated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Schema Management Tools&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;First release with tooling for schema change management&lt;/li&gt;
      &lt;li&gt;Only upgrades are supported; incremental schema changes are installed when Hawkular Metrics starts&lt;/li&gt;
      &lt;li&gt;Going forward new versions of Hawkular Metrics can be installed without the need to start with a fresh database or manually update existing database even if the schema has been modified in the new version&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-361&quot;&gt;HWKMETRICS-361&lt;/a&gt;, &lt;a href=&quot;https://github.com/jsanda/cassalog&quot;&gt;Cassalog&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;*/stats&lt;/code&gt; &amp;amp; &lt;code&gt;*/raw&lt;/code&gt; Replace &lt;code&gt;*/data&lt;/code&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;*/data&lt;/code&gt; has been **deprecated* and its functionality split into two single purpose endpoints, &lt;code&gt;*/raw&lt;/code&gt; and &lt;code&gt;*/stats&lt;/code&gt;. This is applicable for all metric types (gauge, counter, availability, and string)
&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;*/data&lt;/code&gt; will not receive any updates going forward, and will be removed in future releases. There is no clear timeline for the removal since a lot of clients use it; it will be around at least for another two releases.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;*/stats&lt;/code&gt; endpoints return bucketed, statistical or query-time aggregated data&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;*/raw&lt;/code&gt; endpoints accept and return raw data for a metric&lt;/li&gt;
      &lt;li&gt;Please update your code to use the new endpoints and follow the release notes for more details regarding removal.&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-24&quot;&gt;HWKMETRICS-24&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-57&quot;&gt;HWKMETRICS-57&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Point Tags&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;An optional set of tags can be supplied with each data point when inserting data. Unlike metric definition tags, data point tags cannot be modified. &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-368&quot;&gt;HWKMETRICS-368&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-54&quot;&gt;HWKMETRICS-54&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Tag based bucketing for data points is supported for counters and gauges &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-377&quot;&gt;HWKMETRICS-377&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-373&quot;&gt;HWKMETRICS-373&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;New endpoints for filtering and grouping data by tags:&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;GET /hawkular/metrics/gauges/{id}/stats/tags/{tags}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;GET /hawkular/metrics/counters/{id}/stats/tags/{tags}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tags&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Deleting tags only requires the tag keys and not the values, this simplifies the process for tag deletion. For backwards compatibility, the API will still accept name value pairs but will not take the value into account &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-385&quot;&gt;HWKMETRICS-385&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;A new endpoint was added to query for the available values contained in a tag &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-197&quot;&gt;HWKMETRICS-197&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Endpoint: &lt;code&gt;GET hawkular/metrics/gauge/tags/{tags}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code&gt;GET hawkular/metrics/gauge/tags/hostname:*01*&lt;/code&gt; returns &lt;code&gt;hostname: [&amp;quot;web01prod&amp;quot;, &amp;quot;web01qa&amp;quot;, &amp;quot;backend01prod&amp;quot;, &amp;quot;backend01qa&amp;quot; ]&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String Metric Type (Experimental)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Hawkular Metrics now provides a string metric type. This release introduces new endpoints for reading and writing string data points &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-384&quot;&gt;HWKMETRICS-384&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;There is a 2 KB size limit for each data point. That limit may be configurable in future releases.&lt;/li&gt;
      &lt;li&gt;New endpoints under &lt;code&gt;/strings&lt;/code&gt; are experimental, so changes which break backwards compatibility could be introduced in future releases. The experimental tag allows time for feedback to better determine what the API should be.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Asynchronous authentication for Openshift Metrics&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Important performance improvement: the authentication code now uses a non blocking HTTP Client (Undertow Client) to validate authentication tokens calling Kubernetes&apos; master&lt;/li&gt;
      &lt;li&gt;Performance improvements details: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/pull/481#issue-148320027&quot;&gt;https://github.com/hawkular/hawkular-metrics/pull/481#issue-148320027&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/pull/481#issuecomment-209876952&quot;&gt;https://github.com/hawkular/hawkular-metrics/pull/481#issuecomment-209876952&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-330&quot;&gt;HWKMETRICS-330&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API Updates&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Stats are excluded from empty bucket data points rather than returning the string NaN and zero for the samples property &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-396&quot;&gt;HWKMETRICS-396&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Endpoints that use the order param also accept lower case values &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-389&quot;&gt;HWKMETRICS-389&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Sum is included in bucket output for gauges and counters &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-370&quot;&gt;HWKMETRICS-370&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;The status page can now be loaded over HTTPS without errors &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-388&quot;&gt;HWKMETRICS-388&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Added overwrite param to tenant and metric creation. This will only overwrite the configuration (such as retention settings or tags) of the metric or tenant and not the actual data stored. Also overwrite the retention will only affect new data points added and not existing data already stored &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-148&quot;&gt;HWKMETRICS-148&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Updated Documentation&lt;/h3&gt;
&lt;p&gt;The entire &lt;a href=&quot;http://www.hawkular.org/docs/components/metrics/index.html&quot;&gt;Hawkular Metrics User Guide&lt;/a&gt; has been rewritten and it is now accessible from the top menu of &lt;a href=&quot;https://hawkular.org&quot;&gt;Hawkular.org&lt;/a&gt;. The new guide has extensive documentation about metric types, query and tagging capabilities along lots of examples. Thank you &lt;a href=&quot;https://github.com/jsanda&quot;&gt;@jsanda&lt;/a&gt; for this amazing update!&lt;/p&gt;
&lt;h3&gt;Java Client (Experimental)&lt;/h3&gt;
&lt;p&gt;Thanks to an effort started by the &lt;a href=&quot;https://github.com/hawkular-qe&quot;&gt;Hawkular QE&lt;/a&gt; organization, Hawkular Metrics now has an official &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;Java client&lt;/a&gt;. The repository has been fully transferred to Hawkular community where will be maintained going forward. The client is now at an experimental alpha stage and we expect to polish the API and internals in the coming months.&lt;/p&gt;
&lt;p&gt;A big thank you goes to &lt;a href=&quot;https://github.com/jkandasa&quot;&gt;@jkandasa&lt;/a&gt; and &lt;a href=&quot;https://github.com/vnugent&quot;&gt;@vnugent&lt;/a&gt; for creating and the maintaining the project until now. &lt;a href=&quot;https://github.com/jkandasa&quot;&gt;@jkandasa&lt;/a&gt; will continue to serve as an active contributor and core member.&lt;/p&gt;
&lt;h3&gt;Blog Posts &amp;amp; Articles&lt;/h3&gt;
&lt;p&gt;Here are some recently published Metrics related blog posts and articles from around the Hawkular community:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hawkular.org/blog/2016/04/19/jmxtrans-to-hawkular-metrics.html&quot;&gt;Monitoring JVM applications with jmxtrans&lt;/a&gt; by &lt;a href=&quot;https://github.com/tsegismont&quot;&gt;@tsegismont&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hawkular.org/blog/2016/04/22/collecting-metrics-from-prometheus-endpoints.html&quot;&gt;Collecting Metrics from Prometheus Endpoints&lt;/a&gt; by &lt;a href=&quot;https://github.com/jmazzitelli&quot;&gt;@jmazzitelli&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hawkular.org/blog/2016/04/21/datamining-first-release.html&quot;&gt;Hawkular Data Mining 0.1.0.Final Released&lt;/a&gt; by &lt;a href=&quot;https://github.com/pavolloffay&quot;&gt;@pavolloffay&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Hawkular Metrics Clients&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-java&quot;&gt;https://github.com/hawkular/hawkular-client-java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Release Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Github Release: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.15.0&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.15.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JBoss Nexus Maven artifacts: &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jira release tracker: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329846&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329846&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, and Heiko Rupp for their project contributions.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>New Hawkular packaging</title>
      <link>http://www.hawkular.org/blog/2016/04/28/new-packaging.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp, Stefan Negrea)</author>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/04/28/new-packaging.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;[ This blog post has been sent before to the hawkular-dev mailing list ]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With a growing community and an increasingly large number of sub-projects, it is the perfect time to rethink the
packaging of Hawkular. This post is a blueprint for changes to come to Hawkular as well as establish some patterns
for futures decisions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far we have created Hawkular &quot;All-in-one&quot; releases that contain everything, Hawkular server components, UI,
the agent and also embedded versions of Cassandra and KeyCloak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s certainly the case that for community we will still deliver an all-in-one package.
We also need to consider separate distributions for other projects that integrate with Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recent effort to integrate with &lt;a href=&quot;blog/2016/02/22/hawkular-manage-iq.html&quot;&gt;ManageIQ&lt;/a&gt; comes with
its own set of requirements for services.
Not all of the Hawkular components are needed and required components may be configured differently.
For example the UI is supplied from within ManageIQ side and Hawkular is to be run headless. Other
components like Cassandra will not be run in embedded mode, so that there is no need to supply it in the package.
Likewise KeyCloak will not be shipped and probably not even needed because we only have technical
users that will access Hawkular services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_existing_components_services&quot;&gt;Existing Components / Services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here a list of projects that are part of Hawkular project&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hdlist&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Metrics
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;scalable, asynchronous, multi tenant, long term metrics storage engine&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Inventory
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;registry of &quot;things&quot; that contains info about your applications, servers, etc. and also keeps track of
their relationships with each other&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Alerts
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;alerting engine that allows trigger definitions to evaluate incoming data, generate alerts (or events), and
react with flexible actions ond lifecycle management&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
CommandGW
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;messaging framework for communicating between components&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Bus+Nest
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;messaging framework used for communicating between components&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
BTM
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;provide capabilities to monitor the flow of a business transaction instance and enable performance analysis of
the individual components that make up an application&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Agent
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;used to monitor WildFly and related projects&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Accounts
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;is the user/organization module that provides authentication, authorization and configuration for user accounts&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Data Mining
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;alert predictions based on time series data&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Hawkular UI
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;The current UI&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Hawkular Charts
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;Angular Directives for Metrics Visualization used by the current UI&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Embedded Cassandra
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;embedded Cassandra server specifically configured for project use&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also various clients like the Ruby Gem or the Android client. Those are not part of this discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_options_for_packages&quot;&gt;Options for Packages&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The distribution packages need to follow product integrations with a special distribution for community.
The community package could potentially include every single package from the Hawkular organization. However,
the rest of the packages need to be created along the lines of product use and include only the minimal amount of
components, services and third-party libraries to satisfy integration requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The distributions should be seen as funels, the Hawkular community creates a set of sub-projects that then get
combined into few distributions that in turn get consumed. Following this analogy, the number of packaged distributions
should also be kept to a minimum possible. For now we settled on 3 packages detailed below, all will be available
for download on JBoss.org.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the exception of the community distribution:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;the QA team will be engaged in testing the package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the sub-components will strive to be aligned in terms of tech stack and maturity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an automated test suite is required for packages that combine more than one project&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_community_distribution&quot;&gt;Hawkular - Community Distribution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Will include every single service listed above. The UI is a requirement because some services are very hard to
understand or use without a friendly interface. The UI will be a community only effort at this point since there
are no plans for productization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current Hawkular repository will be adjusted to reflect this new mission; the current UI will be moved
to a separate repository. This package builds on Hawkular Core Services as described next.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_core_services&quot;&gt;Hawkular Core Services&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Geared towards ManageIQ integrations and will include only the components needed for the MiQ provider.
This package uses the Metrics Distribution as described below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Components included: Metrics, Alerts, Inventory, CommandGW, Nest and Bus as well as the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reasons for some exclusions: Keycloak (different security model), Embedded Cassandra
(only full C* deployments will be supported), and no Hawkular UI because it will use a special purpose UI for ManageIQ&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_metrics_distribution&quot;&gt;Metrics Distribution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Geared towards usage as a pure Time Series Database (TSDB) and will be exclusively made of Hawkular Metrics service.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_graphical_overview&quot;&gt;Graphical overview&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This graphic visualizes the 3 packages again&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-packages&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawkular-packaging-new.png&quot; alt=&quot;Packages and components&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Packages and components&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Orange is the Metrics distribution, green+orange (with the red box around it) is Hawkular-core-services and
everything in the blue box is the all-in-one community distribution&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_expansion_and_contraction&quot;&gt;Expansion and Contraction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since its inception Hawkular has been growing by all metrics: projects, lines of code, binary downloads,
contributors, etc. But uncontrolled increase in some metrics can be detrimental to the organization.
This is especially true for the number of projects. We will always need new projects to experiment, but the
reverse might be true for mature and established projects.
As the packaging and requirements for each package mature we need to consider the reverse, combining projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_packaging_format&quot;&gt;Packaging Format&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post did not touch one important aspect: physical packaging formats (rpm, zip, war, jar) for the 3 distributions.
We will follow-up with additional details in the coming weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Inventory 0.15.0.Final - Release</title>
      <link>http://www.hawkular.org/blog/2016/04/27/hawkular-inventory-0.15.0.Final-released.html</link>
      <author>noreply@hawkular.org (Lukas Krejci)</author>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/04/27/hawkular-inventory-0.15.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m happy to announce the release of Hawkular Inventory 0.15.0.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_changes&quot;&gt;Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release was brewing for a long time and brings just 1 important and big
feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_inventory_synchronization&quot;&gt;Inventory Synchronization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To ensure only the minimal amount of work is done when syncing, feeds,
resource and metric types as well as resources and metrics have now an
associated &quot;identity hash&quot;, which is a Merkle tree hash of the entity&amp;#8217;s ID,
important data (depends on entity type) and the hashes of its children. This
way one can quickly check if a feed reported any new changes since the last
time - just compare its identity hash with the last value known to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now describe the structure of the inventory a feed wants to report
locally on the feed and report it back to inventory server - it will ensure
that all creates, updates and deletes are applied so that inventory reflects
what the feed &quot;sees&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_other&quot;&gt;Other&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from the inventory synchronization there&amp;#8217;s been a handful of bugfixes
and improvements and updates to REST documentation that should make it a
little bit easier to understand (further enhancements are hopefully coming,
we&amp;#8217;re still learning how to use swagger in java efficiently ;-) ).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the API of canonical paths has been extracted from the inventory
project into Hawkular Commons and lives as a standalone artifact -
&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/commons/hawkular-inventory-paths/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/commons/hawkular-inventory-paths/&lt;/a&gt;.
This was done to minimize the dependencies between various Hawkular components
that need to use canonical paths.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_future&quot;&gt;Future&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the future releases, we plan to refine the inventory sync further,
restructure the REST API to get rid of the potential ambiguities and many
other things.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_relase_links&quot;&gt;Relase Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Github&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-inventory/releases/tag/0.15.0.Final&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-inventory/releases/tag/0.15.0.Final&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Maven Artifacts&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/inventory/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/inventory/&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Special thanks go out to Justine Tunney, Heiko Rupp, Jirka Kremser, Pavol
Loffay and Peter Palaga for their contributions to the release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Collecting Metrics from Prometheus Endpoints</title>
      <link>http://www.hawkular.org/blog/2016/04/22/collecting-metrics-from-prometheus-endpoints.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/04/22/collecting-metrics-from-prometheus-endpoints.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular WildFly Agent 0.17.2.Final has just been released. This new release introduces a very interesting feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_prometheus_metrics&quot;&gt;Prometheus Metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agent now has the ability to monitor Prometheus endpoints and store their metrics to Hawkular Metrics. This means any
component that exports Prometheus metric data via either &lt;a href=&quot;https://prometheus.io/docs/instrumenting/exposition_formats/&quot;&gt;the Prometheus binary or text formats&lt;/a&gt; can have those metric data collected by the agent
and pushed up into Hawkular Metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_configuration&quot;&gt;Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is very easy to configure the Hawkular WildFly Agent to collect Prometheus metric data. In the WildFly container
that houses the agent, edit its standalone.xml configuration file and add one or more &amp;lt;remote-prometheus&amp;gt; elements
in the &amp;lt;managed-servers&amp;gt; section of the agent subsystem:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;remote-prometheus name=&quot;My Remote Prometheus Endpoint&quot;
                   enabled=&quot;true&quot;
                   url=&quot;http://my-prometheus-endpoint:9090/metrics&quot;
                   interval=&quot;30&quot;
                   timeUnits=&quot;seconds&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tells the agent to periodically scrape the metric data from that remote Prometheus endpoint and whatever metrics
it finds will be pushed to Hawkular Metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, if you only want to collect Prometheus metric data (and not collect any other kind of metric data,
like those from DMR endpoints or Jolokia/JMX endpoints) you need only those &amp;lt;remote-prometheus&amp;gt; declarations. You
do not have to also collect from &amp;lt;remote-dmr&amp;gt; or &amp;lt;remote-jmx&amp;gt; servers (though you are free to do so if you want to monitor
types of those components, too).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some Prometheus endpoints expose a lot of metrics, some of which you may not be interested in collecting and storing. In
this case, you have the option to define metric sets which tell the agent which metrics to collect and store (any others
will be ignored).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is an example of a full agent subsystem configuration that defines a remote Prometheus endpoint and the metrics
to be collected from that endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;subsystem xmlns=&quot;urn:org.hawkular.agent:agent:1.0&quot; enabled=&quot;true&quot;&amp;gt;
    &amp;lt;diagnostics enabled=&quot;true&quot; interval=&quot;1&quot; reportTo=&quot;LOG&quot; timeUnits=&quot;minutes&quot;/&amp;gt;
    &amp;lt;storage-adapter type=&quot;HAWKULAR&quot; serverOutboundSocketBindingRef=&quot;hawkular&quot; username=&quot;jdoe&quot; password=&quot;password&quot;/&amp;gt;

    &amp;lt;metric-set-prometheus name=&quot;Important Metrics&quot;&amp;gt;
        &amp;lt;metric-prometheus name=&quot;http_.*&quot;/&amp;gt;
        &amp;lt;metric-prometheus name=&quot;evaluation_failures_total&quot; /&amp;gt;
    &amp;lt;/metric-set-prometheus&amp;gt;

    &amp;lt;managed-servers&amp;gt;
        &amp;lt;remote-prometheus enabled=&quot;true&quot;
                           name=&quot;My Remote Prometheus Endpoint&quot;
                           url=&quot;http://my-remote-prometheus-endpoint:9090/metrics&quot;
                           metricSets=&quot;Important Metrics&quot;
                           interval=&quot;30&quot;
                           timeUnits=&quot;seconds&quot; /&amp;gt;
    &amp;lt;/managed-servers&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above configuration tells the agent to scrape the given Prometheus endpoint URL every 30 seconds and
store all the metrics with the name &quot;evaluation_failures_total&quot; or with a name that matches
the regular expression &quot;http_.*&quot;. Any other metrics exported by that remote Prometheus endpoint will be
ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Information about this release can be found on Github here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-agent/tree/0.17.2.Final&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-agent/tree/0.17.2.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-agent/releases/tag/0.17.2.Final&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-agent/releases/tag/0.17.2.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Data Mining 0.1.0.Final Released</title>
      <link>http://www.hawkular.org/blog/2016/04/21/datamining-first-release.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/04/21/datamining-first-release.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce the first release 0.1.0.Final of the Hawkular Data Mining project. It contains several time
series models and utility classes for time series modelling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_time_series_models&quot;&gt;Time series models&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simple exponential smoothing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Double exponential smoothing (Holt&amp;#8217;s linear trend)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seasonal triple exponential smoothing (Holt Winters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple moving average (Weighted moving average)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AutomaticForecaster - which automatically selects the best model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parameters of all models are estimated using maximum likelihood estimation and models are designed for online
learning&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_time_series_manipulation_statistics&quot;&gt;Time series manipulation &amp;amp; Statistics&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Augmented Dickey-Fuller test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Autocorrelation function (ACF)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time series decomposition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time series lagging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time series differencing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic period identification&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_integration_into_hawkular&quot;&gt;Integration into Hawkular&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The integration into Hawkular can be found in &lt;em&gt;datamining&lt;/em&gt; branch in the main Hawkular repository.
Predictive charts are located in Explorer tab. Predictions can be enabled for any number of steps in the future for
any metric being collected. Prediction engine automatically selects the best model for given time series. Currently it
selects from simple, double and triple exponential smoothing models. In the following charts predictions produced
by these models are showed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-datamining-triple&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/datamining-first-release-triple-ex.jpg&quot; alt=&quot;datamining&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Model Triple exponential smoothing&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;img-datamining-double&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/datamining-first-release-double-ex.jpg&quot; alt=&quot;datamining&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Model Double exponential smoothing&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;img-datamining-simple&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/datamining-first-release-simple-ex.jpg&quot; alt=&quot;datamining&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Model Simple exponential smoothing&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that currently there is an issue with querying historical data from Metrics due to authentication issues. However
Data Mining still receives metrics from bus so it is important to enable predictions as soon as possible and wait for
some time to collect data (or increase collection interval). This will be fixed in the next versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_next_steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fix querying historical metric data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prediction intervals&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-datamining/releases/tag/0.1.0.Final&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-datamining/releases/tag/0.1.0.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module documentation:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;../../../../docs/components/datamining/index.html&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module REST API:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;../../../../docs/rest/rest-datamining.html&quot;&gt;REST API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks goes to Jiri Kremser and UI team for helping with predictive charts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring JVM applications with jmxtrans</title>
      <link>http://www.hawkular.org/blog/2016/04/19/jmxtrans-to-hawkular-metrics.html</link>
      <author>noreply@hawkular.org (Thomas Segismont)</author>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/04/19/jmxtrans-to-hawkular-metrics.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, you&amp;#8217;ll learn how to monitor applications running on the Java Virtual Machine with jmxtrans and Hakwular Metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics&quot;&gt;Hawkular Metrics&lt;/a&gt; is an easy to install, scalable metric storage component.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jmxtrans.org/&quot;&gt;jmxtrans&lt;/a&gt; is a popular monitoring tool for Java based applications. It connects to a JVM via
JMX, collects metrics, and sends the data to the backend of your choice. Very often a Graphite backend is used.
As an example, we will monitor a Tomcat 8 server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Metrics can store data sent over the Graphite text protocol, thanks to
&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/tree/master/clients/ptranslator&quot;&gt;ptrans&lt;/a&gt;. ptrans is a proxy server
taking in metrics data in several common formats and emitting them as REST requests into Hawkular Metrics backend for
storage. The figure below illustrates the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-ptrans&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/ptrans.png&quot; alt=&quot;ptrans&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. ptrans (Protocol Translator)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;jmxtrans will communicate with ptrans over the Graphite text protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_setup_in_details&quot;&gt;The setup in details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hawkular_metrics_and_ptrans&quot;&gt;Hawkular Metrics and PTrans&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hawkular.org/docs/components/metrics/installation.html&quot;&gt;Hawkular Metrics standalone installation&lt;/a&gt; is
documented on the Hawkular website. ptrans setup is documented on the same page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_tomcat_8&quot;&gt;Tomcat 8&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JMX remote access must be enabled otherwise jmxtrans can&amp;#8217;t connect. To do this, create (or modify) the &lt;code&gt;setenv.sh&lt;/code&gt;
script in the &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;setenv.sh&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/bin/bash

CATALINA_OPTS=&quot;-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=35135&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jmxtrans&quot;&gt;jmxtrans&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download the latest &lt;a href=&quot;https://github.com/jmxtrans/jmxtrans/releases&quot;&gt;jmxtrans distribution&lt;/a&gt;. Expand it somewhere on
your disk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;code&gt;bin&lt;/code&gt; directory, create a &lt;code&gt;jmxtrans.conf&lt;/code&gt; file. It will be sourced by the &lt;code&gt;jmxtrans.sh&lt;/code&gt; script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;jmxtrans.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/bin/bash

JAR_FILE=&quot;/path/to/jmx-trans/lib/jmxtrans-all.jar&quot; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
LOG_DIR=&quot;/path/to/jmx-trans/bin&quot; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
LOG_FILE=&quot;/path/to/jmx-trans/bin/jmxtrans.out&quot; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
SECONDS_BETWEEN_RUNS=5 &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Where the script will find the jmxtrans fat JAR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The directory where log files should be written&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The file where the process output will be redirected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Instructs jmxtrans to collect metrics and send data every 5 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then create the main configuration file, &lt;code&gt;config.json&lt;/code&gt;. The &lt;a href=&quot;https://github.com/jmxtrans/jmxtrans/wiki&quot;&gt;jmxtrans wiki&lt;/a&gt;
has a detailed reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;config.json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;servers&quot;: [
    {
      &quot;numQueryThreads&quot;: &quot;2&quot;,
      &quot;host&quot;: &quot;localhost&quot;, &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      &quot;port&quot;: &quot;35135&quot;, &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      &quot;queries&quot;: [ &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        {
          &quot;outputWriters&quot;: [ &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;, &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;, &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
                &quot;port&quot;: &quot;2003&quot; &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
              }
            }
          ],
          &quot;obj&quot;: &quot;java.lang:type=OperatingSystem&quot;, &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
          &quot;attr&quot;: [ &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
            &quot;SystemLoadAverage&quot;,
            &quot;AvailableProcessors&quot;,
            &quot;TotalPhysicalMemorySize&quot;,
            &quot;FreePhysicalMemorySize&quot;,
            &quot;TotalSwapSpaceSize&quot;,
            &quot;FreeSwapSpaceSize&quot;,
            &quot;OpenFileDescriptorCount&quot;,
            &quot;MaxFileDescriptorCount&quot;
          ]
        },
        {
          &quot;outputWriters&quot;: [
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot;
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;,
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;,
                &quot;port&quot;: &quot;2003&quot;
              }
            }
          ],
          &quot;resultAlias&quot;: &quot;heap&quot;,
          &quot;obj&quot;: &quot;java.lang:type=Memory&quot;,
          &quot;attr&quot;: [
            &quot;HeapMemoryUsage&quot;,
            &quot;NonHeapMemoryUsage&quot;
          ]
        },
        {
          &quot;outputWriters&quot;: [
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot;
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;,
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;,
                &quot;port&quot;: &quot;2003&quot;
              }
            }
          ],
          &quot;resultAlias&quot;: &quot;cmsoldgen&quot;,
          &quot;obj&quot;: &quot;java.lang:name=CMS Old Gen,type=MemoryPool&quot;,
          &quot;attr&quot;: [
            &quot;Usage&quot;
          ]
        },
        {
          &quot;outputWriters&quot;: [
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot;
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;,
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;,
                &quot;port&quot;: &quot;2003&quot;
              }
            }
          ],
          &quot;resultAlias&quot;: &quot;gc&quot;,
          &quot;obj&quot;: &quot;java.lang:type=GarbageCollector,name=*&quot;,
          &quot;attr&quot;: [
            &quot;CollectionCount&quot;,
            &quot;CollectionTime&quot;
          ]
        },
        {
          &quot;outputWriters&quot;: [
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot;,
              &quot;settings&quot;: {}
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;,
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;,
                &quot;port&quot;: &quot;2003&quot;
              }
            }
          ],
          &quot;resultAlias&quot;: &quot;memorypool&quot;,
          &quot;obj&quot;: &quot;java.lang:type=MemoryPool,name=*&quot;,
          &quot;attr&quot;: [
            &quot;Usage&quot;
          ]
        },
        {
          &quot;outputWriters&quot;: [
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot;
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;,
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;,
                &quot;port&quot;: &quot;2003&quot;
              }
            }
          ],
          &quot;resultAlias&quot;: &quot;threads&quot;,
          &quot;obj&quot;: &quot;java.lang:type=Threading&quot;,
          &quot;attr&quot;: [
            &quot;DaemonThreadCount&quot;,
            &quot;PeakThreadCount&quot;,
            &quot;ThreadCount&quot;,
            &quot;TotalStartedThreadCount&quot;
          ]
        },
        {
          &quot;outputWriters&quot;: [
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot;
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;,
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;,
                &quot;port&quot;: &quot;2003&quot;
              }
            }
          ],
          &quot;resultAlias&quot;: &quot;tomcat8-connectors&quot;,
          &quot;obj&quot;: &quot;Catalina:type=ThreadPool,name=*&quot;,
          &quot;attr&quot;: [
            &quot;currentThreadCount&quot;,
            &quot;currentThreadsBusy&quot;
          ]
        },
        {
          &quot;outputWriters&quot;: [
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.StdOutWriter&quot;
            },
            {
              &quot;@class&quot;: &quot;com.googlecode.jmxtrans.model.output.GraphiteWriter&quot;,
              &quot;settings&quot;: {
                &quot;host&quot;: &quot;127.0.0.1&quot;,
                &quot;port&quot;: &quot;2003&quot;
              }
            }
          ],
          &quot;resultAlias&quot;: &quot;tomcat8-requests&quot;,
          &quot;obj&quot;: &quot;Catalina:type=GlobalRequestProcessor,name=*&quot;,
          &quot;attr&quot;: [
            &quot;bytesReceived&quot;,
            &quot;bytesSent&quot;,
            &quot;errorCount&quot;,
            &quot;processingTime&quot;,
            &quot;requestCount&quot;
          ]
        }
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;name of the host where Tomcat is running&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;jmx remoting port (must match the value set in &lt;code&gt;setenv.sh&lt;/code&gt; in Tomcat installation)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;queries item lists the MBeans which should be invoked&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;output writers item indicates where data collected should be sent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;StdOutWriter simply prints collected data to the process output stream (useful for configuration debugging)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GraphiteWriter sends data to a remote server which understands the Graphite protocols; by default, the text protocol
is used&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;graphite remote host (must match the value set in &lt;code&gt;ptrans.conf&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;graphite remote port (must match the value set in &lt;code&gt;ptrans.conf&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;name of the MBean to invoke&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;list of attributes to collect&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, start jmxtrans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Starting jmxtrans&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./jmxtrans.sh start config.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular in ManageIQ sprint demo(s)</title>
      <link>http://www.hawkular.org/blog/2016/04/08/hawkular-manage-iq-sprint-demo.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Fri, 8 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/04/08/hawkular-manage-iq-sprint-demo.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like Hawkular, ManageIQ is also doing Sprint reviews at regular intervals.
Those reviews are announced on the &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=contact%40manageiq.org&quot;&gt;ManageIQ calendar&lt;/a&gt;
and also on the &lt;a href=&quot;https://twitter.com/manageiq&quot;&gt;ManageIQ Twitter feed&lt;/a&gt;. Reviews usually happen every third week on Wednesday.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular provider integration that we &lt;a href=&quot;blog/2016/02/22/hawkular-manage-iq.html&quot;&gt;talked about before&lt;/a&gt; was now
part of the &lt;a href=&quot;http://manageiq.org/blog/2016/03/sprint-38-review-march-30-2016/&quot;&gt;Sprint 38 demo&lt;/a&gt;. Check the recording at around minute 10:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/ImKCajLxUn8?rel=0&amp;amp;start=612&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next sprint review will be on April 20, 2016 @ 7:30am PDT/10:30am EDT/14:30 GMT and I expect more Hawkular goodies
being present.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.14.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/03/29/hawkular-metrics-0.14.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/03/29/hawkular-metrics-0.14.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.14.0 of Hawkular Metrics. This release is anchored by the launch of a developer oriented distribution to help developers that want to integrate with Hawkular Metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Developer Distribution&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First release of a Hawkular Metrics distribution oriented towards developers that integrate with Hawkular Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is an all inclusive distribution that developers can just download and run to easily test integration code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The distribution is available in two flavors :&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Metrics Web API + Wildfly 10 (requires an external C* cluster)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Metrics Web APi + Wildfly 10 + Embedded Cassandra Server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second distribution is available for installation on OS X via brew&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ brew tap hawkular/hawkular
$ brew install hawkular-metrics-ec&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To download and use on other platforms:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/hawkular-metrics-wildfly-standalone/0.14.0.Final/hawkular-metrics-wildfly-standalone-0.14.0.Final.zip&quot;&gt;Web API + WildFly 10&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/hawkular-metrics-wildfly-embedded-cassandra/0.14.0.Final/hawkular-metrics-wildfly-embedded-cassandra-0.14.0.Final.zip&quot;&gt;Web API + WildFly 10 + Embedded Cassandra&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-364&quot;&gt;HWKMETRICS-364&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-366&quot;&gt;HWKMETRICS-366&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Upgraded Cassandra Driver&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Cassandra driver has been update to version 3.0.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is part of the planned upgrade to Cassandra 3.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-359&quot;&gt;HWKMETRICS-359&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RxJava Improvements&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resolved an issue where the RX computation threads could block while iterating over data results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-357&quot;&gt;HWKMETRICS-357&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.14.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.14.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329845&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329845&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>QR Code support for Android Client</title>
      <link>http://www.hawkular.org/blog/2016/03/20/qr-android.html</link>
      <author>noreply@hawkular.org (Anuj Garg)</author>
      <pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/03/20/qr-android.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Android Client now support QR code (contains combination of key, secret and optionally an expireAt attribute).
Tokens are great to be used as we can revoke it from the server without affecting the user credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ways_to_log_in&quot;&gt;Ways to log in&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two ways to login into Hawkular Server with Android Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;With your credentials, client will generate a token for you and will save it for future use, until it is either expired or revoked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By using a already existing token. It can be done by simply opening QR code for corresponding token in the Web UI and scanning it with your android device.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit the recording here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/kmI5kodxZmY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Triggers are needed to be handled remotely. So feature to create, enable and disable them remotely can be of great help. Activities in the next time will be around that goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics - Roadmap</title>
      <link>http://www.hawkular.org/blog/2016/03/16/hawkular-metrics-roadmap.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/03/16/hawkular-metrics-roadmap.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_about&quot;&gt;About&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Metrics contributors have been working for the past few weeks on a roadmap for the upcoming year. The goal is to give clarity on the project direction, serve as a planning tool for releases, and show our strong commitment to open source. The roadmap below contains proposals that will need further research before becoming actual project features. The design, implementation, and review processes are open to the community, so contributions and feedback are always welcomed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The project and community are enjoying excellent growth. A maturing code base, an ever growing set of integrations, and consistent community contributions are ingredients that make this project successful and also an indication of the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those not familiar with Hawkular Metrics, the project is a high performance and high availability storage engine for large volume metric data. Cassandra is used as the storage engine because of its flexible data model well suited for time-series data storage and linear scalability with no single point of failure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_roadmap&quot;&gt;Roadmap&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cassandra 3.x&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The 3.x release of Cassandra is maturing, making the perfect timing for the project to transition from current 2.2.x line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expect this transition to happen rather soon since work is already in progress (driver updates, and a schema management tool)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-computed aggregates&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Needed to support long term data storage and retrieval for high volume metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Single metrics roll-ups are also the foundation for pre-computed multi-metric aggregations, that goal is to work on this subsequent to single metric roll-ups&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Metric Enhancements&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Histogram metrics are fairly common in other time series databases. The plan is to add histogram metrics as a sub-metric to existing gauge metrics, analogous to what counter-rate metrics are counter metrics. It is common to do the calculations need for the histogram on the client side, but there are a lot of advantages to push the calculations to the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add support for metrics baselines; automatically computed server-side and stored&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement an Apdex score, similar purpose to baselines, but based on the open standard&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native Grafana integration&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grafana integration is important for Hawkular Metrics due to lack of a dedicated UI. Currently Grafana integration works through an InfluxDB compatibility layer that has obvious disadvantages (maintaining compatibility with InfluxDB, limited set of features based on the InfluxDB capability).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A native Grafana provider will be easier to maintain and expose the full feature set of Hawkular Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Developer Support&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide a Hawkular Metrics distribution with all components needed for third-party developers to get a developer environment running with minimal effort&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An easy-to-use and all-inclusive distribution will avoid having platform developers configure Wildfly server and a Casasndra cluster just to test or write integration code&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Import &amp;amp; Export APIs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The project already provides a growing set of APIs for querying metric data, but there are scenarios that require bulk data export into another system for further analysis. And vice-versa, import large amounts of data from another system for longer term storage and aggregation by Hawkular Metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The goal is to provide APIs optimized for bulk importing or exporting data. Tools need to be both fast and easy to use, with the primary use case of moving a large amounts data well beyond the capability of current REST interface (eg. moving 100GB of data).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ElasticSearch integration&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An optional integration with Elastic Search for tasks beyond the capability of Cassandra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basic examples for this are whole tenant searches and aggregation of text based data, such as tags, and even availability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any other suggestion or would like to contribute to the project, please contact us; feedback is more than welcomed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The eleventh milestone of Hawkular released</title>
      <link>http://www.hawkular.org/blog/2016/03/15/hawkular-1.0.0.Alpha11-released.html</link>
      <author>noreply@hawkular.org (Heiko W.Rupp)</author>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/03/15/hawkular-1.0.0.Alpha11-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular, the monitoring platform, is happy to announce milestone release 1.0.0.Alpha11.
You may perhaps wonder if you have missed Alpha 10. Don&amp;#8217;t worry, you did not miss anything.
We had an Alpha 10 build ready, but then decided to withdraw it and to bring you more features.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_running_on_wildfly_10_final&quot;&gt;Running on WildFly 10 final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As announced in the last release we have rebased to WildFly 10 Final.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tokens_and_qr_codes&quot;&gt;Tokens and QR Codes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to generate tokens (combination of key and secret), that can be used
instead of username/password as credentials. Those tokens are great to be used in the
agent configuration so that no username/password is visible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For future usage (e.g. for the Android client) it is possible to obtain a QR code, that
can be scanned and which contains the token information.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-token-screen&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/1alpha11_token_qr.png&quot; alt=&quot;Token screen&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Token screen with QR code&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_apm_and_btm_included&quot;&gt;APM and BTM included&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_application_performance_management_apm&quot;&gt;Application Performance Management (APM)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new Application Performance tab provides a breakdown of the execution performance of each component
within applications deployed to the monitored servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The graph provides a summary per component type. The table provides a breakdown of the activity by component type,
URI and optionally operation. Each row shows the elapsed and actual time spent in the component, where the elapsed
time also incorporates any time spent in sub (i.e. called) components.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-apm-subtab&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawka11-apm.png&quot; alt=&quot;APM tab&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Tab for APM&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_business_transaction_management_btm&quot;&gt;Business Transaction Management (BTM)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The “Business Transaction Management” capability is used to classify and monitor specific paths of execution through an
organisation’s applications and services. Rather than viewing application performance just at the component level, it
is possible to view information about end to end transactions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-btm-subtab&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawka11-btm-overview.png&quot; alt=&quot;BTM Overview&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Tab for BTM&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Managed tab provides an overview of any configured business transactions, such as the “Booking Service” and “Events
Service” above. It shows the number of transactions per hour, completion times and the number of transactions that
ended with a fault.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selecting a particular business transaction will provide a more detailed view.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-btm-detail&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawka11-btm-details.png&quot; alt=&quot;BTM Details&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. BTM detail view&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The top graph shows statistics, aggregated over a selected time interval, related to the business transaction instances.
The details displayed are the transaction and fault counts as a bar chart, with the min, average and max completion
times as a line chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The left hand pie chart represents the breakdown of specific fault types associated with the completed business
transaction instances that ended in fault.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The right hand pie chart is used to display information about properties extracted from the business transaction
instances (defined when setting up a business transaction configuration). In this specific example, the
“performance id” values are being displayed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The segments of the pie charts (fault and different properties) can be selected to filter the business transaction
instances, to refine the information being viewed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_inventory_explorer&quot;&gt;Inventory explorer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have added a generic inventoy explorer, that allows you to browse through
inventory in a hierarchical way and to pick metrics that then are displayed
on the page. The metrics to be shown are stored in the browser internal database.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-explorer-screen&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/1alpha11_explorer.png&quot; alt=&quot;Generic Inventory explorer&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Screen with inventory explorer&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full list of Jira issues fixed in this release:
&lt;a href=&quot;/releasenotes/1.0.0.Alpha11.html&quot;&gt;Release Notes - Hawkular - Version 1.0.0.Alpha11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_notes_for_windows_users&quot;&gt;Notes for Windows users&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run successfully you must start Hawkular like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;standalone.bat -Dorg.hawkular.data.dir=&amp;lt;HawkulaInstallDirUsingFORWARDSlashes&amp;gt;/standalone/data&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha11/hawkular-dist-1.0.0.Alpha11.zip&quot;&gt;Hawkular 1.0.0.Alpha11 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha11/hawkular-dist-1.0.0.Alpha11.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha11 (tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have probably seen
that &lt;a href=&quot;http://www.hawkular.org/blog/2016/02/22/hawkular-manage-iq.html&quot;&gt;Hawkular and ManageIQ are now working together&lt;/a&gt;.
Activities in the next time will be around that goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.13.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/03/02/hawkular-metrics-0.13.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Wed, 2 Mar 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/03/02/hawkular-metrics-0.13.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.13.0 of Hawkular Metrics. This release is anchored by Hawkular integration enhancements, under-the-cover refactorings and fixes, and a new bulk data generation tool.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Generation Tool&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new tool that generates bulk metrics data to be used in performance and load testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It generates directly Cassandra data files (SSTables), which leads to a very fast generation process for large amounts of metrics data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/tree/master/data-generator&quot;&gt;Data Generator&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-355&quot;&gt;HWKMETRICS-355&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Receive Metrics via Hawkular Bus&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When deployed within Hawkular distribution, the project now accepts metrics via the Hawkular Bus; until now only the REST API had support for Metrics insertion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Metrics currently support publishing of newly inserted metrics to the bus and receiving metrics via the bus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-347&quot;&gt;HWKMETRICS-347&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-352&quot;&gt;HWKMETRICS-352&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sorted Stacked Metrics Results&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When requesting stacked metrics aggregation the result is now ordered &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-353&quot;&gt;HWKMETRICS-353&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;External Integrations&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Heapster sink now divides storing to multiple calls. This is an improvement over the initial implementation that had one REST API call per metric (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-290&quot;&gt;HWKMETRICS-290&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ptrans now works with a Hawkular Metrics instance protected by Hawkular Accounts via Hawkular distribution  (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-342&quot;&gt;HWKMETRICS-342&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grafana integration via Influxdb compatible end-point allows connections to a Hawkular Metrics instance protected by Hawkular Accounts via Hawkular distribution (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-343&quot;&gt;HWKMETRICS-343&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.13.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.13.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329530&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329530&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Integration with ManageIQ</title>
      <link>http://www.hawkular.org/blog/2016/02/22/hawkular-manage-iq.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/02/22/hawkular-manage-iq.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we started Hawkular some time ago, we did it under the slogan of
&lt;em&gt;&quot;The Open Source Monitoring and Management Platform&quot;&lt;/em&gt;. And since then
we have achieved a lot and built components like our metrics store,
a powerful graph-oriented inventory or awesome alerting functionality.
And on top of all that a very nice and snappy Web 2.0 UI.&lt;br&gt;
&lt;br&gt;
It also became clear during development that users not only want excellent Middleware
management, which is the focus of Hawkular, but also need to know if
for example slowness of the application is coming from other components
of the stack way below the application server. Which is why we are
&lt;strong&gt;partnering with the ManageIQ project&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_collaborating_with_manageiq&quot;&gt;Collaborating with ManageIQ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.manageIQ.org&quot;&gt;ManageIQ&lt;/a&gt; provides a huge amount of functionality
to manage and monitor virtual machines and containers on VMWare, EC2,
OpenStack, OpenShift, Azure, Rhevm and many more, which nicely complements
the application-centric view of Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ManageIQ has all the knowledge
about the OS and infrastructure the Middleware servers are running on,
where Hawkular only provides some basic information. ManageIQ can be
used to provision new VMs and containers with Middleware in them, which
can then be monitored and managed by Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ManageIQ itself operates as &lt;em&gt;manager of managers&lt;/em&gt;, where it does
not directly talk to a WildFly server, a VM or a container,
but rather tells Hawkular, oVirt or Kubernetes to act on its behalf.
ManageIQ then displays the results of these actions in its UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular team will, together with the ManageIQ team, build a
so called &lt;em&gt;provider integration&lt;/em&gt; in ManageIQ. This integration
lives inside the ManageIQ code base and talks to Hawkular over the
Hawkular-Ruby-Client gem. This integration brings to
ManageIQ the infrastructure needed to talk to the Hawkular server
as manager and thus the connected Middleware servers. This work
includes work on the ManageIQ UI to show the managed Middleware.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-platform-subtab&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawk_miq_arch.png&quot; alt=&quot;Hawkular and ManageIQ&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Overall architecture&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_first_results_of_the_new_collaboration&quot;&gt;First results of the new collaboration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An initial outcome of this work can already be seen in the
Hawkular-client Ruby gem, that is used by the provider to talk to
the Hawkular server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another big milestone is the initial version of the
Hawkular-Provider-integration inside ManageIQ master.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-platform-subtab&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/hawk_miq.png&quot; alt=&quot;Middelware tab in ManageIQ&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Middleware tab in ManageIQ&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.12.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/02/02/hawkular-metrics-0.12.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 2 Feb 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/02/02/hawkular-metrics-0.12.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.12.0 of Hawkular Metrics. This release is anchored by Hawkular integration enhancements, under-the-cover refactoring and changes in code structure, and removal of the deprecated JAX-RS 1.1 implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Authentication&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When deployed part of Hawkular distribution, Hawkular Metrics uses Hawkular Accounts for authentication and authorization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to multi-tenant data segregation, Hawkular Accounts does both authentication and authorization since there are no specific permissions within Hawkular Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more details: (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-69&quot;&gt;HWKMETRICS-69&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-344&quot;&gt;HWKMETRICS-344&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Performance Improvements&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removed obsolete code for tracking tenants; this increased for cases where data was written for a tenant that did not exist before  (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-341&quot;&gt;HWKMETRICS-341&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed the virtual clock handler (used to accelerate internal metrics clock) since it is no longer used (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-340&quot;&gt;HWKMETRICS-340&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JAX-RS 1.1 Implementation - Removed&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The already deprecated JAX-RS 1.1 implementation of Hawkular Metrics has now been removed from the source tree and the modules consolidated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Going forward only JAX-RS 2.0 implementation of the REST API is available&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Wildfly 10 - Deploying &amp;amp; Running&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deploying and running the project on Wildfly 10  is now fully supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support for Wildfly 9 is now dropped&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.12.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.12.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329375&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12329375&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular-BTM now includes Application Performance Management</title>
      <link>http://www.hawkular.org/blog/2016/01/25/hawkular-btm-apm.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/01/25/hawkular-btm-apm.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.7.0.Final of the Hawkular Business Transaction Management project. The main focus for this release has been on adding Application Performance Management capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now when you log into the BTM UI, you will first see the new Application Performance tab. Any activity that is recorded from the servers being managed will be presented as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/2016-01-25-btm-apm.png&quot; alt=&quot;Application Performance Management&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Application performance management information&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The graph represents the aggregation of durations based on the component type, at the specified interval and time span.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The information shown within the table is aggregated based on the component type (e.g. Database, EJB, Consumer, etc), the URI and (depending on whether relevant for the component type), the operation name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metrics shown are the number of aggregated records (e.g. the count), and the durations associated with the elapsed time and actual time. The elapsed time is the total amount of time spent within a component, including any calls to other (child) components, whereas the actual time represents only the time associated with that component.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The filters on the left hand side can be used to restrict the information that is displayed. The &lt;em&gt;search&lt;/em&gt; field can be used to locate specific entries in the table. The &lt;em&gt;Business Transaction&lt;/em&gt; field restricts the aggregated information to that associated with a business transaction configured within the other tab. Finally, the &lt;em&gt;Host Name&lt;/em&gt; field can restrict the viewed information to a specific host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;em&gt;Application Performance&lt;/em&gt; view is very similar to a profiling tool, and therefore can be used to identify performance bottlenecks within a distributed application. The main difference is the level of granularity, profiling tools focus on method invocations, whereas this view is based on higher level components.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The nineth milestone of Hawkular released</title>
      <link>http://www.hawkular.org/blog/2016/01/21/hawkular-1.0.0.Alpha9-released.html</link>
      <author>noreply@hawkular.org (Heiko W.Rupp)</author>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/01/21/hawkular-1.0.0.Alpha9-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular, the monitoring platform, is happy to announce milestone release 1.0.0.Alpha9.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rebase_on_wildfly_10_cr5&quot;&gt;Rebase on Wildfly 10 (CR5)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The biggest, but also least visible change of this release has been the upgrade of the underling
appserver to WildFly 10 (CR5), that also features the new AMQ Artemis messaging subsystem.
On top of that Keycloak has also been upgrade to latest and greatest.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_agent_installer_screen&quot;&gt;Agent installer screen&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We made the agent installer screen generally available with the knowledge that
we are going to change and move that in the next release. This way you can
use it and the installer more easily to instrument your WildFly 10 and EAP 7 Beta
servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-installer-screen&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/1alpha9_installer.png&quot; alt=&quot;Installer Screen&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Screen to get an agent installer from&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_platform_subtab_for_app_servers&quot;&gt;Platform subtab for App servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you go to an individual application server you will now see a brand new
platform tab, that gives you some information about the (virtual) host, the
server is running on&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-platform-subtab&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/1alpha9_platform.png&quot; alt=&quot;Platform Overview&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Platform subtab&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tiling_of_datasources&quot;&gt;Tiling of Datasources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The datasources tab has been converted to show a tile view for the individual datasources.
Clickin on one then leads to the detail view.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-ds-tiles&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/1alpha9_ds.png&quot; alt=&quot;Datasources&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Datasources view&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_transactions_subtab&quot;&gt;New Transactions subtab&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Application servers now also show information about transactions&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-ts-tab&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/1alpha9_tx.png&quot; alt=&quot;URL List&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Transactions subtab&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full list of Jira issues fixed in this release:
&lt;a href=&quot;/releasenotes/1.0.0.Alpha9.html&quot;&gt;Release Notes - Hawkular - Version 1.0.0.Alpha9&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_notes_for_windows_users&quot;&gt;Notes for Windows users&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run successfully you must start Hawkular like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;standalone.bat -Dorg.hawkular.data.dir=&amp;lt;HawkulaInstallDirUsingFORWARDSlashes&amp;gt;/standalone/data&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit the recording here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/jod9T7hCOGg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will announce the next milestone demo on our
&lt;a href=&quot;https://plus.google.com/b/100667078659222571663/+HawkularOrgProject&quot;&gt;Google Plus page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha9/hawkular-dist-1.0.0.Alpha9.zip&quot;&gt;Hawkular 1.0.0.Alpha9 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha9/hawkular-dist-1.0.0.Alpha9.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha9 (tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next Alpha is planned for February 17th, and we are planning to work on the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move Hawkular onto WildFly 10 Final (if available )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improvements in agent installer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WF state display (&quot;reload needed&quot;) + action to reload&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Faceted filtering&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bug fixing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby-client work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perf improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;agent-inventory-sync&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Command Gateway Clients</title>
      <link>http://www.hawkular.org/blog/2016/01/21/hawkular-command-gateway-clients.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/01/21/hawkular-command-gateway-clients.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I posted a new blog entry that briefly goes over what a client must do in order to be able to send and receive requests and responses over the Hawkular Command Gateway Web Socket interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See: &lt;a href=&quot;http://management-platform.blogspot.com/2016/01/hawkular-command-gateway-clients.html&quot; class=&quot;bare&quot;&gt;http://management-platform.blogspot.com/2016/01/hawkular-command-gateway-clients.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Data Mining - Predictive Charts</title>
      <link>http://www.hawkular.org/blog/2016/01/20/hawkular-datamining-demo-hwk-alpha9.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/01/20/hawkular-datamining-demo-hwk-alpha9.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to present you functionality of Hawkular Data Mining module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Data Mining module can be deployed in Hawkular and can be used to predict future values of metrics.
Predicted values are automatically sent to Alerts where conditions are evaluated and an alert can be triggered.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_time_series_models&quot;&gt;Time series models&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the beginning, we &lt;a href=&quot;http://www.hawkular.org/blog/2015/10/24/hawkular-datamining.html&quot;&gt;started&lt;/a&gt; with linear
regression in Apache Spark. This simple model was a good start. Now we use Holt&amp;#8217;s linear trend method which is
a variant of exponential smoothing with linear trend. For an alert forecasting it is important to model a trend.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average&quot;&gt;ARIMA&lt;/a&gt; models
were also proposed, however they require stationary time series and periodical recalculation of parameters would
have to be done. Which requires all historical data in place. For seasonal time series we plan to use Holt Winters
model which is just an extension of the model which is currently used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_data_mining_with_hawkular&quot;&gt;Data Mining with Hawkular&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Predictions are by default disabled. Enabling can by done by creating Relationship from Tenant to Metric, MetricType
or Tenant. Relationship to Tenant enables forecasting of all metrics under given Tenant, to MetricType enables all
metrics of given type. Configuration properties at lower levels override uppers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configuration has only one property&amp;#8201;&amp;#8212;&amp;#8201;forecasting horizon in seconds. If a new metric data is available
module predicts future values up to the last timestamp + forecasting horizon. Then, the predicted
values are sent to Alerts where conditions are evaluated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Hawkular with integrated Data Mining:&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ git clone -b datamining git@github.com:hawkular/hawkular.git
$ cd hawkular
$ mvn clean install -Pdev
$ dist/target/hawkular-*/bin/standalone.sh&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Enable prediction for Heap Used Metric, &lt;a href=&quot;https://gist.github.com/pavolloffay/5c0a7aea318818f59293&quot;&gt;helper functions&lt;/a&gt;.&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ tenant=$(curl -s GET &apos;http://jdoe:password@localhost:8080/hawkular/inventory/tenant&apos;| grep --color=never -oP &apos;path&quot; : &quot;\K/t;[0-9a-z\-]+&apos;)
$ metric=`feed`&apos;/m;MI~R~%5B&apos;`feedId`&apos;%2FLocal~~%5D~MT~WildFly%20Memory%20Metrics~Heap%20Used&apos;
$ curl -ivX POST -H &quot;Content-Type: application/json&quot; &apos;http://jdoe:password@localhost:8080/hawkular/inventory/tenants/relationships&apos; -d &apos;{
    &quot;name&quot;: &quot;__inPrediction&quot;,
    &quot;source&quot;: &quot;&apos;$tenant&apos;&quot;,
    &quot;target&quot;: &quot;&apos;$metric&apos;&quot;,
    &quot;properties&quot;: {&quot;forecastingHorizon&quot;: 150}
}&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we can query predictions for any time in the future. Of course we cannot get reasonable result for predictions
of further future. Confidence intervals widen as the forecast horizon increases. The rate at which the
confidence interval widen is a function of the selected model. The prediction API takes the number of steps to the
future for which it returns the predicted values. One step is equal to the interval at which given metric is collected.
So the number of steps intuitively corresponds to n future measurements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Get five step ahead predictions for Heap Used metric, &lt;a href=&quot;https://gist.github.com/pavolloffay/5c0a7aea318818f59293&quot;&gt;helper functions&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ metricId=&apos;MI~R~%5B&apos;`feedId`&apos;%2FLocal~~%5D~MT~WildFly%20Memory%20Metrics~Heap%20Used&apos;
$ curl -s GET -H &apos;Hawkular-Tenant:&apos;`tenantId` &apos;http://localhost:8080/hawkular/datamining/models/&apos;$metricId&apos;/predict?ahead=5&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2016/datamining-heap-used-holt.png&quot; alt=&quot;Forecast of Heap Used&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Blue dashed line represents forecast of &apos;Heap Used&apos; metric using Holt&amp;#8217;s linear trend model.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chart in the Figure 1 can be found in Hawkular UI from branch
&lt;a href=&quot;https://github.com/hawkular/hawkular/tree/datamining&quot;&gt;datamining&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_as_standalone&quot;&gt;As Standalone&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Data Mining can be used also as standalone application. Following snippets of code show how to create a new
model directly through Data Mining REST API, insert data and get predictions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Create model&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ curl -ivX POST -H &apos;Content-Type: application/json&apos; -H &apos;Hawkular-Tenant: tenant1&apos; &apos;http://localhost:8080/hawkular/datamining/models&apos; -d &apos;{
   &quot;metricId&quot;: &quot;metric1&quot;,
   &quot;collectionInterval&quot;: &quot;150&quot;
  }&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ curl -ivX POST -H &apos;Content-Type: application/json&apos; -H &apos;Hawkular-Tenant: tenant1&apos; &apos;http://localhost:8080/hawkular/datamining/models/metric1/learn&apos; -d &apos;[
  {&quot;timestamp&quot;: 1, &quot;value&quot;: 1},  {&quot;timestamp&quot;: 2, &quot;value&quot;: 10}, {&quot;timestamp&quot;: 3, &quot;value&quot;: 20},
  {&quot;timestamp&quot;: 4, &quot;value&quot;: 40}, {&quot;timestamp&quot;: 5, &quot;value&quot;: 50}]
 ]&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ curl -ivX GET -H &apos;Hawkular-Tenant: tenant1&apos; &apos;http://localhost:8080/hawkular/datamining/models/metric1/predict?ahead=5&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improve model - estimate smoothing parameters from historical data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Holt-Winters seasonal version, model AR process with adaptive filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the most important metrics and tune models for them&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.11.0 - Release</title>
      <link>http://www.hawkular.org/blog/2016/01/12/hawkular-metrics-0.11.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/01/12/hawkular-metrics-0.11.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.11.0 of Hawkular Metrics. This is a large release anchored by query API enhancements, large under-the-cover refactoring of the metric models, and support for deploying the project on Wildfly 10.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Query API Updates&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Limit and Sort Order for raw data queries (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-334&quot;&gt;HWKMETRICS-334&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-62&quot;&gt;HWKMETRICS-62&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-51&quot;&gt;HWKMETRICS-51&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;order&lt;/code&gt; parameters are now available for raw data queries on all metric types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;limit&lt;/code&gt; - integer representing the maximum number of raw data points to be returned&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;order&lt;/code&gt; - either &lt;code&gt;ASC&lt;/code&gt; or &lt;code&gt;DESC&lt;/code&gt; based on the timestamp of the data point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if both are specified than limit is applied from the start of the sorted list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for defaults and additional details please visit - &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/blob/release/0.11.0/api/metrics-api-jaxrs/src/main/rest-doc/base.adoc&quot;&gt;Hawkular Metrics - Rest Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ability to query all metric raw or aggregate metric data (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-331&quot;&gt;HWKMETRICS-331&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fromEarliest&lt;/code&gt; query parameter was added to allow querying for all available data for a metric&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this allows querying all data without specifying start and end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data retention for the metric is taken account, so the max time span is from &lt;code&gt;now&lt;/code&gt; to &lt;code&gt;now - data retention&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed the url for querying rate data across multiple metrics (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-332&quot;&gt;HWKMETRICS-332&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filtering metrics by id (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-234&quot;&gt;HWKMETRICS-234&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;with tag filtering enabled, it is now possible add id filtering via &lt;code&gt;id&lt;/code&gt; parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; parameter supports regex&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Internal Updates&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model refactoring  (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-326&quot;&gt;HWKMETRICS-326&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-323&quot;&gt;HWKMETRICS-323&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;this was a large effort to consolidate the internal domain model without changing any of the user APIs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this change will help the documentation efforts for future releases as well as a consistent data structure for the REST APIs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Integration&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The integration with Hawkular has now been updated to use asynchronous messages (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-337&quot;&gt;HWKMETRICS-337&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Wildfly 10 - Deploying &amp;amp; Running&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deploying and running the project on Wildfly 10  is now fully supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support for Wildfly 9 is deprecated and will be completely dropped in the next release&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.11.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.11.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328918&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328918&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>We are hiring !</title>
      <link>http://www.hawkular.org/blog/2016/01/05/we-are-hiring.html</link>
      <author>noreply@hawkular.org (Thomas Heute)</author>
      <pubDate>Tue, 5 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/01/05/we-are-hiring.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Red Hat is hiring a Java sustaining engineer&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_jboss_operations_network_jon_rhq_and_hawkular&quot;&gt;JBoss Operations Network (JON), RHQ and Hawkular&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/en/technologies/jboss-middleware/operations-network&quot;&gt;JBoss Operations Network&lt;/a&gt; is the product that is fully supported by Red Hat, it is currently based on the &lt;a href=&quot;rhq-project.org&quot;&gt;RHQ project&lt;/a&gt;. The RHQ project is still being maintained and enhanced while developing &lt;a href=&quot;http://www.hawkular.org&quot;&gt;Hawkular&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_who_are_we_looking_for&quot;&gt;Who are we looking for ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are looking for a talented Java developer, preferably with Java EE experience willing to help us on RHQ/JBoss Operations Network. You will join the sustaining engineering team and when time allows help on Hawkular as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You need to be in a country where &lt;a href=&quot;https://www.redhat.com/en/about/office-locations&quot;&gt;Red Hat has a legal entity&lt;/a&gt; but preferably Czech Republic, Poland, India, Mexico&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_do_we_offer&quot;&gt;What do we offer ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We offer a great place to work, Red Hat is listed as one of the &lt;a href=&quot;https://www.glassdoor.com/Best-Places-to-Work-LST_KQ0,19.htm&quot;&gt;best place to work&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sustaining engineers get to learn a lot and fast, you will be challenged on many areas of the project, from Cassandra storage to Google Web Toolkit with the help of very talented engineers who will help you grow as a developer. We&amp;#8217;ll spread the work with the rest of the team depending on what you enjoy doing, what you want to do/learn and things that must be done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will be able to work remotely from home, partially or fully.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_apply&quot;&gt;How to apply ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;http://jobs.redhat.com/jobs/descriptions/middleware-software-engineer-management-and-monitoring-brno-jihomoravsky-kraj-czech-republic-job-1-5929970&quot;&gt;apply here&lt;/a&gt;, you can also contact me directly via direct message &lt;a href=&quot;https://twitter.com/theute&quot;&gt;through Twitter&lt;/a&gt; or find me (theute) on IRC Freenode servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best thing you can do is also to create Pull Requests on either of &lt;a href=&quot;https://github.com/hawkular/hawkular&quot;&gt;Hawkular&lt;/a&gt; or &lt;a href=&quot;https://github.com/rhq-project/rhq&quot;&gt;RHQ&lt;/a&gt; project, this would beat any other reference, if you are looking for ideas, feel free to join #hawkular or #rhq on the IRC Freenode servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m looking forward to grow the team and deliver more, faster, better, happier, stronger together.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The eigth milestone of Hawkular released</title>
      <link>http://www.hawkular.org/blog/2015/12/16/hawkular-1.0.0.Alpha8-released.html</link>
      <author>noreply@hawkular.org (Heiko W.Rupp)</author>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/12/16/hawkular-1.0.0.Alpha8-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular, the monitoring platform, is happy to announce milestone release 1.0.0.Alpha8.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_dealing_with_keycloak&quot;&gt;Dealing with Keycloak&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular uses Keycloak
&lt;a href=&quot;http://keycloak.jboss.org&quot;&gt;Keycloak&lt;/a&gt;
as its Single Sign On and Identity Management System.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the downloads, Keycloak is/as always running embedded and expected the Hawkular
server to run on localhost - if what was not the case the user had to edit two
files before being able to bind the server on a different (public) IP or even use
an external Keycloak server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Hawkular 1.0.0.Alpha 8 it is now possible to pass a command line option on
startup to point to the Keycloak server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;bin/standalone.sh -Dkeycloak.server.url=http://&amp;lt;kc-server&amp;gt;:&amp;lt;kc-port&amp;gt;/auth&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tokens&quot;&gt;Tokens&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far when doing REST calls from your client, via &lt;code&gt;curl&lt;/code&gt; or also when using the
 agent, it was required to pass username and password, which was not optimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now started supporting the use of token + secret. For this purpose there is a
new UI part in the user menu&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-token-screen&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/a8_token_screen.png&quot; alt=&quot;Token Screen&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Screen to create and list tokens&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you have such a token, you will be then able to access URLs via&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;curl -H &apos;Accept: application/json&apos; -i -u b3063b1f-640b-4853-81df-47257c01e63e:94edc711ef80c592cb417bfffd9bc496 &lt;a href=&quot;http://snert:8080/hawkular/accounts/personas/current&quot; class=&quot;bare&quot;&gt;http://snert:8080/hawkular/accounts/personas/current&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;curl -H &apos;Accept: application/json&apos; -i -u jdoe:password &lt;a href=&quot;http://snert:8080/hawkular/accounts/personas/current&quot; class=&quot;bare&quot;&gt;http://snert:8080/hawkular/accounts/personas/current&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that this does not yet work for all subsystems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server_overview_page&quot;&gt;Server Overview page&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you go to an indivdual application server you will now see a brand new
overview page&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-server-overview&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/a8_server_overview.png&quot; alt=&quot;Server Overview&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Server overview&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This page is now also the default when you select an application server from the list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_url_list&quot;&gt;URL List&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The URL list page has been revamped to show individual servers in small tiles that
include the state and also a sparkline diagram of the response time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-server-overview&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/a8_url_list.png&quot; alt=&quot;URL List&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Server overview&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, it is now possible to filter the tiles shown by name
and also state.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_notes&quot;&gt;Release notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full list of Jira issues fixed in this release:
&lt;a href=&quot;/releasenotes/1.0.0.Alpha8.html&quot;&gt;Release Notes - Hawkular - Version 1.0.0.Alpha8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_notes_for_windows_users&quot;&gt;Notes for Windows users&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Windows:
To be able to perform deployments on Windows the user must hand-edit &lt;code&gt;standalone.xml&lt;/code&gt; and replace:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;blobTransferPolicy.uploadUrl=file:${org.hawkular.data.dir:${jboss.server.data.dir}}&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;blobTransferPolicy.uploadUrl=file:///${org.hawkular.data.dir:${jboss.server.data.dir}}&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run successfully you must start hawkular like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;standalone.bat -Dorg.hawkular.data.dir=&amp;lt;HawkulaInstallDirUsingFORWARDSlashes&amp;gt;/standalone/data&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit the recording here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/2a5HAnt7Dik?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will announce the next milestone demo on our
&lt;a href=&quot;https://plus.google.com/b/100667078659222571663/+HawkularOrgProject&quot;&gt;Google Plus page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha8/hawkular-dist-1.0.0.Alpha8.zip&quot;&gt;Hawkular 1.0.0.Alpha8 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha8/hawkular-dist-1.0.0.Alpha8.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha8 (tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agent-installer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/wildfly-monitor/0.11.1.Final/hawkular-wildfly-monitor-installer-0.11.2.Final-standalone.jar&quot;&gt;Agent installer 0.11.2 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next Alpha is planned for January 20th, and we are planning to work on the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stabilization work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More work on labels&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow to use tokens all over the place&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move Hawkular onto WildFly 10 (if available )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>BTM: Instrumenting an application running from a docker image</title>
      <link>http://www.hawkular.org/blog/2015/12/01/hawkular-btm-instrument-docker-image.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Tue, 1 Dec 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/12/01/hawkular-btm-instrument-docker-image.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post outlines how to instrument a docker image, to capture business transaction management data and report it to a business transaction management server running in a remote location.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_obtaining_an_example_docker_image&quot;&gt;Obtaining an example docker image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate the approach, we will use an example docker image associated with a Javascript application running on Vert.x. Either download the complete example distribution from &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/releases/tag/3.0.0&quot;&gt;here&lt;/a&gt;, and navigate to the &lt;em&gt;docker-examples/vertx-docker-javascript&lt;/em&gt; folder, or create a folder in your preferred location with the following two files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dockerfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;###
# vert.x docker example using a JavaScript verticle
# To build:
#  docker build -t sample/vertx-javascript .
# To run:
#  docker run -t -i -p 8080:8080 sample/vertx-javascript
###

# Extend vert.x image
FROM vertx/vertx3

# Set the name of the verticle to deploy
ENV VERTICLE_NAME hello-verticle.js

# Set the location of the verticles
ENV VERTICLE_HOME /usr/verticles

EXPOSE 8080

# Copy your verticle to the container
COPY $VERTICLE_NAME $VERTICLE_HOME/

# Launch the verticle
WORKDIR $VERTICLE_HOME
ENTRYPOINT [&quot;sh&quot;, &quot;-c&quot;]
CMD [&quot;vertx run $VERTICLE_NAME -cp $VERTICLE_HOME/*&quot;]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;hello-verticle.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;vertx.createHttpServer().requestHandler(function (request) {
    request.response().end(&quot;Wild world&quot;);
}).listen(8080);&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we should try out this example application so that we know how it works without any instrumentation. (Note: this assumes that you already have docker installed on your system, and the docker daemon is running. If not please see &lt;a href=&quot;http://www.docker.com&quot; class=&quot;bare&quot;&gt;http://www.docker.com&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described in the &lt;em&gt;Dockerfile&lt;/em&gt; comment block, first run the command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker build -t sample/vertx-javascript .&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and once you have the &lt;em&gt;Successfully built &amp;#8230;&amp;#8203;&lt;/em&gt; message, run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run -t -i -p 8080:8080 sample/vertx-javascript&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and once you have seen the &lt;em&gt;Succeeded in deploying verticle&lt;/em&gt; message, go to a browser and enter the URL &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;. This should display the text &lt;strong&gt;Wild world&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_creating_an_instrumented_version_of_the_docker_image&quot;&gt;Creating an instrumented version of the docker image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When instrumenting a Java application, whether a standalone Java app, or components running within an application server, we only need to set the &lt;em&gt;JAVA_OPTS&lt;/em&gt; environment variable to reference a &lt;strong&gt;javaagent&lt;/strong&gt; jar, and define some properties for contacting the BTM server (i.e. URL and username/password).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When running an application within a docker image, although it is possible to specify environment variables (such as &lt;em&gt;JAVA_OPTS&lt;/em&gt;), it is not possible to reference files (i.e. jars) outside of the image. Therefore to be able to instrument an image, we need to create a separate image based on the one we wish to instrument, with the additional steps required to include the &lt;strong&gt;javaagent&lt;/strong&gt; and required properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To achieve this, create a separate folder from the image being instrumented, and define the following file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dockerfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;###
# vert.x docker example using a JavaScript verticle, instrumented for BTM
# To build:
#  docker build -t sample/vertx-javascript-with-btm .
# To run:
#  docker run -t -i --net=host sample/vertx-javascript-with-btm
###

# Extend vert.x javascript sample image
FROM sample/vertx-javascript

ENV BTM_URI http://localhost:8180/hawkular/btm
ENV BTM_USERNAME jdoe
ENV BTM_PASSWORD password

ENV BTM_VERSION=0.6.0.Final
ENV BTM_AGENT=/libs/hawkular-btm-agent-rest-$BTM_VERSION.jar

ADD https://repository.jboss.org/nexus/service/local/artifact/maven/redirect?r=releases&amp;amp;g=org.hawkular.btm&amp;amp;a=hawkular-btm-agent-rest&amp;amp;v=$BTM_VERSION&amp;amp;e=jar $BTM_AGENT

ENV JAVA_OPTS -javaagent:$BTM_AGENT=boot:$BTM_AGENT -Dhawkular-btm.base-uri=\$BTM_URI -Dhawkular-btm.config.refresh=10 -Dhawkular-btm.username=\$BTM_USERNAME -Dhawkular-btm.password=\$BTM_PASSWORD&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the dockerfile is defining environment variable defaults, but the most important steps are the final two, adding the Hawkular BTM agent to the image and then defining the &lt;em&gt;JAVA_OPTS&lt;/em&gt; variable to reference it (along with the required properties).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we need to build the new instrumented image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker build -t sample/vertx-javascript-with-btm .&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once this has been successfully built, we need to start up a BTM server. This can be done by downloading the most recent distribution from &lt;a href=&quot;https://github.com/hawkular/hawkular-btm/releases&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-btm/releases&lt;/a&gt;, unpacking the distribution and running the following command from the top level folder:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;bin/standalone.sh -Djboss.socket.binding.port-offset=100&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This starts the BTM server on port 8180, so it does not conflict with the port being used by the instrumented application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Final step is to run the instrumented example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;docker run -t -i --net=host sample/vertx-javascript-with-btm&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Instead of defining port mapping, we have used the &lt;em&gt;--net=host&lt;/em&gt; option, to enable the instrumented application to call out to the BTM server running on the host. Also, the default environment variables can be overridden by using the &lt;em&gt;--env&lt;/em&gt; option (e.g. &lt;em&gt;--env BTM_URI=http://&amp;#8230;&amp;#8203;&amp;#8230;&amp;#8203;&lt;/em&gt;).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, once the &lt;em&gt;Succeeded in deploying verticle&lt;/em&gt; message is displayed, we return to a browser. If we enter a URL &lt;a href=&quot;http://localhost:8080/test/app&quot; class=&quot;bare&quot;&gt;http://localhost:8080/test/app&lt;/a&gt; and press return, we should see the same message as before (&lt;strong&gt;Wild world&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we now go to the BTM console (&lt;a href=&quot;http://localhost:8180/hawkular-ui/btm&quot; class=&quot;bare&quot;&gt;http://localhost:8180/hawkular-ui/btm&lt;/a&gt; logging in as &lt;em&gt;jdoe&lt;/em&gt; with password &lt;em&gt;password&lt;/em&gt;), you should see the entered URL in the &lt;em&gt;Candidates&lt;/em&gt; page. This shows that the BTM server has been informed about the business transaction performed on that URI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post has shown how any Java based application, defined as a docker image, can be instrumented by defining a derived image that adds the &lt;strong&gt;javaagent&lt;/strong&gt; jar and sets the required properties for communicating with the BTM server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Business Transactions in JBoss Ticket Monster App (Part 2)</title>
      <link>http://www.hawkular.org/blog/2015/11/30/hawkular-btm-0-6-0-released.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/11/30/hawkular-btm-0-6-0-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.6.0.Final of the Hawkular Business Transaction Management project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main focus for this release has been creating a UI to display statistical information about the configured business transactions. A demo can be seen &lt;a href=&quot;https://vimeo.com/147347020&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_highlights_of_this_release&quot;&gt;Highlights of this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Statistics page per business transaction configuration showing&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a histogram with min, avg, max details, and transaction/fault counts overlaid as a bar chart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fault pie chart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;property pie chart with combobox to select the property of interest&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selecting pie chart segment, for fault or property value, can add item to filter, focusing the information being displayed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Validation capability added to the business transaction configuration UI page. If validation errors are detected in a business transaction configuration, it will be held in a staging area on the server, and is not published out to any active collector agents until fixed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URI candidate list compression - where many URIs are related to a template with path parameter, the parameter will be inferred, and only the template URI shown in the list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processing faults, captured in the collector, will now be associated with the business transaction fragment so that they can be handled with an understanding of the context in which they occurred&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Where available, the &apos;principal&apos; will now be recorded against the business transaction (fragment). Servlet instrumentation rules have been updated to store this information on the business transaction, rather than node detail level.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL prepared statement description now excludes any representation of binary data, to make the description more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JAVA_OPT parameters required to configure the collector (java) agent have now been simplified, moving the byteman properties into BTM specific agent&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There are some backward incompatible changes to the REST service APIs to hopefully make the APIs simpler and more consistent.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download the release from &lt;a href=&quot;https://github.com/hawkular/hawkular-btm/releases/tag/0.6.0.Final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation on how to use Hawkular BTM can be found &lt;a href=&quot;http://www.hawkular.org/docs/components/btm/index.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The detailed release notes can be found &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12316120&amp;amp;version=12328755&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feature requests and bugs should be reported in our project &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Yet another release of Hawkular, the seventh one !</title>
      <link>http://www.hawkular.org/blog/2015/11/19/hawkular-1.0.0.Alpha7-released.html</link>
      <author>noreply@hawkular.org (Thomas Heute)</author>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/11/19/hawkular-1.0.0.Alpha7-released.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_new&quot;&gt;What is new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular, the monitoring platform, is happy to announce the release of its seventh milestone 1.0.0.Alpha7.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_alert_center&quot;&gt;Alert Center&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More progress on the alert center, with the option to list, search and edit triggers (the rules of the alerts definitions).
Alerts are also more prominent from the resources themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_ui_modifications&quot;&gt;UI modifications&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Small/medium enhancements to the UI.
Ability to zoom in in a graph for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_release_notes&quot;&gt;Release notes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full list of Jira issues fixed in this release:
&lt;a href=&quot;/releasenotes/1.0.0.Alpha7.html&quot;&gt;Release Notes - Hawkular - Version 1.0.0.Alpha7&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular console demo also includes a preview of Hawkular BTM (Business Transaction Management)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit the recording here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/ExUnnEuM2zk?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will announce the next milestone demo on our
&lt;a href=&quot;https://plus.google.com/+HawkularOrgProject&quot;&gt;Google Plus page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha7/hawkular-dist-1.0.0.Alpha7.zip&quot;&gt;Hawkular 1.0.0.Alpha7 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha7/hawkular-dist-1.0.0.Alpha7.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha7 (tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next Alpha is planned for December 16th, and we are planning to work on the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More stabilization work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More work on the organizations / multitenancy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support agent download from server for installer purposes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start of an &apos;overview&apos; page per app server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_btw&quot;&gt;Btw&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is one easter-egg in the release, it&amp;#8217;s in the demo ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Business Transactions in JBoss Ticket Monster App</title>
      <link>http://www.hawkular.org/blog/2015/11/10/hawkular-btm-0-5-0-released.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/11/10/hawkular-btm-0-5-0-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.5.0.Final of the Hawkular Business Transaction Management project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main focus of this release has been the development of a UI for configuring business transactions. This has lead to the introduction of an iterative approach for defining business transactions, as shown in this &lt;a href=&quot;https://vimeo.com/145283731&quot;&gt;demo monitoring the JBoss Ticket Monster application&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demo shows how quickly an application can be monitored, without making any changes to the application, allowing business metrics to be obtained. In this case, the performance id can be captured from all bookings, allowing a pie chart to be displayed showing the percentage of bookings for each performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to try out Hawkular BTM on your own applications and provide feedback on any issues you find, or feature requests that you feel will improve the software.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_highlights_of_this_release&quot;&gt;Highlights of this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UI for displaying summary details for Business Transactions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI for configuring information about a Business Transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Business Transaction level filtering. Enables transaction information to be &apos;ignored&apos; (permanently), &apos;disabled&apos; (temporarily), or &apos;all&apos;. Other intermediate levels of granularity may be supported in the future, including potentially filtering on a per instance basis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for JSON expression evaluation using JSONPath&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deriving &apos;completion time&apos; from Business Transaction instances, and storing independent from response time, in Elasticsearch. Percentile information is derived for the completion time, for use in the business transaction summary display&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added instrumentation rules for observe EJB invocations in JBoss EAP and Wildfly servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added action for REST URI template processing to extract path and query parameters as business transaction properties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implemented refresh mechanism for retrieving updates to business transaction configurations within the collector (client), enabling iterative approach for defining the configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download the release from &lt;a href=&quot;https://github.com/hawkular/hawkular-btm/releases/tag/0.5.0.Final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation on how to use Hawkular BTM can be found &lt;a href=&quot;http://www.hawkular.org/docs/components/btm/index.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The detailed release notes can be found &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12316120&amp;amp;version=12328438&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feature requests and bugs should be reported in our project &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.9.0 - Release</title>
      <link>http://www.hawkular.org/blog/2015/10/30/hawkular-metrics-0.8.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/10/30/hawkular-metrics-0.8.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.9.0 of Hawkular Metrics. This is a regular schedule release anchored by integration enhancements for &lt;a href=&quot;http://www.hawkular.org/&quot;&gt;Hawkular&lt;/a&gt; &lt;a href=&quot;https://github.com/hawkular/hawkular&quot;&gt;project&lt;/a&gt; via &lt;a href=&quot;https://github.com/hawkular/hawkular-bus&quot;&gt;Hawkular Bus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.hawkular.org/&quot;&gt;Hawkular&lt;/a&gt; integration&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When deployed within Hawkular, the project now publishes metrics insertion events on the &lt;a href=&quot;https://github.com/hawkular/hawkular-bus&quot;&gt;Hawkular Bus&lt;/a&gt; for consumption by interested parties (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-83&quot;&gt;HWKMETRICS-83&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-10&quot;&gt;HWKMETRICS-10&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added support for publishing large amounts of events (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-315&quot;&gt;HWKMETRICS-315&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved tag query&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is now possible to query metrics by tag via respective metric type end-points: &lt;code&gt;/gauges&lt;/code&gt;, &lt;code&gt;/counters&lt;/code&gt;,  &lt;code&gt;/availability&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-317&quot;&gt;HWKMETRICS-317&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;InfluxDB compatibility&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added millisecond unit support (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-322&quot;&gt;HWKMETRICS-322&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.9.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.9.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328458&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328458&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.10.0 - Release</title>
      <link>http://www.hawkular.org/blog/2015/11/30/hawkular-metrics-0.10.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/11/30/hawkular-metrics-0.10.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.10.0 of Hawkular Metrics. This is a regular schedule release anchored by bus and performance and stability  enhancements, and container work. This release is not as large as previous ones because of we have a few major updates that will make their way into 0.11.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker containers for Hawkular Metrics REST Interface are now based on Wildfly 9 (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-147&quot;&gt;HWKMETRICS-147&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The deprecated container images have been moved out of the Hawkular Metrics repository (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-328&quot;&gt;HWKMETRICS-328&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hawkular Bus Integration&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance improvements (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-319&quot;&gt;HWKMETRICS-319&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Influx Endpoint&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use series name prefix to match a counter or a gauge (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-66&quot;&gt;HWKMETRICS-66&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.10.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.10.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328552&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328552&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Introduction to Hawkular Data Mining Module</title>
      <link>http://www.hawkular.org/blog/2015/10/24/hawkular-datamining.html</link>
      <author>noreply@hawkular.org (Pavol Loffay)</author>
      <pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/10/24/hawkular-datamining.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to introduce a module which will provide functionality for predicting alerts and also showing forecasts
of metrics in Hawkular UI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start with the architecture how it fits to Hawkular. This module isn&amp;#8217;t intended to work in standalone fashion.
Used algorithm inside the engine will eventually change but architecture will remain as is described in the following
diagram.
On application startup, or if forecast for given metrics gets enabled, predictive model is initialized with data from
metrics module. If there is a new metric data available on the bus, it recalculates the model and provide users with
better
predictions. For alert prediction it is crucial to know the threshold value. Predicted value is compared to the
threshold
and if necessary, an alert event is posted on the bus. Predicted values for arbitrary timestamps can
be queried through REST API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/hawkular-datamining-arch.png&quot; alt=&quot;Architecture&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Architecture&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This module is not yet included in the main Hawkular distribution; therefore has to be started from separate application
server. To run this application, execute maven with dev profile. It produces configured wildfly in target directory of
hawkular-datamaning-dist module. Later it will be possible to deploy it as standalone web application in the Hawkular
server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Assuming the Hawkular server is running:&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mvn clean install -Pdev &amp;amp;&amp;amp; ./hawkular-datamaning-dist/target/wildfly-*/bin/standalone.sh&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_algorithm&quot;&gt;Algorithm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Metric data are basically streams of data coming from feeds therefore the algorithm has to recalculate weights of
predictive model for each new incoming data in order to get the most accurate results (online learning).
Apache Spark was chosen to provide streaming and distributed data processing engine. At the moment only local mode of
Apache Spark is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following chart regression line of &apos;Heap Used&apos; metrics is showed. Currently, the line is drawn on
top of the historical data, the plan is to have it on the right to denote the future predictions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/hawkular-datamining-forecast.png&quot; alt=&quot;Forecast of Heap Used&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Yellow line is showing the result of linear regression of &apos;Heap Used&apos; metrics.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far I have been using linear regression with stochastic gradient descent. However this model doesn&amp;#8217;t fulfill
the requirements to get accurate results and predict seasonality. It was a good start to establish the architecture.
Further I&amp;#8217;m going to
continue with more sophisticated methods like ARIMA (Autoregressive integrated moving average) and investigate
possibility of using neural networks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_goals&quot;&gt;Goals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide an alert prediction for given set of metrics. Users should be able to optionally enable a prediction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show forecast of near future in Hawkular UI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_next_steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Customize charts for forecasting &lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-738&quot;&gt;HAWKULAR-738&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seasonal ARIMA model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forecasting with Multi-Layer neural networks&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Repository &lt;a href=&quot;https://github.com/hawkular/hawkular-datamining&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-datamining&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular with customized charts &lt;a href=&quot;https://github.com/pavolloffay/hawkular/tree/prediction-charts&quot; class=&quot;bare&quot;&gt;https://github.com/pavolloffay/hawkular/tree/prediction-charts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The sixth milestone of Hawkular released</title>
      <link>http://www.hawkular.org/blog/2015/10/21/hawkular-1.0.0.Alpha6-released.html</link>
      <author>noreply@hawkular.org (Heiko W.Rupp)</author>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/10/21/hawkular-1.0.0.Alpha6-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular, the monitoring platform, is happy to announce the release of its sixth milestone 1.0.0.Alpha6.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_alert_center&quot;&gt;Alert Center&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have started providing the so called &apos;Alert Center&apos;, a place where you can see all fired alerts and alert
definitions in one place&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-add-jdbc-driver&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha6_alert_center.png&quot; alt=&quot;Alert Center&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. List of definitions in Alert Center&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_organizations&quot;&gt;Organizations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have also started providing support for organizations, where a user may belong to
zero, one or more organizations. This to support multi-tenancy in Hawkular, so that
it could be run in a central installation, but with multiple separate departments only
seing their own resources&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-add-jdbc-driver&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha6_orgs.png&quot; alt=&quot;Organizations&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. List of organization members&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_creation_and_deletion_of_data_sources&quot;&gt;Creation and deletion of Data sources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also a new dialog to add a Datasource to a managed WildFly server&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-add-jdbc-driver&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha6_add_ds.png&quot; alt=&quot;Add Datasource button&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Add Datsource button and action drop-down&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_agent_installer&quot;&gt;Agent installer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have now a little helper, the wildfly-agent installer, that makes it much easier to install
the agent inside a WildFly server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Run the installer&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;java -jar target/hawkular-wildfly-monitor-installer-0.10.1.Final-SNAPSHOT-standalone.jar \
  --module=/path/to/module.zip \
  --wildfly-home=/opt/wildfly-9.0.0.Final \
  --hawkular-server-url=http://myServer:8080&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Agent is then installed to Wildfly Server &lt;code&gt;/opt/wildfly-9.0.0.Final&lt;/code&gt; as a module and is able to
report to Hawkular Server located at &lt;code&gt;&lt;a href=&quot;http://myServer:8080&quot; class=&quot;bare&quot;&gt;http://myServer:8080&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the installer uses a default of jdoe/password for &lt;em&gt;user/password&lt;/em&gt; that is encoded in
a properties file inside the installer jar. If you need a different value you need to edit those properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will in the future (also) support the WildFly Feature packs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_release_notes&quot;&gt;Release notes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full list of Jira issues fixed in this release:
&lt;a href=&quot;/releasenotes/1.0.0.Alpha6.html&quot;&gt;Release Notes - Hawkular - Version 1.0.0.Alpha6&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit the recording here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/i2KCTAp9Cb4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most parts of the Ansible playbooks and roles shown are
available &lt;a href=&quot;https://github.com/pilhuhn/hawkular-agent-ansible&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will announce the next milestone demo on our
&lt;a href=&quot;https://plus.google.com/b/100667078659222571663/+HawkularOrgProject&quot;&gt;Google Plus page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha6/hawkular-dist-1.0.0.Alpha6.zip&quot;&gt;Hawkular 1.0.0.Alpha6 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha6/hawkular-dist-1.0.0.Alpha6.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha6 (tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Wildfly-Monitor module is available standalone from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/wildfly-monitor/0.11.1.Final/hawkular-monitor-0.11.1.Final-module.zip&quot;&gt;WildFly monitor 0.11.1 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agent-installer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/wildfly-monitor/0.11.1.Final/hawkular-wildfly-monitor-installer-0.11.2.Final-standalone.jar&quot;&gt;Agent installer 0.11.2 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next Alpha is planned for November 18th, and we are planning to work on the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More work on the alert center&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More work on the organizations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finish work for JDBC Drivers and Datasources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support agent download from server for installer purposes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start of an &apos;overview&apos; page per app server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_btw&quot;&gt;Btw&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two easter-eggs in the release :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.8.0 - Release</title>
      <link>http://www.hawkular.org/blog/2015/10/12/hawkular-metrics-0.8.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/10/12/hawkular-metrics-0.8.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.8.0 of Hawkular Metrics. This short schedule release is anchored by major enhancements for metrics query aggregation, updated container support, and performance and stability enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Counters&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Counter rates computations now avoid counter value resets (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-218&quot;&gt;HWKMETRICS-218&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Counter rates are now aligned with the actual counter data used to calculate the rate (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-284&quot;&gt;HWKMETRICS-284&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Aggregate Metric Statistics&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added support  for aggregate statistics based on multiple metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gauges, counters, and counter rates are supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two methods of aggregation are currently available&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;uniform&lt;/strong&gt;: data from multiple metrics is bucketed as originating from a single source and then statistics are computed on the entire set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;stacked&lt;/strong&gt;: statistics are first computed for every matching metric and then those statistics are stacked (added)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by default uniform statistics are enabled, stacking is enabled by &lt;code&gt;stacked=true&lt;/code&gt; query parameter&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The end-points are  &lt;code&gt;/gauges/data&lt;/code&gt; , &lt;code&gt;/counters/data&lt;/code&gt;, &lt;code&gt;/counters/data/rate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is support to query by either tags or metrics ids; but not both&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relevant JIRAs: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-292&quot;&gt;HWKMETRICS-292&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-263&quot;&gt;HWKMETRICS-263&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-264&quot;&gt;HWKMETRICS-264&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data storage updates&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Schema changes will require rebuilding the database&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced data storage footprint by limiting the size of  metric type (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-301&quot;&gt;HWKMETRICS-301&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Container support&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Secure connections are enabled between Hawkular Metrics and the Heapster sink (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-217&quot;&gt;HWKMETRICS-217&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cqlsh can be access directly from within the Cassandra docker (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-260&quot;&gt;HWKMETRICS-260&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Various updates to the Heapster sink to support latest Hawkular Metrics features: &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-285&quot;&gt;HWKMETRICS-285&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-273&quot;&gt;HWKMETRICS-273&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-276&quot;&gt;HWKMETRICS-276&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-292&quot;&gt;HWKMETRICS-292&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.8.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.8.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328157&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12328157&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, Jirka Kremser, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Titan Graph DB Performance Tips</title>
      <link>http://www.hawkular.org/blog/2015/10/09/graph-db-performance.html</link>
      <author>noreply@hawkular.org (Lukas Krejci)</author>
      <pubDate>Fri, 9 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/10/09/graph-db-performance.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Hawkular Inventory, we use the Tinkerpop API (version 2 for the time being)
to store our inventory model in a graph database. We chose Titan as the storage
engine configured to store the data in the Cassandra cluster that is also
backing Hawkular Metrics and Alerts. This blog post will guide you through some
performance-related lessons with Titan that we learned so far.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inventory is under heavy development with a lot of redesign and refactoring
going on between releases so we took quite a naive approach to storing and
querying data from the graph database. That is, we store entities from our
model as vertices in the graph and the relationships between the entities as
edges in the graph. Quite simple and a school book example of how it should
look like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We did declare a couple of indices in the database on the read-only aspects
of the vertices (i.e. a &quot;type&quot; of the entity the vertex corresponds to) but we
actually didn&amp;#8217;t pay too much attention to the performance. We wanted to have
the model right first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fast forward a couple of months and of course, the performance started to be
a real problem. The Hawkular agent for Wildfly is inserting a non-trivial
amount of entities and not only inserting them but also querying them has seen
a huge performance degradation compared to the simple examples we were unit
testing with (due to number of vertices and edges stored).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The time has come to think about how to squeeze some performance out of Titan
as well as how to store the data and query it more intelligently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what we did, you ask, to gain an order of mangnitude speed up?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 2 aspects that needed our attention actually - insert performance,
and query performance, which is where we are an order of magnitude faster now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will focus only on the query performance in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a model example, let&amp;#8217;s consider the following query: find me all resources
in a certain feed that have a certain resource type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For illustration purposes, this will be a fabricated graph that we will be
querying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-10-09-inv-structure.png&quot; alt=&quot;Example Inventory&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/tinkerpop/gremlin/wiki&quot;&gt;Gremlin&lt;/a&gt; query language, our
example query would be expressed without any optimizations, that we will going
to describe later in the post, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;g.V() &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
  .has(&quot;name&quot;, &quot;Red Hat, Inc.&quot;)
  .has(&quot;type&quot;, &quot;tenant&quot;) &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
  .out(&quot;contains&quot;) &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
  .has(&quot;name&quot;, &quot;staging&quot;)
  .has(&quot;type&quot;, &quot;environment&quot;) &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
  .out(&quot;contains&quot;) &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
  .has(&quot;name&quot;, &quot;test.redhat.com&quot;)
  .has(&quot;type&quot;, &quot;feed&quot;) &lt;b class=&quot;conum&quot;&gt;(6)&lt;/b&gt;
  .out(&quot;contains&quot;) &lt;b class=&quot;conum&quot;&gt;(7)&lt;/b&gt;
  .has(&quot;type&quot;, &quot;resource&quot;) &lt;b class=&quot;conum&quot;&gt;(8)&lt;/b&gt;
  .as(&quot;result&quot;) &lt;b class=&quot;conum&quot;&gt;(9)&lt;/b&gt;
    .in(&quot;defines&quot;) &lt;b class=&quot;conum&quot;&gt;(10)&lt;/b&gt;
    .has(&quot;type&quot;, &quot;resourceType&quot;)
    .has(&quot;name&quot;, &quot;JBoss EAP&quot;) &lt;b class=&quot;conum&quot;&gt;(11)&lt;/b&gt;
  .back(&quot;result&quot;); &lt;b class=&quot;conum&quot;&gt;(12)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For all vertices in the graph&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose those that have the type &quot;tenant&quot; called &quot;Red Hat, Inc.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go out from them following the &quot;contains&quot; edges, to the target vertices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;choose those that have the type &quot;environment&quot; and name &quot;staging&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;out, following &quot;contains&quot; edges&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;choose vertices with type &quot;feed&quot; and name &quot;test.redhat.com&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;out, following &quot;contains&quot; edges&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;choose vertices with type &quot;resource&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mark the position in the traversal as a &quot;result&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;follow &quot;defines&quot; edges that point to the &quot;result&quot; vertices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;choose all the source vertices of the edges that have type &quot;Resource Type&quot;
and name &quot;JBoss EAP&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if the above yields a vertex, go back to the &quot;result&quot; and use that instead&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So out of that pipeline, as they call it, out come the vertices representing
resources with the desired resource type that live under given feed. E.g. in
the example above, the query will return &lt;code&gt;eap1-test.redhat.com&lt;/code&gt; and
&lt;code&gt;eap2-test.redhat.com&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what&amp;#8217;s wrong with that you ask?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_performance_tips&quot;&gt;Performance Tips&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_reduce_number_of_hops&quot;&gt;1.1. Reduce number of Hops&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the graph visualization you can notice that there is a &lt;code&gt;contains&lt;/code&gt; edge
between a number of vertices. Semantically, in Hawkular Inventory vertices
connected by these edges form a tree and thus each of the vertices can be
uniquely identified by its path along the &lt;code&gt;contains&lt;/code&gt; edges. We call this
path a canonical path and we use this path in a number of ways in the API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, this path is stored on each vertex (and indexed by a unique
index to ensure consistency of the data). Having the path stored on each
vertex and having an index on it enables us to be &quot;clever&quot; with the query
and rewrite the parts that follow the &lt;code&gt;contains&lt;/code&gt; chain from the Tenant
vertices down by a simple lookup of the canonical path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As such, the original query would be transformed into:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;g.V()
  .has(&quot;path&quot;, &quot;Red Hat, Inc./staging/test.redhat.com&quot;)
  .out(&quot;contains&quot;)
  .has(&quot;type&quot;, &quot;resource&quot;)
  .as(&quot;result&quot;)
    .in(&quot;defines&quot;)
    .has(&quot;type&quot;, &quot;resourceType&quot;)
    .has(&quot;name&quot;, &quot;JBoss EAP&quot;)
  .back(&quot;result&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a lot faster than the original, because we use an index to find our
starting point much &quot;deeper&quot; in the graph than previously and have to make
less hops to get to our results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_avoid_code_as_back_code_if_possible&quot;&gt;1.2. Avoid &lt;code&gt;.as()&amp;#8230;&amp;#8203;back()&lt;/code&gt; If Possible&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not shown in the example but we found that we used the &lt;code&gt;.as()&amp;#8230;&amp;#8203;back()&lt;/code&gt;
construct in more places than necessary. Avoiding it speeds the execution up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mirror_properties_on_the_edges&quot;&gt;1.3. Mirror Properties on The Edges&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the single most important optimization we&amp;#8217;ve done so far. The rationale
is this. To jump from a vertex to another vertex over an edge is a fairly
expensive operation. Titan uses the adjacency lists to store the vertices and
their edges in wide rows in Cassandra. It uses another adjacency list for edges
and their target vertices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So to go from vertex to vertex, Titan actually has to do 2 queries. It would
be much easier if we could avoid that at least in some cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution here is to copy the values of some (frequently used and, in our
case, immutable) properties from the &quot;source&quot; and &quot;target&quot; vertices directly
to the edges. This helps especially in the cases where you do some kind of
filtering on the target vertices that you instead can do directly on the edges.
If there is a high number of edges to go through, this helps tremendously
because you greatly reduce the number of times you have to do the &quot;second hop&quot;
to the target vertex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So this is the final version of the query that is an order of magnitude faster
than the original:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;g.V()
  .has(&quot;path&quot;, &quot;Red Hat, Inc./staging/test.redhat.com&quot;)
  .outE(&quot;contains&quot;) &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
  .has(&quot;targetType&quot;, &quot;resource&quot;) &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
  .inV() &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
  .as(&quot;result&quot;)
    .inE(&quot;defines&quot;) &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
    .has(&quot;sourceType&quot;, &quot;resourceType&quot;)
    .has(&quot;sourceName&quot;, &quot;JBoss EAP&quot;)
  .back(&quot;result&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.out(label)&lt;/code&gt; goes to the target vertex, while &lt;code&gt;.outE(label)&lt;/code&gt; goes only to
the edge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;re now on the edge and are filtering on its properties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we&amp;#8217;re jumping on the target vertex&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again, only jumping on the edge and filtering only on its properties.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While I am sure there are still some optimizations left that we could do to
make this even faster, I am quite satisfied with the speed up we were able to
achieve just by these changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular-BTM 0.4.0 released</title>
      <link>http://www.hawkular.org/blog/2015/10/06/hawkular-btm-0-4-0-released.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Tue, 6 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/10/06/hawkular-btm-0-4-0-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.4.0.Final of the Hawkular Business Transaction Management project. The main focus for this release has been starting work on the server side capabilities and the introduction of an initial UI. A demo of the new functionality can be found &lt;a href=&quot;https://youtu.be/vCIgC3QuJTI&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-10-06-btm-kibana.png&quot; alt=&quot;Kibana dashboard&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Kibana dashboard showing response time information&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_highlights_of_this_release&quot;&gt;Highlights of this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deriving Response Time metrics from the Business Transaction Fragments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storing the Business Transaction Fragments, and derived Response Time metrics, in Elasticsearch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating of an initial UI based around Kibana to display the Response Time metric information&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download the release from &lt;a href=&quot;https://github.com/hawkular/hawkular-btm/releases/tag/0.4.0.Final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The detailed release notes can be found &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12316120&amp;amp;version=12328248&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feature requests and bugs should be reported in our project &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics - 2k Commits</title>
      <link>http://www.hawkular.org/blog/2015/10/05/hawkular-metrics-2k-commits.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Mon, 5 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/10/05/hawkular-metrics-2k-commits.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular Metrics project reached a nice milestone last week. On Tuesday a pull-request merge commit marked the &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/commit/1e04c5219b4eee6da0eab2714e7196a3dc45f0e1&quot;&gt;2000th&lt;/a&gt; commit on the master branch of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are few other interesting data points about the project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;over 25k lines of code (~87% Java)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/commits/master&quot;&gt;over 2k commits&lt;/a&gt;, &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/pulls?q=is%3Aall&quot;&gt;over 385 pull requests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases&quot;&gt;17 releases&lt;/a&gt; (with a monthly release cadence)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/commit/d725243544e1d692610cf56b7fe0ffdaff3487f8&quot;&gt;19 months since first repository commit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics&quot;&gt;24 contributors, 35 forks, and 54 stars in Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those not familiar with &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/blob/master/README.adoc&quot;&gt;Hawkular Metrics&lt;/a&gt;, the project is a high performance storage engine for large volume metric data. The project uses Cassandra as a storage engine because of its flexible data model well suited for time-series data storage and linear scalability with no single point of failure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Metrics offers powerful querying, aggregation, and tagging features for gauge, availability, and counter metrics. The data storage was designed with multi-tenancy as a core feature, which is supported out-of-box. The main public API for the project is a clean REST interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/commits/1e04c5219b4eee6da0eab2714e7196a3dc45f0e1&quot;&gt;first 2000 commits&lt;/a&gt; are just the beginning of great things to come in a relatively young project. There are plans to add additional metric types and more complex statistical and querying capabilities. Ingestion data aggregation, cross metric down-sampling, and rich tagging queries over tag data are just a few of the features we have planned. So far we have been very careful introducing features in order to keep a API clean and deliver robust software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We welcome all contributions and input. If you or your organization is looking for a metric storage engine, we would love to talk with you. We want to learn about your use case, how you approach metric storage, and if there features are missing in Hawkular Metrics for your particular application.  A good resource for future plans as well as past releases is the &lt;a href=&quot;https://issues.jboss.org/projects/HWKMETRICS?selectedItem=com.atlassian.jira.jira-projects-plugin:release-page&amp;amp;status=all&quot;&gt;Hawkular Metrics JIRA&lt;/a&gt;. Feel free to contact us overy irc (#hawkular on freenode), &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/hawkular-dev&quot;&gt;mailing list&lt;/a&gt;, or email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a closing, I want to send a big “Thank You” to the &lt;a href=&quot;http://www.hawkular.org/&quot;&gt;Hawkular organization&lt;/a&gt; for hosting the project and to all the project committers for their outstanding contributions:  &lt;a href=&quot;https://github.com/tsegismont&quot;&gt;Thomas Segismont&lt;/a&gt;, &lt;a href=&quot;https://github.com/stefannegrea&quot;&gt;Stefan Negrea&lt;/a&gt;, &lt;a href=&quot;https://github.com/jsanda&quot;&gt;John Sanda&lt;/a&gt;, &lt;a href=&quot;https://github.com/mtho11&quot;&gt;Mike Thompson&lt;/a&gt;, &lt;a href=&quot;https://github.com/pilhuhn&quot;&gt;Heiko Rupp&lt;/a&gt;, &lt;a href=&quot;https://github.com/burmanm&quot;&gt;Micheal Burman&lt;/a&gt;, &lt;a href=&quot;https://github.com/mwringe&quot;&gt;Matt Wringe&lt;/a&gt;, &lt;a href=&quot;https://github.com/ppalaga&quot;&gt;Peter Palaga&lt;/a&gt;, &lt;a href=&quot;https://github.com/jkandasa&quot;&gt;Jeeva Kandasamy&lt;/a&gt;, &lt;a href=&quot;https://github.com/heiko-braun&quot;&gt;Heiko Braun&lt;/a&gt;, &lt;a href=&quot;https://github.com/Jiri-Kremser&quot;&gt;Jirka Kremser&lt;/a&gt;, &lt;a href=&quot;https://github.com/vnugent&quot;&gt;Viet Nguyen&lt;/a&gt;, &lt;a href=&quot;https://github.com/jimmidyson&quot;&gt;Jimmi Dyson&lt;/a&gt;, &lt;a href=&quot;https://github.com/aslakknutsen&quot;&gt;Aslak Knutsen&lt;/a&gt;, &lt;a href=&quot;https://github.com/jpkrohling&quot;&gt;Juraci Paixão Kröhling&lt;/a&gt;, &lt;a href=&quot;https://github.com/theute&quot;&gt;Thomas Heute&lt;/a&gt;, &lt;a href=&quot;https://github.com/jshaughn&quot;&gt;Jay Shaughnessy&lt;/a&gt;, &lt;a href=&quot;https://github.com/metlos&quot;&gt;Lukas Krejci&lt;/a&gt;, &lt;a href=&quot;https://github.com/jstrachan&quot;&gt;James Strachan&lt;/a&gt;, &lt;a href=&quot;https://github.com/gkhachik&quot;&gt;Garik Khachikyan&lt;/a&gt;, &lt;a href=&quot;https://github.com/spadgett&quot;&gt;Sam Padgett&lt;/a&gt;, &lt;a href=&quot;https://github.com/vrockai&quot;&gt;Villiam Rockai&lt;/a&gt;, &lt;a href=&quot;https://github.com/jmazzitelli&quot;&gt;John Mazzitelli&lt;/a&gt;, &lt;a href=&quot;https://github.com/ammendonca&quot;&gt;Alexandre Mendonça&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To 4000 commits in half the time!&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.7.0 - Release</title>
      <link>http://www.hawkular.org/blog/2015/09/30/hawkular-metrics-0.7.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/09/30/hawkular-metrics-0.7.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.7.0 of Hawkular Metrics. This release is anchored by major enhancements to counter metrics, updated tag support, and many performance and stability enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cassandra Upgrade&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cassandra version 2.2.x is now required for data storage&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Updated support for counter metrics&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Counter raw data and rate data now support buckets similar to the way gauge data does (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-280&quot;&gt;HWKMETRICS-280&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-283&quot;&gt;HWKMETRICS-283&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The same query parameters as gauge metrics are supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tagging functionality (add, delete, update) is now identical to availability and gauge metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Revamped tag functionality&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tag support has been updated to have identical functionality across all metric types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tagging data points is no longer supported; however, this functionality may resurface when requirements are better understood and there is a real use case around it (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-247&quot;&gt;HWKMETRICS-247&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved metric tag storage and querying; metric tags are no longer stored in the data table (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-254&quot;&gt;HWKMETRICS-254&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data storage updates&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Schema changes will require rebuilding database&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interval column has been removed from all tables (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-3&quot;&gt;HWKMETRICS-3&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop the warning message in Cassandra log about batch statement size threshold being exceeded (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-252&quot;&gt;HWKMETRICS-252&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System-wide data retention default setting is now configurable via system property (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-251&quot;&gt;HWKMETRICS-251&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data retention can be set during tenant creation (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-127&quot;&gt;HWKMETRICS-127&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Influx endpoint&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;time_precision parameter is now supported (Hawkular Metrics does not support microseconds precision though)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;integer &quot;overflow&quot; fixes; long integers are now used where needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;time range restrictions support values without unit (i.e. &apos;time &amp;gt; 1010101010&apos;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PTrans&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;logback replaces log4j as logging backend&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REST API documentation&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved documentation (no more broken links, more details on parameters and data types)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-metrics.html&quot; class=&quot;bare&quot;&gt;http://www.hawkular.org/docs/rest/rest-metrics.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.7.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.7.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327874/&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327874/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, Jirka Kremser, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The fifth milestone of Hawkular released</title>
      <link>http://www.hawkular.org/blog/2015/09/23/hawkular-1.0.0.Alpha5-released.html</link>
      <author>noreply@hawkular.org (Heiko W.Rupp)</author>
      <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/09/23/hawkular-1.0.0.Alpha5-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular, the monitoring platform, is happy to announce the release of its fourth milestone 1.0.0.Alpha5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_improvements_in_wildfly_handling&quot;&gt;Improvements in WildFly handling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Along with other improvments and bug fixes, this release has again circled around improved support for WildFly kind
of servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploy_to_wildfly_servers&quot;&gt;Deploy to WildFly servers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to upload deployments to managed WildFly servers&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the deployments subtab, there is now a button that triggers a wizard to upload a deployment to a managed server:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-server-add-deployment&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-09-23-add-deployment-step.png&quot; alt=&quot;Deployment step&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Wizard step to add a deployment&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_creation_of_jdbc_driver_modules&quot;&gt;Creation of JDBC driver modules&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also a new dialog to add a JDBC driver to a managed WildFly server&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-add-jdbc-driver&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-09-23-add-driver.png&quot; alt=&quot;Add JDBC-Driver button&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Add JDBC-Driver button&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jdr_report&quot;&gt;JDR Report&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And last but not least it is possible to obtain a so called &apos;JBoss Diagnostic Report&apos; from a managed server, which
can then be sent to Red Hat support when a case has been opened. You will find a button at the end of the WildFly
server pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full list of Jira issues fixed in this release:
&lt;a href=&quot;/releasenotes/1.0.0.Alpha5.html&quot;&gt;Release Notes - Hawkular - Version 1.0.0.Alpha5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Join us on
&lt;a href=&quot;https://plus.google.com/events/crndlsuatqmk52ac9el8dbnueao&quot; class=&quot;bare&quot;&gt;https://plus.google.com/events/crndlsuatqmk52ac9el8dbnueao&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha5/hawkular-dist-1.0.0.Alpha5.zip&quot;&gt;Hawkular 1.0.0.Alpha5 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha5/hawkular-dist-1.0.0.Alpha5.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha5(tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next Alpha is planned for October 21st, and we are looking forward to work on the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Central alert center&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve handling of JDBC drivers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creation of data sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easier installation of the WildFly agent&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring Rails App using Hawkular Metrics</title>
      <link>http://www.hawkular.org/blog/2015/09/03/monitoring-rails-using-hawkular-metrics.html</link>
      <author>noreply@hawkular.org (Libor Zoubek)</author>
      <pubDate>Thu, 3 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/09/03/monitoring-rails-using-hawkular-metrics.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I am going to show a way to monitor Rails application performance using Hawkular Metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_setting_up_hawkular_metrics&quot;&gt;Setting up Hawkular Metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several ways of setting up Hawkular Metrics standalone server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build &amp;amp; deploy&lt;/strong&gt; - follow &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics&quot;&gt;Hawkular Metrics Readme&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker image&lt;/strong&gt; - start &lt;a href=&quot;https://hub.docker.com/r/hawkular/hawkular-metrics/&quot;&gt;Hawkular Metrics Docker Image&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Public instance&lt;/strong&gt; - use &lt;a href=&quot;http://livingontheedge.hawkular.org/hawklar/metrics&quot; class=&quot;bare&quot;&gt;http://livingontheedge.hawkular.org/hawklar/metrics&lt;/a&gt; which runs full Hawkular including Metrics. But be sure your data will get lost at some point as this instance gets rebuilt/cleaned up from time to time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_ruby_client&quot;&gt;Hawkular Ruby Client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently we started to work on a &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot;&gt;hawkular-client&lt;/a&gt; in Ruby. So far we have implemented APIs for Hawkular Metrics. In this post we&amp;#8217;ll use the client to push metric data, but it can also retrieve data for further analysis or reports, for more see &lt;a href=&quot;http://www.hawkular.org/hawkular-client-ruby/Hawkular/Metrics/Client.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_monitoring_rails_application&quot;&gt;Monitoring Rails Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several ways to monitor your Rails application&amp;#8217;s performance. The way being shown here is pretty easy to implement, but requires modifications in Rails application. It takes advantage of &lt;code&gt;around_filter&lt;/code&gt; of main ApplicationController. Within this filter we&amp;#8217;re going to measure each controller&amp;#8217;s response time to handle request.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rails_demo_application&quot;&gt;Rails Demo Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve created simple Rails4 application called &lt;a href=&quot;https://github.com/lzoubek/rails-demo&quot;&gt;rails-demo&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I added the dependency on &lt;a href=&quot;https://rubygems.org/gems/hawkular-client&quot;&gt;hawkular-client&lt;/a&gt; gem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/lzoubek/rails-demo/blob/master/app/controllers/application_controller.rb&quot;&gt;Application controller&lt;/a&gt; code is pretty easy&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &quot;hawkularclient&quot;

class ApplicationController &amp;lt; ActionController::Base

  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception


  class MetricsReporter

    def initialize
      tenant_id = &quot;hawkular.org&quot;
      # create hawkular metrics client &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
      @client = Hawkular::Metrics::Client::new(&quot;http://localhost:8080/hawkular/metrics&quot;,&quot;&quot;,&quot;&quot;,{:tenant =&amp;gt; tenant_id})
      # create tenant in case it does not exist
      if @client.tenants.query.select { |tenant|  tenant.id == tenant_id}.empty?
      	@client.tenants.create(tenant_id)
      end
    end

    def around(controller, &amp;amp;block)
      # measure measure measure
      now = Time.now
      block.call
      time_spent = Time.now - now
      # metric ID must be unique within tenant &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
      gauge = &quot;App.#{controller.class.name}:#{controller.params[:action]}&quot;
      # make sure metric definition is created &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
      @client.gauges.create({:id =&amp;gt; gauge, :tags =&amp;gt; {:app =&amp;gt; &quot;App&quot;}}) rescue
      # report time in milliseconds
      @client.gauges.push_data(gauge ,{:value =&amp;gt; time_spent * 1000})
    end

  end

  # enable filter
  around_filter MetricsReporter::new

end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We create Hawkular Metrics &lt;strong&gt;@client&lt;/strong&gt;. Point it to your instance URL, leave user/pass empty (as this has not been implemented yet) and set &lt;strong&gt;tenant&lt;/strong&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We encode our application Name, controller name and controller action into metric ID. So we have different metrics for listing objects and ie. editing an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to create metric definition with our tags, so we&amp;#8217;re able to find all metrics related to rails-demo app later. This line is not required in case you don&amp;#8217;t want to assign tags to your metric definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start Rails dev environment&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install rails
git clone https://github.com/lzoubek/rails-demo.git
cd rails-demo
bundler install
bin/rake db:migrate RAILS_ENV=development
rails server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By now, WEBrick should be listening on localhost, open &lt;a href=&quot;http://localhost:3000/products&quot; class=&quot;bare&quot;&gt;http://localhost:3000/products&lt;/a&gt; and in case there is no error displayed congratulations, we are monitoring &lt;strong&gt;rails-demo&lt;/strong&gt;! Let&amp;#8217;s start hitting the UI with some more requests using helper bash script located in &lt;code&gt;rails-demo&lt;/code&gt; repository&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./hit.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this time we are simulating traffic on &lt;strong&gt;rails-demo&lt;/strong&gt; application and pushing controller&amp;#8217;s response times to Hawkular Metrics service.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_results&quot;&gt;The Results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently Hawkular Metrics (standalone) has no UI. But there is a bunch of useful angular components like &lt;a href=&quot;https://github.com/hawkular/hawkular-charts&quot;&gt;hawkular-charts&lt;/a&gt;, so I wrote simple UI which can at least find metric definitions by tags and draw metric data into line chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To watch metric data from rails-demo application open &lt;a href=&quot;http://lzoubek.github.io/hawkular-metrics-ui-demo&quot;&gt;Hawkular Metrics UI Demo&lt;/a&gt;, fill in &lt;strong&gt;Metrics API URL&lt;/strong&gt; (must be reachable from browser), &lt;strong&gt;Tenant ID&lt;/strong&gt; and tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;rails-controller-response-times&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/hawkular-metrics-demo-ui.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/hawkular-metrics-demo-ui.png&quot; alt=&quot;Rails Controller response times&quot; width=&quot;800&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you may have already noticed, Hawkular Metrics server perfomance can have negative impact on rails-demo application performance because we synchronously push the data within around_filter code.  Even the fact, that rails application must be modified in order to be monitored might not be a good thing. In the next blog post I&amp;#8217;ll write a simple service that is going to parse rails log files and report  data to Hawkular Metrics. In fact, it would be awesome to reuse &lt;a href=&quot;https://github.com/scoutapp/scout-plugins&quot;&gt;scout plugins&lt;/a&gt; and forward their reports into Hawkular Metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having metrics is only one piece in puzzle. Integration with &lt;a href=&quot;/docs/components/alerts/index.html&quot;&gt;Hawkular Alerts&lt;/a&gt; will let you detect performance regressions or unexpected loads.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.6.0 - Release</title>
      <link>http://www.hawkular.org/blog/2015/08/29/hawkular-metrics-0.6.0.Final-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/08/29/hawkular-metrics-0.6.0.Final-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.6.0 of Hawkular Metrics. The release is anchored by enhancements for counter metrics, updates to the container infrastructure, and overall performance and stability enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_major_changes&quot;&gt;Major Changes:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Querying&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Metrics can now be searched with regexp filtering capabilities on tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics queries now support logical AND for tags&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Internal&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TenantId and type were moved to the MetricId instead of Metric class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implicit tenants (not manaully created prior to sending first set of metric data) are now created on metrics insertion&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated to the latest Heapster version (0.17)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The communication between the Hawkular Metrics and Cassandra containers have now been secured. This means that only Hawkular Metrics can communicate with its Cassandra containers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Counters&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Per-minute rates can be retrieved via the /hawkular/metrics/counters/{id}/rate endpoint.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Task scheduling&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The scheduler API and schema has undergone several changes. It is now possible to group related tasks so that order of execution can be controlled when there are interdependencies. There is still ongoing work to support asynchronous job execution and to provide fault tolerance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ruby Client&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The project has now an official Ruby client, this joins the existing Go and Python clients.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_clients&quot;&gt;Hawkular Metrics Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Hawkular Metrics&apos; objectives is to &lt;strong&gt;be easy to integrate with&lt;/strong&gt;; providing language specific clients is an important component for fulfilling this objective. Here is the current list of official clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-ruby&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-ruby&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-python&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go: &lt;a href=&quot;https://github.com/hawkular/hawkular-client-go&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-client-go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.6.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.6.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327689/&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327689/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Libor Zoubek, Jirka Kremser, and Heiko Rupp for their project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The fourth milestone of Hawkular released</title>
      <link>http://www.hawkular.org/blog/2015/08/27/hawkular-1.0.0.Alpha4-released.html</link>
      <author>noreply@hawkular.org (Peter Palaga)</author>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/08/27/hawkular-1.0.0.Alpha4-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular, the monitoring platform, is happy to announce the release of its fourth milestone 1.0.0.Alpha4.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_improvements_in_alerts_definitions&quot;&gt;Improvements in Alerts definitions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alerts are there to inform the user about an occurrence of a problem in some of the monitored resources. The present
release adds some new configuration dialogs and improves the existing ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are new configuration options to setup Alerts based on JVM Heap Usage and Garbage Collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-jvm-heap-usage-alerts&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-08-27-jvm-heap-usage-alerts.png&quot; alt=&quot;JVM Alert Settings for Heap Usage&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. JVM Alert Settings for Heap Usage&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a new dialog to configure Alerts for Datasources.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-ds-alerts&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-08-27-ds-alerts.png&quot; alt=&quot;JVM Alert Settings for Datasources&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. JVM Alert Settings for Datasources&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And there are new Specialized dialogs to configure Alerts for URLs&apos; Availability and Response Time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-url-avail-alerts&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-08-27-url-avail-alerts.png&quot; alt=&quot;JVM Alert Settings for URLs&apos; Availability&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Settings for URLs&apos; Availability&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_red_hat_access_portal_integration&quot;&gt;Red Hat Access Portal Integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We added an integration with the &lt;a href=&quot;https://access.redhat.com/&quot;&gt;Red Hat Access Portal&lt;/a&gt; to Hawkular.
Users with valid Access Portal credentials are now able to browse the Knowledge Base, view and create Support Cases
using the Hawkular user interface. On the future releases, we plan to improve this integration by adding more features.
If that sounds interesting to you, we are looking forward for your feedback on #hawkular channel on
&lt;a href=&quot;https://freenode.net/&quot;&gt;Freenode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-rh-access&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/2015-08-27-rh-access.png&quot; alt=&quot;Open a ticket on Red Hat Access portal using the Hawkular UI&quot; width=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Open a ticket on Red Hat Access portal using the Hawkular UI&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_backend&quot;&gt;Backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While these changes in backend are not used by the UI yet, they present an important step towards a new UI functionality
in future releases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Inventory now provides an API for configuration of resources and Hawkular Agent is using this API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Bus and Agent now support the execution of operations on any resource
&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-483&quot;&gt;HAWKULAR-483&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Bus offers a new infrastructure to stream large data from UI to monitored Application Servers.
This is especially important for another feature that was added in the backend, namely the support for deploying
applications on monitored Application Servers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_other_minor_tweaks_and_fixes&quot;&gt;Other minor tweaks and fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-488&quot;&gt;HAWKULAR-488&lt;/a&gt; - Display IP Address for Application Servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-254&quot;&gt;HAWKULAR-254&lt;/a&gt; - Blank screen on Windows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-336&quot;&gt;HAWKULAR-336&lt;/a&gt; - Inconsistent time information on URL details page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-406&quot;&gt;HAWKULAR-406&lt;/a&gt; - Same data for 2 different Wfly servers shown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-494&quot;&gt;HAWKULAR-494&lt;/a&gt; - Datasources not unique per server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-497&quot;&gt;HAWKULAR-497&lt;/a&gt; - Resources in inventory are lost at restart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-521&quot;&gt;HAWKULAR-521&lt;/a&gt; - &quot;http://livingontheedge.hawkular.org&quot; isn&amp;#8217;t using the hawkular favicon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-526&quot;&gt;HAWKULAR-526&lt;/a&gt; - Downtime duration alert settings don&amp;#8217;t persist after save.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-536&quot;&gt;HAWKULAR-536&lt;/a&gt; - License Check of imported node_modules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-553&quot;&gt;HAWKULAR-553&lt;/a&gt; - Url input is not validated (enough)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR-579&quot;&gt;HAWKULAR-579&lt;/a&gt; - &quot;Alert Settings&quot; link on URL details &amp;gt; All Alerts does notthing when clicked&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full list of Jira issues fixed in this release:
&lt;a href=&quot;/releasenotes/1.0.0.Alpha4.html&quot;&gt;Release Notes - Hawkular - Version 1.0.0.Alpha4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_watch_the_demo_online&quot;&gt;Watch the demo online&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/nekjPRwf50U?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha4/hawkular-dist-1.0.0.Alpha4.zip&quot;&gt;Hawkular 1.0.0.Alpha4 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha4/hawkular-dist-1.0.0.Alpha4.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha4
(tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next Alpha is planned for September 25th, and we are looking forward to work on the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deployment of new applications into managed servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definition of jdbc drivers and data sources&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Introduction to AutoResolve triggers</title>
      <link>http://www.hawkular.org/blog/2015/08/25/hawkular-alerts-autoresolve.html</link>
      <author>noreply@hawkular.org (Lucas Ponce)</author>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/08/25/hawkular-alerts-autoresolve.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts provide a simple Alert life-cycle management and an automated Alert resolution as core features.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_alert_lifecycle&quot;&gt;Alert Lifecycle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Triggers are defined to detect problems. When a problem happens a new alert is generated by the engine
with the information about the data that matched the defined conditions. Also an Alert provides a simple lifecycle to
indicate the status of the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new Alert starts with &lt;strong&gt;OPEN&lt;/strong&gt; status, optionally moves to &lt;strong&gt;ACKNOWLEDGED&lt;/strong&gt; to indicate the alert has been seen and the
issue is being resolved, and is finally set to &lt;strong&gt;RESOLVED&lt;/strong&gt; to indicate that the problem has been fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alert lifecycle can be handled manually or can be managed automatically by the AutoResolve tooling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_autoresolve_triggers&quot;&gt;AutoResolve triggers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A trigger has one or multiple conditions that are set to detect a problem. When incoming data matches the
condition expresions an alert is fired to inform about this new issue. In this context, if the engine is still
receiving data, new alerts will be generated even if it refers to the &lt;strong&gt;same&lt;/strong&gt; problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The detection of multiple alerts belonging to the &lt;strong&gt;same&lt;/strong&gt; problem can be controlled with fine granularity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts allow to define that once a problem triggered an alert, the trigger is not going to evaluate more data
until the issue is resolved to avoid repeated alerts for the same issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Resolution of a problem can be done manually or automatically using &lt;strong&gt;AUTORESOLVE&lt;/strong&gt; triggers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A trigger defines conditions that are responsible to detect a problem. These conditions are called &lt;strong&gt;FIRING&lt;/strong&gt; conditions
in Hawkular Alerts. Optionally, a trigger can define conditions that are responsible to detect when the problem is
gone. These new ones are called &lt;strong&gt;AUTORESOLVE&lt;/strong&gt; conditions. So, in the engine a trigger will be in &lt;strong&gt;FIRING&lt;/strong&gt; mode when it
is evaluating data to detect a problem while it will be a in &lt;strong&gt;AUTORESOLVE&lt;/strong&gt; mode when it is evaluating data to detect that
the problem is no longer present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These combination of &lt;strong&gt;FIRING&lt;/strong&gt; and &lt;strong&gt;AUTORESOLVE&lt;/strong&gt; conditions ensures that only &lt;strong&gt;one alert&lt;/strong&gt; is generated for a problem
and when the problem is resolved the trigger automatically returns to firing mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_example_of_alerting_on_process_availability&quot;&gt;Example of alerting on process availability&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s define a simple example to show how AutoResolve triggers work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/lucasponce/hawkular-examples/blob/master/extended-tests/process-autoresolve/create-definition-check-process.sh&quot;&gt;create-definition-check-process.sh&lt;/a&gt; bash script
we have defined an AutoResolve trigger activating flags &lt;strong&gt;autoResolve&lt;/strong&gt; and &lt;strong&gt;autoResolveAlerts&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This fragment shows how to mark a trigger as AutoResolve:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
 &quot;id&quot;: &quot;check-firefox-process&quot;,
 &quot;name&quot;: &quot;Firefox process&quot;,
 &quot;description&quot;: &quot;Check availability firefox process&quot;,
 &quot;actions&quot;: {
   &quot;email&quot;: [&quot;my-group-to-notify&quot;]
 },
 &quot;firingMatch&quot;: &quot;ALL&quot;,
 &quot;autoResolveMatch&quot;: &quot;ALL&quot;,
 &quot;enabled&quot;: true,
 &quot;autoDisable&quot;: false,
 &quot;autoEnable&quot;: false,
 &quot;autoResolve&quot;: true, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
 &quot;autoResolveAlerts&quot;: true, &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
 &quot;severity&quot;: &quot;HIGH&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;autoResolve&lt;/strong&gt; flag set to &lt;strong&gt;true&lt;/strong&gt; indicates that the trigger will activate &lt;strong&gt;FIRING&lt;/strong&gt; and &lt;strong&gt;AUTORESOLVE&lt;/strong&gt; modes. Flag set
to &lt;strong&gt;false&lt;/strong&gt; will run the trigger only in &lt;strong&gt;FIRING&lt;/strong&gt; mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;autoResolveAlerts&lt;/strong&gt; flag set to &lt;strong&gt;true&lt;/strong&gt; will automatically mark all unresolved alerts (for the trigger) as &lt;strong&gt;resolved&lt;/strong&gt;
when &lt;strong&gt;AUTORESOLVE&lt;/strong&gt; trigger detect problem is gone. Flag set to &lt;strong&gt;false&lt;/strong&gt; will not modify the alert lifecycle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the next fragment will show how to declare &lt;strong&gt;FIRING&lt;/strong&gt; and &lt;strong&gt;AUTORESOLVE&lt;/strong&gt; conditions linked with the trigger:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
 &quot;triggerMode&quot;: &quot;FIRING&quot;, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
 &quot;type&quot;: &quot;AVAILABILITY&quot;,
 &quot;dataId&quot;: &quot;firefox-process&quot;,
 &quot;operator&quot;: &quot;NOT_UP&quot;
}

...

{
 &quot;triggerMode&quot;: &quot;AUTORESOLVE&quot;, &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
 &quot;type&quot;: &quot;AVAILABILITY&quot;,
 &quot;dataId&quot;: &quot;firefox-process&quot;,
 &quot;operator&quot;: &quot;UP&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;triggerMode&lt;/strong&gt; indicates in which mode will this condition be executed, &lt;strong&gt;FIRING&lt;/strong&gt; mode is used to detect the
problem we want to alert. In our example, it is an occurence of the Firefox process not being up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AUTORESOLVE&lt;/strong&gt; conditions are executed to detect when the probem is not present.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, in &lt;a href=&quot;https://github.com/lucasponce/hawkular-examples/blob/master/extended-tests/process-autoresolve/send-data-check-process.sh&quot;&gt;send-data-check-process.sh&lt;/a&gt;
bash script we show how we can check and send availability data about process we want to monitor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The format of the payload is shown in the next fragment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
 &quot;availability&quot;: [
    {&quot;id&quot;: &quot;firefox-process&quot;, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
     &quot;type&quot;: &quot;AVAILABILITY&quot;,
     &quot;timestamp&quot;: $timestamp,
     &quot;value&quot;: &quot;$firefox_availability&quot;
     }
 ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This &lt;strong&gt;id&lt;/strong&gt; should match the &lt;strong&gt;dataId&lt;/strong&gt; field defined in the conditions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Examples can be run using &lt;a href=&quot;/blog/2015/08/19/hawkular-alerts-standalone.html&quot;&gt;Hawkular Alerts in Standalone&lt;/a&gt;
deployment used in the previous post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details about Hawkular Alerts features can be found at&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/docs/dev/alerts.html&quot;&gt;Hawkular Alerts Developer Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/docs/rest/rest-alerts.html&quot;&gt;Hawkular Alerts REST API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Using Hawkular Alerts as a standalone engine</title>
      <link>http://www.hawkular.org/blog/2015/08/19/hawkular-alerts-standalone.html</link>
      <author>noreply@hawkular.org (Lucas Ponce)</author>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/08/19/hawkular-alerts-standalone.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts is a component of the Hawkular project. It&amp;#8217;s goal is to provide flexible and scalable alerting services in a easily consumable way. Some of Hawkular Alerts features are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flexible, multi-condition Triggers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Powerful &quot;Dampening&quot; to control your alert firing rate .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple Alert Life-cycle management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automated Trigger disable and enable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automated Alert Resolution by detecting the end of your alerting event.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pluggable Action and Notification capabilities to act on your alerts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete REST API for Definition and Execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional standalone deployment or get added value with Hawkular Metrics or Hawkular.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-platform deployment as a J2EE WAR file on JBoss WildFly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_standalone_deployments&quot;&gt;Standalone deployments&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the possibilities of the deployments is to use Alerts as a standalone component.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this scenario, the engine can run on an Wildfly server and we can interact via Java or REST API to create alerts
definitions or feed data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Details of how to install and configure Hawkular Alerts can be found in the &lt;a href=&quot;http://www.hawkular.org/docs/components/alerts/index.html&quot;&gt;component documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hello_world&quot;&gt;Hello World&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start using Hawkular Alerts with a small example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are going to create an alert definition like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;TRIGGER trigger-for-poc
WHEN
    data-x &amp;lt; 5 AND data-y &amp;gt; 5
HAPPENS
    2 consecutive times
THEN
    EMAIL to:admin-group@hawkular.org,cc:cc-group@hawkular.org&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;from this script &lt;a href=&quot;https://github.com/lucasponce/hawkular-examples/blob/master/create-definitions.sh&quot;&gt;create-definitions.sh&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example, we create a trigger with two conditions that is linked with an email action for alert notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have the definitions created on the engine, next step will be to send data to evaluate the conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this example we are going to use directly the REST API from a bash script &lt;a href=&quot;https://github.com/lucasponce/hawkular-examples/blob/master/send-data.sh&quot;&gt;send-data.sh&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example sends random data to the engine, triggering alerts when two consecutive evaluations of the conditions
happens, then an email notification is sent with the action details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have created a &lt;a href=&quot;https://youtu.be/3i64kO0XEjw&quot;&gt;short demo&lt;/a&gt; showing the whole scenario.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/3i64kO0XEjw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This example is quite simple and its goal is to show the flexibility to use the engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details about Hawkular Alerts features can be found at&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/docs/dev/alerts.html&quot;&gt;Hawkular Alerts Developer Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/docs/rest/rest-alerts.html&quot;&gt;Hawkular Alerts REST API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to try out the latest release for yourself on your own applications. If you have any questions or comments,
 please contact us on &lt;a href=&quot;/community/join.html&quot;&gt;these channels&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have suggestions for features/enhancements, or find any bugs, then please log an issue in the &lt;a href=&quot;https://issues.jboss.org/browse/HWKALERTS&quot;&gt;project jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Visualising Business Transaction Information using Hawkular BTM 0.3.0.Final with RTGov Integration</title>
      <link>http://www.hawkular.org/blog/2015/08/14/hawkular-btm-0.3.0-demo.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/08/14/hawkular-btm-0.3.0-demo.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular Business Transaction Management (BTM) project has released version &lt;a href=&quot;https://github.com/hawkular/hawkular-btm/releases/tag/0.3.0.Final&quot;&gt;0.3.0.Final&lt;/a&gt;. Some of the new features within this release:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extract correlation ids, properties/details and message content from business transaction instances. This enables the generic information captured by instrumenting the underlying technologies to be enhanced with business specific information that can be useful for later analysis and to help correlate different parts of an overall business transaction instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTM to RTGov gateway, to enable the business transaction instance data collected by BTM to be reported and visualised using RTGov (Runtime Governance) tooling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fault path handling for switchyard services.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate the use of Hawkular BTM, to extract business transaction specific data and report the information to RTGov, we have created a &lt;a href=&quot;https://youtu.be/bxeRJAsAu_8&quot;&gt;short screencast&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/bxeRJAsAu_8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to try out the latest release for yourself on your own applications. If you have any questions or comments, please contact us on &lt;a href=&quot;/community/join.html&quot;&gt;these channels&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have suggestions for features/enhancements, or find any bugs, then please log an issue in the &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;project jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular, all good things make three!</title>
      <link>http://www.hawkular.org/blog/2015/07/30/hawkular-1.0.0.Alpha3-released.html</link>
      <author>noreply@hawkular.org (Heiko Rupp)</author>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/07/30/hawkular-1.0.0.Alpha3-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are very happy to release the third version of Hawkular!
As with the previous one, this was the most important release of Hawkular so far.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_app_server_support&quot;&gt;App server support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main focus of this release clearly was the extended monitoring of &lt;a href=&quot;http://www.wildfly.org/&quot;&gt;WildFly&lt;/a&gt; application
servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For the moment you will need to instrument your server manually following
&lt;a href=&quot;http://www.hawkular.org/docs/user/getting-started.html#_install_a_wildfly_monitoring_agent&quot;&gt;these instructions&lt;/a&gt;.
We will make this easier in the future.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deployments in the monitored server can now be enabled/disabled and redeployed. Deployment of new content
will come in the next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-server-deploy-detail&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha3_deploy_actions.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha3_deploy_actions.png&quot; alt=&quot;Hawkular server deployments&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also have a new &lt;em&gt;web&lt;/em&gt;-tab that gives statistics about the web subsystem of the managed WildFly&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-webtab&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha3_web_tab.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha3_web_tab.png&quot; alt=&quot;Wildfly servers web stats&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_more_details_for_urls&quot;&gt;More details for URLs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular now also collects the current IP address and the server information for the URLs being monitored&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-url-detail&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha3_url_traits.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha3_url_traits.png&quot; alt=&quot;URL details&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_notable_changes_in_this_release_were&quot;&gt;Notable changes in this release were:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement more app server details as mentioned above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade underlying versions of Hawkular-Metrics and other subsystems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More alerting capabilities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Head over to the &lt;a href=&quot;/releasenotes/1.0.0.Alpha3.html&quot;&gt;Full release notes&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have again run a demonstration of the new Hawkular features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/otLyoXYlV-s?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We plan to do a lot more Alpha releases with even more features, the next Alpha is planned for August 26th, and
&lt;a href=&quot;/docs/dev/development.html&quot;&gt;you can help us&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you for the contributions!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha3/hawkular-dist-1.0.0.Alpha3.zip&quot;&gt;Hawkular 1.0.0.Alpha3 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha3/hawkular-dist-1.0.0.Alpha3.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha3
(tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the weeks until the next release and demo we want to address the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More details of the application servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uploading of new applications into managed servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More alerting related changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An easiert to grasp resource naming schema&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hopefully definition of jdbc drivers and data sources&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring a Vert.x Application using Hawkular BTM 0.2.0.Final</title>
      <link>http://www.hawkular.org/blog/2015/07/22/hawkular-btm-0.2.0-demo.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/07/22/hawkular-btm-0.2.0-demo.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular Business Transaction Management (BTM) project has released version &lt;a href=&quot;https://github.com/hawkular/hawkular-btm/releases/tag/0.2.0.Final&quot;&gt;0.2.0.Final&lt;/a&gt;. Some of the new features within this release:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;URI inclusion/exclusion support, allowing business transactions to be filtered based on initial URIs of interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Propagate business transaction name, identified based on inclusion URI, through subsequent fragments for the same business transaction instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define instrumentation rules for Vert.x (HTTP and EventBus).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those not familiar with &lt;a href=&quot;https://http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;, it is an event driven, polyglot &quot;tool-kit for building reactive applications on the JVM&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate the use of Hawkular BTM, to monitor business transactions executing on vert.x, we have created a &lt;a href=&quot;https://youtu.be/TtAXiYhqTSk&quot;&gt;short screencast&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/TtAXiYhqTSk?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to try out the latest release for yourself on your own applications. If you have any questions or comments, please contact us on &lt;a href=&quot;/community/join.html&quot;&gt;these channels&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have suggestions for features/enhancements, or find any bugs, then please log an issue in the &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;project jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular, the second release!</title>
      <link>http://www.hawkular.org/blog/2015/07/02/hawkular-1.0.0.Alpha2-released.html</link>
      <author>noreply@hawkular.org (Heiko Rupp)</author>
      <pubDate>Thu, 2 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/07/02/hawkular-1.0.0.Alpha2-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are very happy to release the second version of Hawkular!
As with the previous one, this was the most important release of Hawkular so far.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_app_server_support&quot;&gt;App server support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main focus of this release clearly was the monitoring of &lt;a href=&quot;http://www.wildfly.org/&quot;&gt;WildFly&lt;/a&gt; application servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For the moment you will need to instrument your server manually following
&lt;a href=&quot;http://www.hawkular.org/docs/user/getting-started.html#_install_a_wildfly_monitoring_agent&quot;&gt;these instructions&lt;/a&gt;.
We will make this easier in the future.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;img-serverslist&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha1_serverslist.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha1_serverslist.png&quot; alt=&quot;Hawkular servers list&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now when you click on a server name you can see some of the details like JVM-Info, defined Datasources and a list of
deployments on the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-serversdetail&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha2_appserver_details.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha2_appserver_details.png&quot; alt=&quot;Hawkular servers details&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_notable_changes_in_this_release_were&quot;&gt;Notable changes in this release were:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move the underlying container to WildFly 9.0 CR2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement some app server details as mentioned above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade underlying versions of Hawkular-Metrics and other subsystems&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Head over to the &lt;a href=&quot;/releasenotes/1.0.0.Alpha2.html&quot;&gt;Full release notes&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thomas Heute has run a demonstration of the new Hawkular features, that you can watch here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://www.hawkular.org/https://www.youtube.com/embed/MbGoVh4d6cA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We plan to do a lot more Alpha releases with even more features, the next Alpha is planned for July 29th, and
&lt;a href=&quot;/docs/dev/development.html&quot;&gt;you can help us&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you for the contributions!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the release here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha2/hawkular-dist-1.0.0.Alpha2.zip&quot;&gt;Hawkular 1.0.0.Alpha2 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha2/hawkular-dist-1.0.0.Alpha2.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha2
(tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_next&quot;&gt;What&amp;#8217;s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the weeks until the next release and demo we want to address the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More details of the application servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix issues that are reported around web site pings and existing appserver details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start running operations on the managed servers like redeploying applications&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_android_client&quot;&gt;Android client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you have seen in the demo video, Hawkular has an Android client, that is implemented by GSoC student
Arthur Dryomov. Here is the current version of its metrics screen&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-serversdetail&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha2_android_client.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha2_android_client.png&quot; alt=&quot;Android client metrics chart&quot; width=&quot;300&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular-BTM 0.1.0 released</title>
      <link>http://www.hawkular.org/blog/2015/07/01/hawkular-btm-0-1-0-released.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Wed, 1 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/07/01/hawkular-btm-0-1-0-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.1.0 of the Hawkular Business Transaction Management project. The main focus for this release has been on capturing as much structural information about a business transaction as possible, with the minimum of configuration on the part of the user.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_highlights_of_this_release&quot;&gt;Highlights of this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Definition of the Business Transaction model for exchanging trace fragments related to business transaction execution across multiple systems/environments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basic in-memory REST service for reporting and querying business transaction fragments (&lt;a href=&quot;http://www.hawkular.org/docs/rest/rest-btm.html&quot;&gt;REST API documentation&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration with Hawkular Accounts, to provide authorization and authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Embedded business transaction collector (agent), leveraging &lt;a href=&quot;http://byteman.jboss.org&quot;&gt;ByteMan&lt;/a&gt; to instrument technologies of interest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide instrumentation rule model and translation to ByteMan rules (text based)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instrumentation agent tested in:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java standalone app (e.g. micro services)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wildfly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache Tomcat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache Karaf OSGi Container&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initial instrumentation rules for:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Camel core&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP clients (apache httpclient, java HttpURLConnection, RESTEasy JAX-RS client)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JMS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Servlet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restlet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDBC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SwitchYard&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only basic information for each of these technologies is currently recorded, so future releases will enhance these rules, as well as add rules for other relevant technologies. If you have particular technologies you are interested in instrumenting, then please raise a feature request in our jira.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download the release from &lt;a href=&quot;https://github.com/hawkular/hawkular-btm/releases/tag/0.1.0.Final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The detailed release notes can be found &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12316120&amp;amp;version=12327163&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feature requests and bugs should be reported in our project &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to Juraci Paixão Kröhling for his help on integrating with Hawkular Accounts and Peter Palaga for his help with the release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Monitoring a SwitchYard Application using Hawkular BTM 0.1.0.Final</title>
      <link>http://www.hawkular.org/blog/2015/07/01/hawkular-btm-0.1.0-demo.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Wed, 1 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/07/01/hawkular-btm-0.1.0-demo.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular BTM 0.1.0.Final is the first release of the Hawkular Business Management project, and therefore currently only provides a minimal level of functionality. However despite the early stage of the project, this post will show how a business transaction implemented using SwitchYard can be monitored across two separate applications using JMS and Web Services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post assumes that the Hawkular BTM 0.1.0.Final distribution has been downloaded and unzipped, and the &lt;strong&gt;&lt;em&gt;BTM_HOME&lt;/em&gt;&lt;/strong&gt; environment variable setup, as described in the &lt;a href=&quot;http://www.hawkular.org/docs/components/btm/index.html&quot;&gt;user documentation&lt;/a&gt;. The environment being monitored is &lt;strong&gt;SwitchYard 2.0.0.Final&lt;/strong&gt; installed in &lt;strong&gt;Wildfly 8.1.0.Final&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this post, we will be deploying the SwitchYard &lt;em&gt;quickstarts/demos/multiApp&lt;/em&gt; example. Once SwitchYard has been installed in Wildfly, follow the instructions in the &lt;em&gt;multiApp/README.md&lt;/em&gt; to deploy the application into Wildfly. Once deployed, stop the Wildfly server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From a command window in the Wildfly &lt;em&gt;bin&lt;/em&gt; folder, run the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;. $BTM_HOME/client/env.sh
./standalone.sh -c standalone-full.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simple as that! Now the Wildfly server, running the SwitchYard application, has been instrumented (using &lt;a href=&quot;http://byteman.jboss.org/&quot;&gt;ByteMan&lt;/a&gt;) to capture some information relevant for Business Transaction Management. However before performing any transactions we need to startup the Business Transaction Management Server. Go to the BTM distribution&amp;#8217;s root folder and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;bin/standalone.sh -Dkeycloak.import=standalone/configuration/hawkular-realm.json \
                             -Djboss.socket.binding.port-offset=100&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;keycloak.import&lt;/em&gt; argument is only required when starting the server for the first time, and initialises Hawkular Accounts (including setting up a default user &lt;strong&gt;jdoe&lt;/strong&gt; with password &lt;strong&gt;password&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we are ready to perform a business transaction instance. Open a command window in the SwitchYard &lt;em&gt;quickstarts/demos/multiApp&lt;/em&gt; folder and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;mvn exec:java -Pwildfly --settings ../../settings.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That should return with a XML document indicating that the order has been accepted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now issue the following command, to request a list of business transaction fragments from the Business Transaction Management Server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl -X GET -u jdoe:password http://localhost:8180/hawkular/btm/transactions | python -m json.tool&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will generate two business transaction fragments, the first for the OrderService web service, and the second for the JMS application that receives the order and then invokes the OrderService web service. See the &lt;a href=&quot;data/blog/2015/btm/hawkular-btm-0.1.0-demo.json&quot;&gt;full JSON here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The condensed and annotated version of the first fragment is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;First business transaction fragment&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;    {
        &quot;id&quot;: &quot;9d037fcc-d3fc-4b51-a273-ae05d762ad32&quot;, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
        &quot;nodes&quot;: [
            {
                &quot;correlationIds&quot;: [
                    {
                        &quot;scope&quot;: &quot;Interaction&quot;,
                        &quot;value&quot;: &quot;d9c727d6-9688-4206-8db5-226fe73abb79&quot; &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
                    }
                ],
                &quot;details&quot;: {
                    &quot;btm_source&quot;: &quot;javax-servlet&quot;, &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
                    &quot;remoteAddr&quot;: &quot;127.0.0.1&quot;,
                    &quot;remoteHost&quot;: &quot;127.0.0.1&quot;
                },
                &quot;startTime&quot;: 1435758196356,
                &quot;type&quot;: &quot;Consumer&quot;,
                &quot;uri&quot;: &quot;http://localhost:8080/quickstart-demo-multiapp/OrderService&quot;,
                &quot;duration&quot;: 391,
                &quot;endpointType&quot;: &quot;HTTP&quot;,
                &quot;nodes&quot;: [
                    {
                        &quot;details&quot;: {
                            &quot;btm_source&quot;: &quot;switchyard&quot;
                        },
                        &quot;operation&quot;: &quot;submitOrder&quot;, &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
                        &quot;startTime&quot;: 1435758196555,
                        &quot;type&quot;: &quot;Service&quot;,
                        &quot;uri&quot;: &quot;{urn:switchyard-quickstart-demo:multiapp:0.1.0}OrderService&quot;,
                        &quot;duration&quot;: 96,
                        &quot;nodes&quot;: [
                            {
                                &quot;details&quot;: {
                                    &quot;btm_source&quot;: &quot;switchyard&quot;
                                },
                                &quot;duration&quot;: 17,
                                &quot;nodes&quot;: [],
                                &quot;operation&quot;: &quot;lookupItem&quot;, &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
                                &quot;startTime&quot;: 1435758196565,
                                &quot;type&quot;: &quot;Service&quot;,
                                &quot;uri&quot;: &quot;{urn:switchyard-quickstart-demo:multiapp:0.1.0}OrderService/InventoryService&quot;
                            }
                        ]
                    }
                ]
            }
        ]
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each business transaction fragment has a unique id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This interaction based correlation id will link this business transaction fragment with the web service invocation in the second fragment below&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each node can provide additional details, which includes the &lt;em&gt;btm_source&lt;/em&gt; used to identify the technology that generated the node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This fragment shows one SwitchYard Service (OrderService) calling another SwitchYard Service (OrderService/InventoryService)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The condensed and annotated version of the second fragment is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Second business transaction fragment&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;    {
        &quot;id&quot;: &quot;bc832ed0-787d-47f0-993d-f37c1ca58b95&quot;,
        &quot;nodes&quot;: [
            {
                &quot;details&quot;: {
                    &quot;btm_source&quot;: &quot;javax-jms&quot;
                },
                &quot;startTime&quot;: 1435758194986,
                &quot;type&quot;: &quot;Consumer&quot;,
                &quot;uri&quot;: &quot;HornetQQueue[OrderRequestQueue]&quot;, &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
                &quot;duration&quot;: 1904,
                &quot;endpointType&quot;: &quot;JMS&quot;,
                &quot;nodes&quot;: [
                    .... (removed nodes associated with camel components)
                        &quot;nodes&quot;: [
                            {
                                &quot;details&quot;: {
                                    &quot;btm_source&quot;: &quot;switchyard&quot;
                                },
                                &quot;operation&quot;: &quot;submitOrder&quot;, &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
                                &quot;startTime&quot;: 1435758195245,
                                &quot;type&quot;: &quot;Service&quot;,
                                &quot;uri&quot;: &quot;{urn:switchyard-quickstart-demo:multiapp:0.1.0}OrderInput&quot;,
                                &quot;duration&quot;: 1524,
                                &quot;nodes&quot;: [
                                     .... (removed nodes associated with camel components)
                                        &quot;nodes&quot;: [
                                            {
                                                &quot;details&quot;: {
                                                    &quot;btm_source&quot;: &quot;switchyard&quot;
                                                },
                                                &quot;operation&quot;: &quot;submitOrder&quot;, &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
                                                &quot;startTime&quot;: 1435758195310,
                                                &quot;type&quot;: &quot;Service&quot;,
                                                &quot;uri&quot;: &quot;{urn:switchyard-quickstart-demo:multiapp:0.1.0}OrderInputComponent/OrderWebService&quot;,
                                                &quot;duration&quot;: 1454,
                                                &quot;nodes&quot;: [
                                                    {
                                                        &quot;correlationIds&quot;: [
                                                            {
                                                                &quot;scope&quot;: &quot;Interaction&quot;,
                                                                &quot;value&quot;: &quot;d9c727d6-9688-4206-8db5-226fe73abb79&quot; &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
                                                            }
                                                        ],
                                                        &quot;details&quot;: {
                                                            &quot;btm_source&quot;: &quot;java-httpurlconnection&quot;,
                                                            &quot;http_method&quot;: &quot;POST&quot;
                                                        },
                                                        &quot;duration&quot;: 35,
                                                        &quot;endpointType&quot;: &quot;HTTP&quot;,
                                                        &quot;startTime&quot;: 1435758196129,
                                                        &quot;type&quot;: &quot;Producer&quot;,
                                                        &quot;uri&quot;: &quot;http://localhost:8080/quickstart-demo-multiapp/OrderService&quot;
                                                    }
                    ....
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The business transaction is initiated by a message being received on a JMS queue&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A SwitchYard Service is called which then invokes a SwitchYard Reference with a web service binding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SwitchYard Reference is currently recorded as a separate Service node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP invocation with the matching interaction correlation id, linking this Producer node with the Consumer node in the first business transaction fragment&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These two business transaction fragments show how a business transaction instance can be traced across JMS, Apache Camel, SwitchYard and HTTP (Web Service), with the two fragments being correlated based on an ID shared between the HTTP Producer and Consumer nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to try out the release for yourself on your own applications. If you have any questions or comments, please contact us on &lt;a href=&quot;/community/join.html&quot;&gt;these channels&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have suggestions for features/enhancements, or find any bugs, then please log an issue in the &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;project jira&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.4.0 - Release</title>
      <link>http://www.hawkular.org/blog/2015/06/23/hawkular-metrics-0-4-0-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/06/23/hawkular-metrics-0-4-0-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.4.0 of Hawkular Metrics. The release is anchored by new Counter metric
implementation, various stability enhancements, and Grafana integration updates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_updates&quot;&gt;Release Updates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was an email thread on Hawkular Devel List about 1 week ago that announced some minor changes to the
release process for Hawkular Metrics. This release is the first to apply the plan. Going forward, the project
will follow &lt;a href=&quot;https://developer.jboss.org/wiki/JBossProjectVersioning&quot;&gt;JBoss Project Versioning&lt;/a&gt; guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid confusion here is an explanation of the release version number. The current release 0.4.0.Final
contains the code that was initially planned under 0.3.5. The version bump was required to align the
release version with the release mechanics. But there are no surprising commits or changes in functionality
that were not expected to be released.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_here_is_a_list_of_major_changes_in_this_release&quot;&gt;Here is a list of major changes in this release:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Documentation&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added a new, Metrics specific, documentation section on the Hawkular  website&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installation, configuration and Grafana integration are covered&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Link: &lt;a href=&quot;http://www.hawkular.org/docs/components/metrics/index.html&quot; class=&quot;bare&quot;&gt;http://www.hawkular.org/docs/components/metrics/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;External Integration&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Grafana graph panel editor is now able to autocomplete the metric name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation regrading the Grafana integration is now covered by the official Hawkular Metrics documentation (see above)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heapster versions 0.14.0 and up can use Hawkular-Metrics as their time series data storage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updates to core API (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-113&quot;&gt;HWKMETRICS-113&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Metric is now a concrete type. GaugeMetric and AvailabilityMetric classes have been removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new DataPoint class replaces the former GaugeDataPoint and AvailabilityDataPoint classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of the new model classes are immutable. We will continue refactoring to make model classes immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swagger and Jackson dependencies have been removed from core&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cassandra&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cassandra Java driver upgraded to version 2.1.6 (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-109&quot;&gt;HWKMETRICS-109&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Embedded Cassandra is no longer part of the Hawkular Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cassandra is now an integral part of Hawkular Project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Embedded Cassandra has been moved to &lt;a href=&quot;https://github.com/hawkular/hawkular-commons&quot;&gt;Hawkular Commons&lt;/a&gt; repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For now, will keep including the compatible embedded jar distribution as part of the release downloads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NOTE: the embedded Cassandra should only be used for testing, debugging, or developing Hawkular Metrics. In production
environments please use a full Cassandra deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated Counter Metric (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-53&quot;&gt;HWKMETRICS-53&lt;/a&gt;,
&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-59&quot;&gt;HWKMETRICS-59&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Core and REST APIs support reading/writing counters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Core API supports generating and reading rates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST API for rates will come in next release&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developer tools&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gatling load testing scenario added&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/tree/master/load-tests&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/tree/master/load-tests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is part of the on-going effort for testing and performance profiling&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:
&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.4.0&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.4.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:
&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:
&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327451/&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327451/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_0_5_0_beyond&quot;&gt;Hawkular Metrics 0.5.0 &amp;amp; Beyond&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Gauge Aggregates - Long-term storage of numeric metrics at the expense  of losing some fidelity. With task queue
released in 0.3.4, the expectation is to start the actual implementation 0.5.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update REST testing - while the current set of tests is a good gauge for regressions, the overall coverage is
still low.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved docker and kubernetes support - this is a long term goal for the project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The counters will received improved REST API support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initial support in the Python &amp;amp; Golang clients for counters&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A  big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, Jirka Kremser, and Heiko Rupp for their  project  contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>MarsJUG and RivieraDEV retrospective</title>
      <link>http://www.hawkular.org/blog/2015/06/17/marsjug-and-rivieradev-retrospective.html</link>
      <author>noreply@hawkular.org (Thomas Segismont)</author>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/06/17/marsjug-and-rivieradev-retrospective.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, I gave a talk in French at the &lt;a href=&quot;http://marsjug.org/&quot;&gt;Marseille Java User Group&lt;/a&gt;
and did it again last week at the &lt;a href=&quot;http://www.rivieradev.com/&quot;&gt;RivieraDEV&lt;/a&gt; conference.
The presentation was called &lt;em&gt;&quot;Tenir ses applications à l&amp;#8217;oeil avec Hawkular Metrics&quot;&lt;/em&gt; (&lt;em&gt;&quot;Keep an eye on your applications
with Hawkular Metrics&quot;&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m a MarsJUG &lt;em&gt;aficionado&lt;/em&gt;, so it was fun to be on the other side of the desk.
But it was my first time at RivieraDEV, and I have to say I was quite impressed.
The organization team did an awesome job, and the sessions I&amp;#8217;ve attended were all very interesting.
Needless to say, a conference located in the French Riviera has some advantages&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;fr&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;At the &lt;a href=&quot;https://twitter.com/hashtag/RivieraDev?src=hash&quot;&gt;#RivieraDev&lt;/a&gt; Speaker diner.  I must admit it : better than the &lt;a href=&quot;https://twitter.com/hashtag/devoxx?src=hash&quot;&gt;#devoxx&lt;/a&gt; one 😊 &lt;a href=&quot;http://t.co/6IVX0ZGYY7&quot;&gt;pic.twitter.com/6IVX0ZGYY7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel De Luca (@danieldeluca) &lt;a href=&quot;https://twitter.com/danieldeluca/status/609077780114976768&quot;&gt;11 Juin 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;http://www.hawkular.org///platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was well surprised to see the room packed for my presentation, as the RivieraDEV audience was mostly comprised of
developers, not system administrators. This is a good sign: more and more, monitoring tools draw attention
of the development side.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;fr&quot; dir=&quot;ltr&quot;&gt;Tenir ses applications à l&amp;#39;œil avec &lt;a href=&quot;https://twitter.com/hawkular_org&quot;&gt;@hawkular_org&lt;/a&gt; Metrics et &lt;a href=&quot;https://twitter.com/tsegismont&quot;&gt;@tsegismont&lt;/a&gt; ! &lt;a href=&quot;http://t.co/wul0NbeyTO&quot;&gt;pic.twitter.com/wul0NbeyTO&lt;/a&gt;&lt;/p&gt;&amp;mdash; RivieraDEV (@RivieraDEV) &lt;a href=&quot;https://twitter.com/RivieraDEV/status/609274503382831104&quot;&gt;June 12, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;http://www.hawkular.org///platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I came back home with very good feedback from the attendees.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_interoperability_idea_validated&quot;&gt;Interoperability idea validated&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the nicest questions I was asked at RivieraDEV was, in the following or similar terms:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m interested but I have Nagios everywhere, and I won&amp;#8217;t remove it. Can I use Hawkular with it?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While we haven&amp;#8217;t worked on Nagios interoperability yet, we have a tool called
&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/tree/master/clients/ptranslator&quot;&gt;PTrans&lt;/a&gt;, which listens to metric data sent
over several common protocols (&lt;em&gt;graphite&lt;/em&gt; and &lt;em&gt;collectd&lt;/em&gt; among others).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So Nagios integration is possible, and would be a very nice contribution (subliminal message).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_dashboards&quot;&gt;Dashboards&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s one thing to store data, but of course everyone wants to do something with it! So the ability to work with Grafana
on top of Hawkular Metrics was appreciated. And as promised to a participant,
there&amp;#8217;s now &lt;a href=&quot;http://www.hawkular.org/docs/components/metrics/grafana_integration.html&quot;&gt;a guide for the setup&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But we&amp;#8217;re also working on our own charting Javascript library, so you&amp;#8217;ll be soon be able to create your own dashboards
or embed graphs in your applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_opentsdb_comparison&quot;&gt;OpenTSDB comparison&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the MarsJUG as well as RivieraDEV, I was asked how Hawkular Metrics relates to OpenTSDB, and why we don&amp;#8217;t use
OpenTSDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s my own opinion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It is similar in goals, I think: being simple to use (from a client), and capable of ingesting and storing
loads of data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the RHQ project, we have experience in storing metric data in Apache Cassandra; it fits our known needs, so from
a user/customer support perspective, it feels more comfortable to me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Metrics can run on Microsoft Windows out-of-the-box; as far as I know, OpenTSDB cannot;
and this platform is not a niche for us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Metrics is probably simpler to administrate in small environments, because you don&amp;#8217;t have to deploy HBase.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it. You can review the
&lt;a href=&quot;http://fr.slideshare.net/ThomasSegismont/gardez-vosapplicationsloeilavechawkularmetrics&quot;&gt;slides&lt;/a&gt; online or download them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you attended one the sessions, I hope you enjoyed it. And see you next year hopefully!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular, the first release!</title>
      <link>http://www.hawkular.org/blog/2015/06/04/hawkular-1.0.0.Alpha1-released.html</link>
      <author>noreply@hawkular.org (Thomas Heute)</author>
      <pubDate>Thu, 4 Jun 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/06/04/hawkular-1.0.0.Alpha1-released.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are very happy to release our very first version of Hawkular!
This is an important milestone for us, one of many more to come.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What you can already do with this release:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Self register &amp;amp; login&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;img-welcome&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha1_welcome.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha1_welcome.png&quot; alt=&quot;Hawkular welcome page&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add URLs to monitor. Hawkular will tell you if your URLs are accessible and what was the response time from the server, it keeps history of this data and you can browse the graphs to see the data at a particular time. The monitoring data for URLs added by you can be seen by you only.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;img-urllist&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha1_urllist.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha1_urllist.png&quot; alt=&quot;Hawkular URL list&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Be alerted by Email when certain thresholds are met with dampening to avoid false alerts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;img-urlavailability&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha1_urlavailability.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha1_urlavailability.png&quot; alt=&quot;Hawkular URL availability&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;img-urlresponsetime&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha1_urlresponsetime.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha1_urlresponsetime.png&quot; alt=&quot;Hawkular URL response time&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add WildFly servers to monitor (for the moment you will need to instrument your server manually following &lt;a href=&quot;http://www.hawkular.org/docs/user/getting-started.html#_install_a_wildfly_monitoring_agent&quot;&gt;these instructions&lt;/a&gt; and Hawkular user interface will tell you if they are up or down).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;img-serverslist&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/1.0.0.Alpha1_serverslist.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/1.0.0.Alpha1_serverslist.png&quot; alt=&quot;Hawkular servers list&quot; width=&quot;500&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a lot more behind the scenes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Metrics is a sub-project that allows you to store timeseries over a long period of time, this is based on the work done with the RHQ project and uses Cassandra in the background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkular Alerts is a component used by Hawkular to manage alerts. It is extremely configurable through a rule based engine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The WildFly Agent exposes a lot of metrics from WildFly but also feed the inventory with deployments, datasources, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We plan to do a lot more Alpha releases with even more features, the next Alpha is planned for July 1st, and &lt;a href=&quot;/docs/dev/development.html&quot;&gt;you can help us&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you for the contributions!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download it here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha1/hawkular-dist-1.0.0.Alpha1.zip&quot;&gt;Hawkular 1.0.0.Alpha1 (zip)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://download.jboss.org/hawkular/hawkular/1.0.0.Alpha1/hawkular-dist-1.0.0.Alpha1.tar.gz&quot;&gt;Hawkular 1.0.0.Alpha1 (tar.gz)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oh, and we have a new logo, the hawk is looking at your apps, be kind to him!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-logo&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/hawkular_logo_200x200.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/hawkular_logo_200x200.png&quot; alt=&quot;Hawkular logo&quot; width=&quot;200&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.3.4 - Release</title>
      <link>http://www.hawkular.org/blog/2015/06/01/hawkular-metrics-0-3-4-released.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Mon, 1 Jun 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/06/01/hawkular-metrics-0-3-4-released.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce release 0.3.4 of Hawkular Metrics. The release is anchored by stability improvements and Docker + Kubernetes work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_here_are_the_release_highlights&quot;&gt;Here are the release highlights:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;InfluxDB Compatibility Layer&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pretty printing of query results with the &apos;pretty&apos; query parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;absolute moment operands in queries (ex: select * from test where time &amp;gt; 1501560s and time &amp;lt; 4560546h)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;various fixes which allow to integrate nicely with Grafana (declaring Hawkular Metrics as an InfluxDB 0.8 datasource)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RxJavaMigration&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;big refactoring to use RxJava instead of Guava&amp;#8217;s ListenableFuture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RxJava provides a much richer API for building asynchronous programs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server Start-up&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the server no longer requires Cassandra to be started first&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;any client requests will get back a 503 response code if the server has not fully initialized due to Cassandra
being down at start up time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker and Kubernetes&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all project docker images are now available in Docker Hub! Get them here:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://registry.hub.docker.com/u/hawkular/hawkular-metrics/&quot; class=&quot;bare&quot;&gt;https://registry.hub.docker.com/u/hawkular/hawkular-metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://registry.hub.docker.com/u/hawkular/hawkular-cassandra/&quot; class=&quot;bare&quot;&gt;https://registry.hub.docker.com/u/hawkular/hawkular-cassandra/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;improved replication controller support now means that both the Hawkular-Metrics and Cassandra images can be scaled
up or down&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;various other smaller improvements, including better support for when containers startup&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST API (IMPORTANT!)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tenantId&lt;/code&gt; header was renamed to &lt;code&gt;Hawkular-Tenant&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tenantId&lt;/code&gt; header fallback was removed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET {id}/tags&lt;/code&gt; only returns the tags, not the whole definition anymore&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET {id}&lt;/code&gt; returns the metric definition (see &lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-110&quot;&gt;HWKMETRICS-110&lt;/a&gt; for
known issue)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI Explorer&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;was removed from the project&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;discussions are underway to find a new home for the functionality and code (probably hawkular-ui-components)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npm is no longer required to compile the project&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task Queue&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a generic task queue was designed and developed as part of this release&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provides functionality for scheduling and executing background tasks or jobs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;task execution is&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scalable - automatically distributed among Hawkular Metrics servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;durable - Tasks are persisted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fault tolerant - Tasks are rescheduled for future execution when there is a failure&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it will serve as the foundation for&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;computing/storing aggregated metrics (i.e., rollups)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deleting metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;changing data retention&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this functionality will be basis for any background task based design for the project&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_release_links&quot;&gt;Release links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Release:
&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.3.4&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.3.4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:
&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jira release tracker:
&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327259/&quot; class=&quot;bare&quot;&gt;https://issues.jboss.org/browse/HWKMETRICS/fixforversion/12327259/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hawkular_metrics_0_3_5_and_beyond&quot;&gt;Hawkular Metrics 0.3.5 and Beyond&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Gauge Aggregates - Long-term storage of numeric metrics at the expense of losing some fidelity. With task queue
released in 0.3.4, the expectation is to start the actual implementation 0.3.5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update REST testing - while the current set of tests is a good gauge for regressions, the overall coverage is still
low. The plan for 0.3.5 is to increase coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved Docker and Kubernetes support - this is a long term goal for the project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RXJava - the initial transition from Guava was done in 0.3.4. Future releases will build upon this foundation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_thanks&quot;&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank  you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, Matt Wringe, Michael Burman, and Heiko Rupp for their project
contributions. Special mentions go to Jeeva Kandasamy and Jirka Kremser for their project help.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Introducing the latest Hawkular component: Business Transaction Management</title>
      <link>http://www.hawkular.org/blog/2015/04/30/introducing-btm.html</link>
      <author>noreply@hawkular.org (Gary Brown)</author>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/04/30/introducing-btm.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pleased to introduce a new component to the Hawkular family aimed at delivering a &lt;strong&gt;Business Transaction Management&lt;/strong&gt; solution. The initial focus will be on tracing a business transaction across a range of resources, on-premises and in the cloud, to provide an end to end view helping to isolate business transaction failures and performance bottlenecks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this stage we are still putting together high level plans and hope to start publishing more details of a roadmap over the coming weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have requirements in this area, please feel free to &lt;a href=&quot;https://issues.jboss.org/browse/HWKBTM&quot;&gt;create a jira&lt;/a&gt;, or discuss them on our &lt;a href=&quot;http://www.hawkular.org/community/join.html&quot;&gt;irc channel or dev mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hello GSoC Students</title>
      <link>http://www.hawkular.org/blog/2015/04/29/hello-to-gsoc-students.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/04/29/hello-to-gsoc-students.html</guid>
      	<description>
	&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org/http://2.bp.blogspot.com/-PutwgzAxESE/VT9mlQ41uVI/AAAAAAAA4Jc/PIkJV51Z5Zw/s1600/GoogleSummer_2015logo_horizontal.jpg&quot; alt=&quot;GSoC Logo&quot; width=&quot;320&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are pretty happy, that Hawkular is participating in this years edition of
&lt;a href=&quot;https://www.google-melange.com/gsoc/dashboard/google/gsoc2015&quot;&gt;&lt;em&gt;Google Summer of Code&lt;/em&gt;&lt;/a&gt; (GSoC) with two
projects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aakarsh Agarwal on &lt;em&gt;Hawkular - pluggable data processors for metrics&lt;/em&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular-metrics deals with computation of
values and operations on the raw data. This project is aimed to develop interface for plugins that improve the
performance of Hawkular-Metrics making it more dependable, dynamic and extending the scope of its usage in operating
with data sets.Plugins are needed to apply statistical algorithms to the data and compute those necessary functions.
Such plugins may be plugged in at runtime whenever user wants it to.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Artur Dryomov on &lt;em&gt;Hawkular Android Client&lt;/em&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mobile phones, especially smartphones, came to our life very quickly.
We use them every day and sometimes more often than our computers. At the moment there is no way to use Hawkular
comfortably on Android, there is only a web interface. This conclusion assumes that some work should be done to
provide a new way of user interaction with Hawkular. My work is to implement this idea in an Android application for
Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The later proposal is done together with the Aerogear project. Daniel Passos from &lt;a href=&quot;https://aerogear.org&quot;&gt;AeroGear&lt;/a&gt; is
the official mentor for the student.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Intro to Hawkular, a middleware open-source management solution</title>
      <link>http://www.hawkular.org/blog/2015/04/14/intro-to-hawkular.html</link>
      <author>noreply@hawkular.org (Thomas Heute)</author>
      <pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/04/14/intro-to-hawkular.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong class=&quot;big&quot;&gt;mission&lt;/strong&gt; of Hawkular is to provide an easy-to-use management solution with a particular focus on your &lt;strong class=&quot;big&quot;&gt;middleware applications&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our efforts are primarily about &lt;strong class=&quot;big&quot;&gt;monitoring&lt;/strong&gt; at this stage. We are putting a lot of efforts in providing a &lt;strong class=&quot;big&quot;&gt;usable user interface&lt;/strong&gt;, it&amp;#8217;s no longer an after-thought, the UI design actually drives a lot of the requirements (and don&amp;#8217;t worry all the capabilities of the UI interface are available through a REST interface, this is per design).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also think that alerts should be &lt;strong class=&quot;big&quot;&gt;smart&lt;/strong&gt; ! We definitely want to reduce the amount of false alerts to the minimum. A slower response time might not prove a dysfunction if there is a heavier usage of a system, it would be if the response time increase for no reason. Higher load and higher response time may trigger auto-scaling in a cloud environment… We also want to add &lt;strong class=&quot;big&quot;&gt;prediction&lt;/strong&gt; capabilities to let you react &lt;strong class=&quot;big&quot;&gt;before&lt;/strong&gt; things start breaking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Provisioning and configuration&lt;/div&gt;
Speaking of auto-scaling and cloud environment, in a later phase we (and/or &lt;a href=&quot;http://www.hawkular.org/community/join.html&quot;&gt;you&lt;/a&gt;?) will add provisioning and configurations of servers to Hawkular.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular will also help you with out of the box alert configurations that makes sense and that you can adjust/change/remove/add. Because we deal with many common issues through supporting our projects and products we aim at bringing that knowledge back into the monitoring tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No matter if you belong to the SOA &quot;old-school&quot; or Micro Services &quot;hype&quot;, it&amp;#8217;s usually hard to properly get a grasp of the relations between multiple services running on multiple servers and how one can affect another one. It is our goal to focus on an application rather than on a plain list of servers. We&amp;#8217;ll help you visualize that infrastructure by discovering as much as possible the relationships between the various elements and making this graph of resources easy to browse, we&amp;#8217;ll want to tell you what applications are affected when a particular service, database, server&amp;#8230;&amp;#8203; is having issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As for the &lt;strong class=&quot;big&quot;&gt;current status&lt;/strong&gt;, we are heavily working on the core services (Metrics storing and collection, alerts, inventory, reactive architecture&amp;#8230;&amp;#8203;) but to get something usable today we are already providing a tool to monitor websites by providing its URL. You&amp;#8217;ll immediately get historical data about availability and response times on which you can decide to receive email notifications when something goes wrong. (&lt;a href=&quot;http://www.hawkular.org/blog/2015/04/09/alert-notifiers-for-mobile-devices.html&quot;&gt;Mobile push notifications and SMS using Twilio just made it&lt;/a&gt; and PagerDuty support is on its way ! Easily extensible)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-ping-service&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/blog/2015/hawkular-intro1.png&quot;&gt;&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/hawkular-intro1.png&quot; alt=&quot;Hawkular ping service&quot; width=&quot;800&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Hawkular ping service&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To &lt;strong class=&quot;big&quot;&gt;get started&lt;/strong&gt; you have several options (more info &lt;a href=&quot;http://www.hawkular.org/docs/user/getting-started.html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use our docker image. Assuming you have docker already installed, it&amp;#8217;s also a very easy way to get started, here are the instructions:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;sudo docker run -d -p 8081:8080 hawkular/hawkular&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your web browser and go to &lt;a href=&quot;http://localhost:8081&quot; class=&quot;bare&quot;&gt;http://localhost:8081&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hawkular.org/docs/dev/development.html#_full_distribution&quot;&gt;Build from sources&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s fully open-source and as you can tell we are at the beginning of the journey (with 10+ years of experience with the &lt;a href=&quot;http://rhq-project.github.io/rhq/&quot;&gt;RHQ project&lt;/a&gt;),  feel free to contribute &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/hawkular-dev&quot;&gt;ideas&lt;/a&gt; and &lt;a href=&quot;https://github.com/hawkular/hawkular.git&quot;&gt;code&lt;/a&gt; and/or report &lt;a href=&quot;https://issues.jboss.org/browse/HAWKULAR&quot;&gt;issues&lt;/a&gt; !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it! Questions? Comments? Feel free to ask here or &lt;a href=&quot;irc://irc.freenode.net/#hawkular&quot;&gt;join us on Freenode&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular-Monitor Agent</title>
      <link>http://www.hawkular.org/blog/2015/04/14/hawkular-monitor-agent-intro.html</link>
      <author>noreply@hawkular.org (John Mazzitelli)</author>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/04/14/hawkular-monitor-agent-intro.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/hawkular/hawkular-agent&quot;&gt;Hawkular Monitor agent&lt;/a&gt; is in good enough shape now
to be able to blog about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hawkular Monitor agent is a Wildfly subsystem extension deployed as a module inside Wildfly.
At the time of writing, this currently works in Wildfly 8.2 Final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You define what metrics you want to collect and what availabilty checks to make by adding metric sets and avail sets
to standalone.xml. You could also use the JBoss CLI to do this, rather than directly editing standalone.xml, if you wish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A sample configuration &lt;a href=&quot;https://github.com/hawkular/hawkular-agent/blob/master/hawkular-wildfly-monitor/src/main/assembly/subsystem.xml&quot;&gt;is found here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example of a metric to be collected is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;metric-dmr name=&quot;heap.used&quot;
            interval=&quot;30&quot;
            timeUnits=&quot;seconds&quot;
            resource=&quot;/core-service=platform-mbean/type=memory&quot;
            attribute=&quot;heap-memory-usage#used&quot; /&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This defines a metric named &quot;heap.used&quot; which is the heap memory used by the WildFly VM.
The metric will be collected every 30 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is an example of an availability check:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;avail-dmr name=&quot;app-server&quot;
           interval=&quot;30&quot;
           timeUnits=&quot;seconds&quot;
           resource=&quot;/&quot;
           attribute=&quot;server-state&quot;
           upRegex=&quot;run.*&quot; /&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will look at the WildFly&amp;#8217;s &quot;server-state&quot; and if its value matches the
regular expression &quot;run.*&quot; then this availability check will report UP. Otherwise, it will report DOWN.
If no upRegex is provided, then some simple heuristics are performed to determine the availability status
(specifically if the value is a number then a 0 is considered DOWN and non-zero is considered UP;
otherwise, if the value is the string &quot;up&quot; or &quot;ok&quot; (case insenstive) it is considered UP,
otherwise it is considered DOWN.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full XML Schema for the Hawkular Monitor agent subsystem configuration can be
&lt;a href=&quot;https://github.com/hawkular/hawkular-agent/blob/master/hawkular-wildfly-monitor/src/main/resources/schema/hawkular-agent-monitor-subsystem.xsd&quot;&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, what can be monitored or checked for availability is any resource in the WildFly management hierachy
(in the same WildFly where Hawkular Monitor agent is deployed). Future development is underway to allow the
Hawkular Monitor agent to monitor resources in remote WildFly instances, as well as remote JMX resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, you have the option to store the metric and availability data directly to a Hawkular-Metrics instance or to
a Hawkular ecosystem (this is the &amp;lt;storage-adapter&amp;gt; definition). As the Hawkular ecosystem is built out (specifically, as inventory is brought into the picture),
a fuller integration with Hawkular Monitor agent will be possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions on this, or suggestions on what features we need to add or enhance, please ping us on
the #hawkular freenode chat room or send an email to the &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/hawkular-dev&quot;&gt;hawkular-dev mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how_to_build&quot;&gt;How To Build&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Clone &lt;a href=&quot;https://github.com/hawkular/hawkular-agent&quot;&gt;the source code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build via Maven: &quot;mvn clean install&quot;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Wildfly module that houses the Hawkular Monitor agent will be found in a zip file under hawkular-agent/hawkular-wildfly-monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip the Hawkular Monitor agent into whatever Wildfly 8.2 instance you want.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alternatively, you can use the Maven wildfly-extension-plugin to do this:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cd hawkular-agent/hawkular-wildfly-monitor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mvn -Dorg.hawkular.wildfly.home=/source/hawkular/kettle/target/wildfly-8.2.0.Final/ clean install wildfly-extension:deploy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notice the above command installed Hawkular Monitor agent inside my Hawkular Kettle build&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dmr_client&quot;&gt;DMR Client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A standalone library has been included in the hawkular-agent repository that can be used to talk to a WildFly&amp;#8217;s
management interface via a more strongly-typed API that sits above the DMR API. The
&lt;a href=&quot;https://github.com/hawkular/hawkular-agent/tree/master/hawkular-dmr-client/src/main/java/org/hawkular/dmrclient&quot;&gt;DMR Client&lt;/a&gt;
provides this capability in a single-jar library. The Hawkular Monitor agent uses it, but since it is a
standalone library, anyone that wants to talk to WildFly&amp;#8217;s management interface can use it. Currently, its snapshots are
released on Nexus which you can
&lt;a href=&quot;https://repository.jboss.org/nexus/content/repositories/snapshots/org/hawkular/agent/hawkular-dmr-client/&quot;&gt;find here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple example of its usage is as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.jboss.as.controller.client.ModelControllerClient;
import org.hawkular.dmrclient.Address;
import org.hawkular.dmrclient.CoreJBossASClient;

// ...

ModelControllerClient mcc = ModelControllerClient.Factory.create(&quot;myhostname&quot;, 9990);
// now use the hawkular-dmr-client library
try (CoreJBossASClient client = new CoreJBossASClient(mcc)) {
    // get version of the wildfly instance from DMR root resource &quot;/&quot;
    String rv = client.getStringAttribute(&quot;release-version&quot;, Address.root());

    // get install directory of the WildFly instance from DMR resource &quot;/core-service=server-environment&quot;
    String hd = client.getStringAttribute(&quot;home-dir&quot;, Address.parse(&quot;/core-service=server-environment&quot;));
} catch (Exception e) {
    // do something about the error
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You no longer have to worry about how to build DMR ModelNodes in the correct format to perform these kinds of operations.
The Hawkular DMR Client API will build the ModelNode requests and process the ModelNode responses for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CoreJBossASClient is one of several strongly-typed API objects that extend
&lt;a href=&quot;https://github.com/hawkular/hawkular-agent/blob/master/hawkular-dmr-client/src/main/java/org/hawkular/dmrclient/JBossASClient.java&quot;&gt;JBossASClient&lt;/a&gt;.
Others can be used to access common resource types in the DMR hierarchy, such as
&lt;a href=&quot;https://github.com/hawkular/hawkular-agent/blob/master/hawkular-dmr-client/src/main/java/org/hawkular/dmrclient/DatasourceJBossASClient.java&quot;&gt;DatasourceJBossASClient&lt;/a&gt;
which can be used to manipulate datasources.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Alert notifiers for mobile devices</title>
      <link>http://www.hawkular.org/blog/2015/04/09/alert-notifiers-for-mobile-devices.html</link>
      <author>noreply@hawkular.org (Thomas Segismont)</author>
      <pubDate>Thu, 9 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/04/09/alert-notifiers-for-mobile-devices.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alerts has new notifications senders which target mobile devices. Let&amp;#8217;s start with a brief explanation of
notification sending.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how_notification_senders_work&quot;&gt;How notification senders work?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the alert engine detects a problem, it sends an action message to the configured sender(s) for this type of issue.
The action message has all the details:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;which problem triggered the alert&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;who are the configured recipients&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;img-action-plugins&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/alert-action-plugins.png&quot; alt=&quot;Action plugins overview&quot; width=&quot;600&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Action plugins overview&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The alert engine inspects notification data to determine which action messages should be sent to the Hawkular bus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then it sends a message for each configured notification (email/SMS/push).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Action plugins pick up their messages and build the notification with the details given in the notification message.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Makes sense? Now which new plugins do we have?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;unified_push_notifications&quot;&gt;Unified Push Notifications&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Alert&amp;#8217;s &lt;code&gt;aerogear&lt;/code&gt; plugin is able to send notification messages to
&lt;a href=&quot;https://www.jboss.org/unifiedpush/&quot;&gt;Aerogear&amp;#8217;s Unified Push Server&lt;/a&gt;. Which means that you can send alerts as native push
messages to an Android, iOS, Windows or Firefox OS application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time of writing, Hawkular doesn&amp;#8217;t have a mobile application for any of these platforms (an Android application
might come soon with the help of a Google Summer of Code student). So for demonstration purposes we&amp;#8217;ve built a sample
application, &lt;code&gt;Hawkugear&lt;/code&gt; and ran it with the Android Emulator.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-action-plugins&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/blog/2015/hawkugear-android-app.png&quot; alt=&quot;Hawkugear Android application&quot; width=&quot;350&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Hawkugear Android application&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application lacks proper formatting of course, but you can see on this screenshot that the notification message
landed properly on the mobile device after travelling through the Hawkular Bus, the Aerogear Unified Push Server and
Google Cloud&amp;#8217;s Messaging platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To configure the &lt;code&gt;aerogear&lt;/code&gt; sender plugin, add these system property definitions (with your own values) into your
Wildfly &lt;code&gt;standalone.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;system-properties&amp;gt;
    &amp;lt;property name=&quot;org.hawkular.actions.aerogear.root.server.url&quot; value=&quot;http://localhost:9191/ag-push/&quot;/&amp;gt;
    &amp;lt;property name=&quot;org.hawkular.actions.aerogear.application.id&quot; value=&quot;as304-6019-8a256afkbc-935b274-16247&quot;/&amp;gt;
    &amp;lt;property name=&quot;org.hawkular.actions.aerogear.master.secret&quot; value=&quot;94b2-qc156s-719725j6-4k04d566-bs0a340&quot;/&amp;gt;
&amp;lt;/system-properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or using the CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/system-property=org.hawkular.actions.aerogear.root.server.url:add(value=&quot;http://localhost:9191/ag-push/&quot;)
/system-property=org.hawkular.actions.aerogear.application.id:add(value=&quot;as304-6019-8a256afkbc-935b274-16247&quot;)
/system-property=org.hawkular.actions.aerogear.master.secret:add(value=&quot;94b2-qc156s-719725j6-4k04d566-bs0a340&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;short_message_service&quot;&gt;Short Message Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s also an &lt;code&gt;sms&lt;/code&gt; plugin which is built on &lt;a href=&quot;https://www.twilio.com/sms&quot;&gt;Twilio&amp;#8217;s SMS services&lt;/a&gt;. No mobile application
required here, all you need to do is to create a Twilio account and configure the plugin with your application &lt;code&gt;sid&lt;/code&gt;,
authorization &lt;code&gt;token&lt;/code&gt;, and &lt;code&gt;from&lt;/code&gt; number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As for the &lt;code&gt;aerogear&lt;/code&gt; plugin, add these system property definitions (with your own values) into your Wildfly
&lt;code&gt;standalone.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;system-properties&amp;gt;
    &amp;lt;property name=&quot;org.hawkular.actions.sms.sid&quot; value=&quot;ACdc5f132a3c49700934481addd5ce1659&quot;/&amp;gt;
    &amp;lt;property name=&quot;org.hawkular.actions.sms.token&quot; value=&quot;3036d49cAf5Cd019c81de12354d57ac49a&quot;/&amp;gt;
    &amp;lt;property name=&quot;org.hawkular.actions.sms.from&quot; value=&quot;+14158141829&quot;/&amp;gt;
&amp;lt;/system-properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or using the CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/system-property=org.hawkular.actions.sms.sid:add(value=&quot;ACdc5f132a3c49700934481addd5ce1659&quot;)
/system-property=org.hawkular.actions.sms.token:add(value=&quot;3036d49cAf5Cd019c81de12354d57ac49a&quot;)
/system-property=org.hawkular.actions.sms.from:add(value=&quot;+14158141829&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;more_to_come&quot;&gt;More to come&amp;#8230;&amp;#8203;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have planned to integrate with &lt;a href=&quot;http://www.pagerduty.com/&quot;&gt;PagerDuty&lt;/a&gt;. In the beginning, each notification message
will be sent with a new indentifier. As a consequence, PagerDuty will see recurrent notifications of the same problem
as different incidents. The Hawkular Alerts team is working on an incident worflow and we should be able to solve this
problem in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it! Questions? Comments? Feel free to ask here or &lt;a href=&quot;irc://irc.freenode.net/#hawkular&quot;&gt;join us on Freenode&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Testing collectd integration</title>
      <link>http://www.hawkular.org/blog/2015/2015-04-08-1.html</link>
      <author>noreply@hawkular.org (Thomas Segismont)</author>
      <pubDate>Wed, 8 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/2015-04-08-1.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular Metrics is able to store data coming from &lt;a href=&quot;http://collectd.org/&quot; target=&quot;_blank&quot;&gt;collectd&lt;/a&gt;. To enable this
feature, you need to start the
&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/tree/master/clients/ptranslator&quot; target=&quot;_blank&quot;&gt;ptrans&lt;/a&gt; proxy, point it
to your Metrics server, and configure the collectd network plugin to send data to ptrans.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;img-stack&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org/../../img/blog/2015/collectd-ptrans-metrics.png&quot; alt=&quot;collectd/ptrans/metrics stack&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. collectd/ptrans/metrics stack&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Logo_der_Software_collectd.svg#/media/File:Logo_der_Software_collectd.svg&quot;&gt;
collectd logo by Florian Forster. Licensed under CC BY-SA 2.0 de via Wikimedia Commons&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;regression_test_requirements&quot;&gt;Regression test requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make sure the collectd/ptrans/Hawkular stack never gets broken, we wanted to have an integration test. This test
should fill the following requirements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;do not fail the build on machines where collectd is not available (non-Linux developers machines, or simply machines
where collectd is not installed)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run on Travis-CI, where each pull request is tested before being merged&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make sure all data sent from collectd lands on the Hawkular Metrics server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run as quickly as possible&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s an outline of the implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;skip_test_when_collectd_is_not_available&quot;&gt;Skip test when collectd is not available&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/junit-team/junit/wiki/Assumptions-with-assume&quot; target=&quot;_blank&quot;&gt;jUnit Assumptions&lt;/a&gt; provide a nice way
to test the presence of external dependencies. The default jUnit runner will skip the test if the assumption fails. So
skipping the test when collectd is not available is just a matter of testing if the collectd binary exists, is a regular
file, and is executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private static final String COLLECTD_PATH = System.getProperty(&quot;collectd.path&quot;, &quot;/usr/sbin/collectd&quot;);

// ...

@Before
public void setUp() throws Exception {
    // ...
    assumeCollectdIsPresent();
    // ...
}

private void assumeCollectdIsPresent() {
    Path path = Paths.get(COLLECTD_PATH);
    assumeTrue(COLLECTD_PATH + &quot; does not exist&quot;, Files.exists(path));
    assumeTrue(COLLECTD_PATH + &quot; is not a file&quot;, Files.isRegularFile(path));
    assumeTrue(COLLECTD_PATH + &quot; is not executable&quot;, Files.isExecutable(path));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;run_on_travis_ci&quot;&gt;Run on Travis-CI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.travis-ci.com/user/installing-dependencies/&quot;&gt;
Travis lets you customize the virtual running the build&lt;/a&gt;. Installing packages on the Ubuntu-based VM is very
straightforward, just add a couple of lines in the &lt;code&gt;before_install&lt;/code&gt; target of your &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;before_install:
- sudo apt-get update -qq
- sudo apt-get install -qq collectd collectd-utils&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;verify_data_has_landed_on_the_metrics_server&quot;&gt;Verify data has landed on the Metrics server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;collectd lets you configure one or more &lt;em&gt;write plugins&lt;/em&gt;. The network plugin is required to send data to ptrans. We also
activate the csv plugin and make it log the measurements to &lt;em&gt;stdout&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;LoadPlugin csv
&amp;lt;Plugin csv&amp;gt;
    DataDir stdout
&amp;lt;/Plugin&amp;gt;

LoadPlugin network
&amp;lt;Plugin network&amp;gt;
    Server &quot;127.0.0.1&quot; &quot;25826&quot;
    ReportStats false
&amp;lt;/Plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we start collectd, preventing it to fork to the background with the &lt;code&gt;-f&lt;/code&gt; option, and wait until a minimum number
of measurements has been sent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
public void shouldFindCollectdMetricsOnServer() throws Exception {

    // ...

    ImmutableList.Builder&amp;lt;String&amp;gt; collectdCmd = ImmutableList.builder();
    collectdCmd.add(COLLECTD_PATH, &quot;-C&quot;, collectdConfFile.getAbsolutePath(), &quot;-f&quot;);
    collectdProcessBuilder.command(collectdCmd.build());
    collectdProcess = collectdProcessBuilder.start();

    waitForCollectdValues();

    // ...

}

private void waitForCollectdValues() throws Exception {
    long c;
    do {
        Thread.sleep(MILLISECONDS.convert(1, SECONDS));
        c = Files.lines(collectdOut.toPath())
                 .filter(l -&amp;gt; l.startsWith(&quot;PUTVAL&quot;))
                 .collect(counting());
    } while (c &amp;lt; MINIMUM);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When enough measurements have been collected and sent, all we need to do is to parse collectd &lt;em&gt;stdout&lt;/em&gt; and compare with
server data, which can be loaded with an HTTP request.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;run_as_quickly_as_possible&quot;&gt;Run as quickly as possible&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, all the ingredients can be combined to build an integration test. But the experience showed that running
it could take quite some time, even if the minimum number of measurements was low, and data collectd frequently (every
second).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bit of investigation demonstrated that the test was spending an unexpected amount of time in  the
&lt;code&gt;waitForCollectdValues&lt;/code&gt; method. It turned out that buffering of collectd output was the cause. To avoid it, we can use
the &lt;code&gt;stdbuf&lt;/code&gt; tool from GNU &lt;code&gt;coreutils&lt;/code&gt;: as explained in the manual page, it&amp;#8217;s a tool to run a command &quot;with modified
buffering operations for its standard streams&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this slight modification, the test runs in a few seconds:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;File stdbuf = new File(&quot;/usr/bin/stdbuf&quot;);
ImmutableList.Builder&amp;lt;String&amp;gt; collectdCmd = ImmutableList.builder();
if (stdbuf.exists() &amp;amp;&amp;amp; stdbuf.canExecute()) {
    collectdCmd.add(stdbuf.getAbsolutePath(), &quot;-o0&quot;, &quot;-e0&quot;);
}
collectdCmd.add(COLLECTD_PATH, &quot;-C&quot;, collectdConfFile.getAbsolutePath(), &quot;-f&quot;);
collectdProcessBuilder.command(collectdCmd.build());
collectdProcess = collectdProcessBuilder.start();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.3.1 - Release</title>
      <link>http://www.hawkular.org/blog/2015/2015-04-07-1.html</link>
      <author>noreply@hawkular.org (Stefan Negrea)</author>
      <pubDate>Tue, 7 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/2015-04-07-1.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello Everybody,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce a big milestone for the Hawkular Metrics project. We are releasing today for the
first time from the repository hosted by the Hawkular organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Major changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;UI&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The core UI has been migrated to Hawkular UI related projects (hawkular-ui-components, hawkular, and
hawkular-ui-services). The explorer project is still available for testing purposes.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;REST&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Consistent error reporting and status codes usage across endpoints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added Availability statistics (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-35&quot;&gt;HWKMETRICS-35&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Total downtime duration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last downtime&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Percentage of uptime&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Number of downtimes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Numeric Metric statistics (&lt;a href=&quot;https://issues.jboss.org/browse/HWKMETRICS-34&quot;&gt;HWKMETRICS-34&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Average&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Median&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;95th Percentile&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The REST implementation has been decoupled from the actual core logic, which paves the way for alternate REST
implementations&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Core&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Large refactoring of the core classes and packages, the domain related logic has been pushed to the core layer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Memory storage engine has been dropped from the project. Cassandra (embedded or standalone) is the exclusive
storage engine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;InfluxDB Integration&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;  Influx Java client supports sending and reading data (it was not possible before because of the endoint URI
differences) to/from Hawkular Metrics. Other clients are not tested but should work as well.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;PTrans&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configurable list of listeners (previously all collectd, ganglia, &amp;#8230;&amp;#8203; etc listeners were started)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bug fix: send data to Metrics server if the buffer is full or no data was received recently (previously data could
sit in the buffer and wait for the buffer to be full before being sent)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Github Release:
&lt;a href=&quot;https://github.com/hawkular/hawkular-metrics/releases/tag/0.3.1&quot; class=&quot;bare&quot;&gt;https://github.com/hawkular/hawkular-metrics/releases/tag/0.3.1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:
&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/hawkular/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank you&quot; goes to John Sanda, Thomas Segismont, Mike Thompson, and Heiko Rupp for their project contributions. Special mentions go to Jeeva Kandasamy, Jirka Kremser, and Michael Burman for their project help.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce that Matt Wringe joined the Hawkular Metrics team with a focus on containers and project integrations. We are looking forward to his contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any discussion, suggestions or contributions are more than welcomed; so feel free to comment on this post or join
&lt;a href=&quot;irc://irc.freenode.net/#hawkular&quot;&gt;#Hawkular on freenode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Discontinued</title>
      <link>http://www.hawkular.org/blog/2015/2015-04-01-1.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Wed, 1 Apr 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/2015-04-01-1.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yesterday on March 31st, we had a good number of Meetings with other folks of JBoss in the new new
Red Hat office in Newcastle, called &lt;em&gt;The Pub&lt;/em&gt;.
Among others we were also discussing the future of Monitoring. After all the beers^w discussions we have decided to
discontinue Hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We found out that software is always at fault:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it does not have all the features users want&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it is too slow (always!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it uses too much memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it uses too much cpu&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So instead of investing more time and effort into Hawkular, we will replace it with this new Microservice&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static String isHealthy(String resource) {
    return &quot;no&quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the existing Hawkular source code will be donated to the 1. Association of Possibly Retired Invariant Lines of
code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for your attention&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Dockerized Hawkular builds available</title>
      <link>http://www.hawkular.org/blog/2015/2015-03-30-1.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/2015-03-30-1.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described earlier, we have assembled all the components of Hawkular into a single package, the &lt;em&gt;Kettle&lt;/em&gt;.
This allows you to just build/download one package, start and work with it instead of caring of the individual
sub-packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make the process to play with Hawkular even easier, we have also created a build-pipeline that creates a Docker
image out of the Kettle and publishes it to Docker Hub as hawkular/hawkular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download and run them like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ docker run -d -p 8081:8080 hawkular/hawkular&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the download of the image has finished, it will take a while until Hawkular is fully started up.
When it is up, you can reach the Hawkular UI at &lt;a href=&quot;http://localhost:8081/&quot; class=&quot;bare&quot;&gt;http://localhost:8081/&lt;/a&gt;  ( If you are
running docker on OS/X via boot2docker, you need to use the IP address that is stored in the &lt;code&gt;DOCKER_HOST&lt;/code&gt;
environment variable instead of &lt;code&gt;localhost&lt;/code&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More information is available in the
&lt;a href=&quot;/docs/user/getting-started&quot;&gt;Getting started&lt;/a&gt; document.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The Kettle starts boiling</title>
      <link>http://www.hawkular.org/blog/2015/2015-02-24-1.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/2015-02-24-1.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have been working hard the last weeks to integrate the individual pieces of hawkular into some &lt;em&gt;good old
distribution&lt;/em&gt;, basically a thingy you can check out, unzip and run. And here it is, the &lt;em&gt;Kettle&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hawkular.org//img/Kettle.png&quot; alt=&quot;Kettle&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To build the Kettle you basically checkout the Hawkular main repository and run &lt;code&gt;mvn install&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git clone https://github.com/hawkular/hawkular.git
cd hawkular
mvn install -Pdev -Dlicense.skip
cd kettle/target
cd wildfly-8.2.0.Final
bin/standalone.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can then point your web browser at &lt;a href=&quot;http://localhost:8080/&quot; class=&quot;bare&quot;&gt;http://localhost:8080/&lt;/a&gt; and use Hawkular.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hawkular Metrics 0.2.7 - Release</title>
      <link>http://www.hawkular.org/blog/2015/2015-02-16-1.html</link>
      <author>noreply@hawkular.org (Heiko W. Rupp)</author>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2015/2015-02-16-1.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hawkular-metrics has published under its old name &lt;em&gt;rhq-metrics&lt;/em&gt; its version 0.2.7 release.
From Stefans announcement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I want to summarize the latest release of the RHQ Metrics project and the future of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;rhq_metrics_migrates_to_hawkular_organization&quot;&gt;RHQ Metrics migrates to Hawkular organization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Release 0.2.7 of the RHQ Metrics is the last one from the current repository. But do not panic! Beyond the mechanics of the transfer and rename, the development will continue with the regular crew.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the migration, two project repositories (rhq-metrics and rhq-metrics-openshift) will just be transferred to the Hawkular organization. The code from rhqm-charts was already moved to Hawkular, so we will just close the RHQ repository. We will have a follow up communication once all the infrastructure is in place under the new organization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;rhq_metrics_0_2_7_was_released_today&quot;&gt;RHQ Metrics 0.2.7 was released today&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release has mainly stability fixes and minor enhancements. The Keycloak integration was delayed and not part of this release (as announced in the planning notes). For more details checkout the Github release notes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Github Release:
&lt;a href=&quot;https://github.com/rhq-project/rhq-metrics/releases/tag/0.2.7&quot; class=&quot;bare&quot;&gt;https://github.com/rhq-project/rhq-metrics/releases/tag/0.2.7&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JBoss Nexus Maven artifacts:
&lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/repositories/public/org/rhq/metrics/&quot; class=&quot;bare&quot;&gt;http://origin-repository.jboss.org/nexus/content/repositories/public/org/rhq/metrics/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;openshift_cartridge_for_rhq_metrics_0_2_7&quot;&gt;OpenShift Cartridge for RHQ Metrics 0.2.7&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cartridge supports RHQ Metrics 0.2.7, 0.2.6, and 0.2.5. Just a reminder, the cartridge is the simplest and easiest way to get a public facing instance of RHQ Metrics in just a few minutes with a single command. The cartridge configures Cassandra, Wildfly, and RHQ Metrics (REST interface and UI console) to run in a single gear. For more details please visit the Github repository of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sample command to create a new RHQ Metrics deployment:
rhc app create test_app &lt;a href=&quot;https://raw.githubusercontent.com/rhq-project/rhq-metrics-openshift/master/metadata/manifest.yml&quot; class=&quot;bare&quot;&gt;https://raw.githubusercontent.com/rhq-project/rhq-metrics-openshift/master/metadata/manifest.yml&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Github Repository:
&lt;a href=&quot;https://github.com/rhq-project/rhq-metrics-openshift&quot; class=&quot;bare&quot;&gt;https://github.com/rhq-project/rhq-metrics-openshift&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big &quot;Thank you!&quot; goes to John Sanda, Mike Thompson, Heiko Rupp, and Thomas Segismont for their project contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any discussion, suggestions or contributions are more than welcomed; so feel free to reply to this email or comment directly on the various forum threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you,
Stefan Negrea&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel>
</rss>
